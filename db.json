{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/imgs/00_overview_source_arch.png","path":"imgs/00_overview_source_arch.png","modified":0,"renderable":0},{"_id":"source/imgs/memory.gif","path":"imgs/memory.gif","modified":0,"renderable":0},{"_id":"source/imgs/someip_sd_service_entry_type.png","path":"imgs/someip_sd_service_entry_type.png","modified":0,"renderable":0},{"_id":"source/imgs/vSOMEIP_source_messages_arch.png","path":"imgs/vSOMEIP_source_messages_arch.png","modified":0,"renderable":0},{"_id":"source/imgs/vSOMEIP_source_runtime.png","path":"imgs/vSOMEIP_source_runtime.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_abstraction.dio","path":"imgs/vsomeip_abstraction.dio","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_abstraction.png","path":"imgs/vsomeip_abstraction.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_configuration.png","path":"imgs/vsomeip_configuration.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_endpoint.png","path":"imgs/vsomeip_endpoint.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_example.png","path":"imgs/vsomeip_example.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_message.png","path":"imgs/vsomeip_message.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_payload.png","path":"imgs/vsomeip_payload.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_application.png","path":"imgs/vsomeip_source_application.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_daemon.png","path":"imgs/vsomeip_source_daemon.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_datatype.png","path":"imgs/vsomeip_source_datatype.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_endpoint.png","path":"imgs/vsomeip_source_endpoint.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_message.png","path":"imgs/vsomeip_source_message.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_overview.png","path":"imgs/vsomeip_source_overview.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_routing.png","path":"imgs/vsomeip_source_routing.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_routing_init.png","path":"imgs/vsomeip_source_routing_init.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_routing_start.png","path":"imgs/vsomeip_source_routing_start.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_sd_init.png","path":"imgs/vsomeip_source_sd_init.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_sd_start.png","path":"imgs/vsomeip_source_sd_start.png","modified":0,"renderable":0},{"_id":"source/imgs/vsomeip_source_service_discovery.png","path":"imgs/vsomeip_source_service_discovery.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/The-art-of-command-line.md","hash":"cbb3a2561420af1caba0d0d8e07a77d4a1c30ceb","modified":1648475933376},{"_id":"source/_posts/Linux-Kernel-编译调试.md","hash":"49ee448e1f6d51dcf79c9a8cd0f9ed71815e4f76","modified":1637771953107},{"_id":"source/_posts/c-memory.md","hash":"f8bdf8ca2ed606afeac16e335d3f0d25e5428ee8","modified":1641223336761},{"_id":"source/_posts/huawei-adb.md","hash":"228d321442afaf0e22f2fbdf09d10215a7463257","modified":1638637567319},{"_id":"source/_posts/linux-ipc.md","hash":"a5f301e0a6138f39043421885c74159af63689bb","modified":1647877321488},{"_id":"source/_posts/osi-phy-mac.md","hash":"a5c943c1ef962b5a7d047d33e858847b9bb9591e","modified":1640513504654},{"_id":"source/_posts/manjaro-swap.md","hash":"7abdd1af20fc878d1d586a171dffb866cb96ac0f","modified":1640511068279},{"_id":"source/_posts/elf简介.md","hash":"00a1b76fdf049a6c87807606a0fd906ab6e02864","modified":1642259460289},{"_id":"source/_posts/linux-system-programming.md","hash":"21343f3d8de3c0b401c9950dfe2f7ffd7e380816","modified":1637416670249},{"_id":"source/_posts/service-discovery.md","hash":"292edb5b20423351487dd9170dbdca0a62f4b20d","modified":1640512404226},{"_id":"source/_posts/someip-00：-vsomeip.md","hash":"0d00b83ecabdc80366179fae92766749f48ab32b","modified":1640513097466},{"_id":"source/_posts/someip-01-code.md","hash":"edb7f6c5b9d6bdb00ce34db3e2256c0ae03cc2f0","modified":1640513334843},{"_id":"source/_posts/someip-02-vsomeip-with-ap.md","hash":"cda495452475b36ea91e39fd9978de8256f72ae1","modified":1640513488903},{"_id":"source/_posts/thread.md","hash":"1c29efb045509500e08cda7163630c6217c7a40c","modified":1648056407773},{"_id":"source/_posts/vSOMEIP-source-reading.md","hash":"26a0bce4aa0306f4336adf22f431eb603bc99f5e","modified":1641406453677},{"_id":"source/_posts/对象创建限制在堆或栈.md","hash":"ae6b8af9e4f46b028199f51874330a5f1a045a90","modified":1641741934257},{"_id":"source/_posts/常用位运算.md","hash":"7e1204a0f9b240e7a7888fae7284c691b651943f","modified":1638689399409},{"_id":"source/categories/index.md","hash":"8e2d32c6571cc7a429127391bd1e33a1c3abc7fc","modified":1637416670249},{"_id":"source/tags/index.md","hash":"1fc2f9954bc72e1ed7ddba2779c6ccb12dcee5f3","modified":1637416670249},{"_id":"source/imgs/00_overview_source_arch.png","hash":"4cf396c37bc31920abc98834ec8fa7309643c53d","modified":1641406117120},{"_id":"source/imgs/memory.gif","hash":"684c8406656a77cb40bae38e8650c50a5be77b7a","modified":1641223248185},{"_id":"source/imgs/vSOMEIP_source_messages_arch.png","hash":"5b49a13d9ab1c9d022460402f1e7f85d55a9aeeb","modified":1641406130254},{"_id":"source/imgs/someip_sd_service_entry_type.png","hash":"7dae7499d30fdd50829c52e4d9abd89f78d7510c","modified":1640512735587},{"_id":"source/imgs/vsomeip_abstraction.png","hash":"811d62048fba2ce9682fe6419b5a1764192660b8","modified":1640512735607},{"_id":"source/imgs/vsomeip_configuration.png","hash":"ce3151ef1717d360cd6519caf619bf490ac0f01a","modified":1640512903865},{"_id":"source/imgs/vsomeip_abstraction.dio","hash":"dd75ed69e615f4679772cb6db2d0fd46dd52e835","modified":1640512735607},{"_id":"source/imgs/vsomeip_example.png","hash":"f408a4a159d65740d863dbb5fec721c0beda23b6","modified":1640512921704},{"_id":"source/imgs/vsomeip_message.png","hash":"12fcfb914c6c95d9f5cf2d52982bab304fc89a90","modified":1640512927366},{"_id":"source/imgs/vsomeip_payload.png","hash":"f62861fcf677a2b7358da8c2a17c30ada6df1b34","modified":1640512932959},{"_id":"source/imgs/vsomeip_source_daemon.png","hash":"b84530e7f99e1dad38b256de8d4a9a64ab921dec","modified":1640512941799},{"_id":"source/imgs/vsomeip_source_datatype.png","hash":"c8fbf20d1a61a037e6ab1ea2a3a66c3878f36b95","modified":1640512948503},{"_id":"source/imgs/vsomeip_source_endpoint.png","hash":"792735823f47affb04470f2fa01b583acb2caa55","modified":1640512953981},{"_id":"source/imgs/vsomeip_source_overview.png","hash":"d7732abfbe55cc2fac07134d4ca4062ed2e54ca1","modified":1640512962646},{"_id":"source/imgs/vsomeip_source_routing_init.png","hash":"1914bdd8432c37fb795e71972a5bb06f3d0ca455","modified":1640512967020},{"_id":"source/imgs/vsomeip_source_routing.png","hash":"52592ad4cb5c19b21889d4bd21e3e6ff77c669a0","modified":1640512976105},{"_id":"source/imgs/vsomeip_source_routing_start.png","hash":"f36a2c0b8ee43d296aa6b330eabf2ea1a37534e3","modified":1640512971575},{"_id":"source/imgs/vsomeip_source_sd_init.png","hash":"29fd36180cee3aa35bbc29a186d9d33f894201c8","modified":1640512980462},{"_id":"source/imgs/vsomeip_source_sd_start.png","hash":"c9b6cf86c9bb2f4140277b32f71f17c9622b2536","modified":1640512984902},{"_id":"source/imgs/vsomeip_source_service_discovery.png","hash":"4ab7c13a2e376ea421ff977497cb0ddd8b6d55ae","modified":1640512989266},{"_id":"source/imgs/vsomeip_endpoint.png","hash":"a271c8f6f56e24bf02b89707feb5003780a50a04","modified":1640512914887},{"_id":"source/imgs/vSOMEIP_source_runtime.png","hash":"741fe233b1cbc367b5974b9d68a29261778d1e74","modified":1641406179890},{"_id":"source/imgs/vsomeip_source_application.png","hash":"96d93bb0c84495f695ee1bc5ce057c191521c8ae","modified":1640512937438},{"_id":"source/imgs/vsomeip_source_message.png","hash":"43f2e80914dc29aa54d7156961481576ad381890","modified":1640512958110},{"_id":"themes/next/_config.yml","hash":"9d5153f1612b02ed3e82790351dde8a69c331458","modified":1641742853667},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1637416670249},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1637416670253},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1637416670249},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1637416670249},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637416670249},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637416670249},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1637416670249},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1637416670249},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1637416670249},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1637416670249},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1637416670249},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1637416670249},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1637416670249},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1637416670249},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1637416670249},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1637416670249},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1637416670249},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1637416670249},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1637416670249},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1637416670249},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1637416670249},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1637416670249},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1637416670249},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1637416670249},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1637416670249},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1637416670249},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1637416670253},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1637416670253},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1637416670253},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1637416670253},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1637416670253},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1637416670253},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1637416670253},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1637416670249},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1637416670249},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1637416670249},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1637416670249},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1637416670249},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1637416670249},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1637416670249},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1637416670249},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1637416670249},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1637416670253},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1637416670253},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1637416670253},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1637416670253},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1637416670253},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1637416670253},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1637416670253},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1637416670253},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1637416670253},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1637416670253},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1637416670253},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1637416670253},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1637416670253},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1637416670253},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1637416670253},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1637416670253},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1637416670253},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1637416670253},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1637416670253},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1637416670253},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1637416670253},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1637416670253},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1637416670249},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1637416670253},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1637416670253},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1637416670253},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1637416670253},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1637416670253},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1637416670253},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1637416670256},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1637416670253},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1637416670253},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637416670256},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637416670256},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1637416670249},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1637416670256},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1637416670256},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1637416670256},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1637416670256},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637416670256},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637416670256},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1637416670256},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637416670256},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637416670256},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637416670256},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637416670256},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637416670256},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1637416670249},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1637416670249},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1637416670249},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1637416670249},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1637416670249},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1637416670249},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1637416670249},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1637416670249},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637416670253},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637416670256},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1637416670253},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1637416670253},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1637416670253},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1637416670253},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1637416670253},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1637416670253},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1637416670253},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1637416670253},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1637416670253},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1637416670253},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1637416670253},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1637416670253},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1637416670256},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1637416670256},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637416670256},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1637416670256},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637416670256},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1637416670256},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637416670256},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637416670256},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1637416670253},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637416670256},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1637416670253},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637416670256},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1637416670253},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1637416670253},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1637416670256},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1637416670253},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1637416670256},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1637416670256},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1637416670253},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1637416670256},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637416670256},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1637416670253},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1637416670253},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1637416670253},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1637416670253},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637416670256},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637416670256},{"_id":"public/categories/index.html","hash":"1aa677f91d51c5ad3aa94bf51f806ca4b7d8cd50","modified":1704688778240},{"_id":"public/tags/index.html","hash":"e8415d07d8d00c73d8856840e98e0140dd75ef4a","modified":1704688778240},{"_id":"public/archives/2021/11/index.html","hash":"e0a9cb58eedd902df0440513cf77b660b25abb27","modified":1704688778240},{"_id":"public/archives/2022/01/index.html","hash":"8504c58c3b493e2249b61ee8910ccb3fe6355bcf","modified":1704688778240},{"_id":"public/archives/2022/03/index.html","hash":"2169d9c95031170204ded9520dfee955ed7e5612","modified":1704688778240},{"_id":"public/tags/Linux/index.html","hash":"f42e15471c1ec6b468a5babe0228b9df081d586a","modified":1704688778240},{"_id":"public/tags/gdb/index.html","hash":"4d216f12f4f721576c41301e856312216f6f9600","modified":1704688778240},{"_id":"public/tags/C/index.html","hash":"4a55476e9ae38012baade5bae8e5c09909500d1b","modified":1704688778240},{"_id":"public/tags/Memory/index.html","hash":"c0b4cc91bdc07d3fa0e0b71380acfe31ad560161","modified":1704688778240},{"_id":"public/tags/Notes/index.html","hash":"b8616e8ed2b5b2bd9b31f031491c49348d7c2505","modified":1704688778240},{"_id":"public/tags/adb/index.html","hash":"acacc046dd8e59614b1914854c213f77bdb9b099","modified":1704688778240},{"_id":"public/tags/linux/index.html","hash":"4729e249452bd2e8ab2054fb026d6f045785d374","modified":1704688778240},{"_id":"public/tags/c/index.html","hash":"4dd84ac74cb6d1af16447a840754d0f1f58febc2","modified":1704688778240},{"_id":"public/tags/elf/index.html","hash":"efc9fea4959e5b3a59ce5806f948b699ab764f23","modified":1704688778240},{"_id":"public/tags/Linux-C/index.html","hash":"28924a4225c86c19f3bfbd8f6e249062ab680f88","modified":1704688778240},{"_id":"public/tags/osi/index.html","hash":"88f30bf7c55932e3d74dabe75fa721e52e354004","modified":1704688778240},{"_id":"public/tags/phy/index.html","hash":"67a0f36042bb3eb24927d062bc1b877c24cd33ee","modified":1704688778240},{"_id":"public/tags/mac/index.html","hash":"968c7bd08040345958f8af6d092af32cec230c2b","modified":1704688778240},{"_id":"public/tags/someip-sd/index.html","hash":"d1ad0077a7aa6c4cf8dffef7a3176d5f78523ca0","modified":1704688778240},{"_id":"public/tags/service-discovery/index.html","hash":"b81a96508957b7e953c5422d50028bb0466f74be","modified":1704688778240},{"_id":"public/tags/someip/index.html","hash":"a8c42577aa237fc2b99d7d4ae5e5483b55ed6f7b","modified":1704688778240},{"_id":"public/tags/vSOMEIP/index.html","hash":"4adf954e5dc6e6e8a4d2d1e4d03b9241372ff232","modified":1704688778240},{"_id":"public/tags/CPP/index.html","hash":"278c97164eaa024899a1134ec2c54c8731c21e37","modified":1704688778240},{"_id":"public/tags/SOMEIP/index.html","hash":"ca2f4ee844cccf12608bf11c878466c1cf1d8e8e","modified":1704688778240},{"_id":"public/tags/sources/index.html","hash":"75b8ba0345f505b5a9b5d4bab4f724ba6eecda2e","modified":1704688778240},{"_id":"public/tags/notes/index.html","hash":"482a932333d54f0afec4820d6939391ce7f9faa4","modified":1704688778240},{"_id":"public/tags/cpp/index.html","hash":"9aac4ed59c2c0a84385d6b571693c4a5f1d9c4e4","modified":1704688778240},{"_id":"public/tags/bit-op/index.html","hash":"d4cf4e3d49ed1a290ce13272ab5bbb361588c7f0","modified":1704688778240},{"_id":"public/tags/c-cpp/index.html","hash":"210d7e07c11f1ef43479c0e2086e962d346e7953","modified":1704688778240},{"_id":"public/categories/Linux编程/index.html","hash":"7e7c991d75406b29d2e713ad55bc9a0bfdf5c3f6","modified":1704688778240},{"_id":"public/categories/concepts/index.html","hash":"7d94e974174d72a13935fdd56748c173225d3b67","modified":1704688778240},{"_id":"public/2022/03/28/The-art-of-command-line/index.html","hash":"8d7c7020ccecbfee5345d0399fe9c1cf7aaa5bc9","modified":1704688778240},{"_id":"public/2022/03/24/thread/index.html","hash":"9153eddc63b99b76522a3b95c0f9270dcac9832b","modified":1704688778240},{"_id":"public/2022/03/21/linux-ipc/index.html","hash":"44d7a0f9fe90828d2d6748dc93205b50938d0078","modified":1704688778240},{"_id":"public/2022/01/15/elf简介/index.html","hash":"526586b85127b9825f5946b310770ff356243b95","modified":1704688778240},{"_id":"public/2022/01/08/对象创建限制在堆或栈/index.html","hash":"8f4a80114414d7a21d90c957e251964ae50c15b7","modified":1704688778240},{"_id":"public/2022/01/06/vSOMEIP-source-reading/index.html","hash":"0f46942b9e598bee24bbe803d27ca35f4f1defe5","modified":1704688778240},{"_id":"public/2022/01/03/c-memory/index.html","hash":"f0f6adf20cf8433f60267803ae7754598d1c0e31","modified":1704688778240},{"_id":"public/2021/12/26/service-discovery/index.html","hash":"49a78a8340de0a70fff352ea7c60fc02445e02c1","modified":1704688778240},{"_id":"public/2021/12/23/osi-phy-mac/index.html","hash":"c08c9672e980ecb01169c232eaf08655dc17d879","modified":1704688778240},{"_id":"public/2021/12/22/someip-02-vsomeip-with-ap/index.html","hash":"900b47c731e3aa5a829e287fc2b69485dc0395de","modified":1704688778240},{"_id":"public/2021/12/21/someip-01-code/index.html","hash":"d89961d95e6bffc87e99374c7b0a6d9658d484e6","modified":1704688778240},{"_id":"public/2021/12/20/someip-00：-vsomeip/index.html","hash":"54481e9bd5d2930f5d7c1583d51fea004b0c764d","modified":1704688778240},{"_id":"public/2021/12/16/manjaro-swap/index.html","hash":"2b395d67ff8a593eca46c36ff31b1e96748de206","modified":1704688778240},{"_id":"public/2021/12/05/常用位运算/index.html","hash":"f464530bcb9b4584459c3cad1bb48d75923ea53c","modified":1704688778240},{"_id":"public/2021/12/05/huawei-adb/index.html","hash":"5e98a1f042405ca67d50b7437475fb0f85034834","modified":1704688778240},{"_id":"public/2021/11/24/Linux-Kernel-编译调试/index.html","hash":"7a97ea21fbe492728f187fb2173c25134069c7a2","modified":1704688778240},{"_id":"public/2021/11/20/linux-system-programming/index.html","hash":"c61b5fa204bdd2a1526789ddbb205c9a70d1818d","modified":1704688778240},{"_id":"public/archives/index.html","hash":"9362ca51dca30137795fc24985153ccfb15bf896","modified":1704688778240},{"_id":"public/archives/page/2/index.html","hash":"bec360e451b6e898fd64021e9c4527b218dff8ee","modified":1704688778240},{"_id":"public/archives/2021/index.html","hash":"2ddbad3613ddcb313dfcc5febf523b8cfcb63320","modified":1704688778240},{"_id":"public/archives/2021/12/index.html","hash":"1e54dc7080bb1924ba5aa3df7ff11124bbe9eae4","modified":1704688778240},{"_id":"public/archives/2022/index.html","hash":"8aaf748d73c77a20ca795fb7e0195a533853c7ab","modified":1704688778240},{"_id":"public/index.html","hash":"bd3b482ca1e2cef8acb5dc62bb15c0c2fe8d7a0a","modified":1704688778240},{"_id":"public/page/2/index.html","hash":"27602b7bcf8437c3a387b03cd701966667de6ea4","modified":1704688778240},{"_id":"public/page/3/index.html","hash":"05192c46a54101d6ca9cdbbd19fdd44ee8cc3882","modified":1704688778240},{"_id":"public/page/4/index.html","hash":"9b85720c15e8acea3d678a8d89748a635267f3f2","modified":1704688778240},{"_id":"public/page/5/index.html","hash":"cdcc5dfb9752147458eb94d301517d4c5ec569c1","modified":1704688778240},{"_id":"public/page/6/index.html","hash":"3406f5a43ab873d97224f1a1d4b98b577cbad695","modified":1704688778240},{"_id":"public/page/7/index.html","hash":"760e5d3078039d0d6110c0fc2c83b1f038b04222","modified":1704688778240},{"_id":"public/page/8/index.html","hash":"b54698ea61069630afe255838ed12ee55ded65dd","modified":1704688778240},{"_id":"public/page/9/index.html","hash":"2236a24ba49c7efaca75690802b0a190fa14a681","modified":1704688778240},{"_id":"public/page/10/index.html","hash":"06dfadbd6ca8e90a456b47ee892313763ed63eb3","modified":1704688778240},{"_id":"public/page/11/index.html","hash":"29eb17abec2ae6b21ec79284fb201fd3c782cf49","modified":1704688778240},{"_id":"public/page/12/index.html","hash":"649d5658af3f0862b69b4c00ee245bc846e2a09f","modified":1704688778240},{"_id":"public/page/13/index.html","hash":"2dd4bb7f7981d05abff4b7873c77e5a7b2c5756f","modified":1704688778240},{"_id":"public/page/14/index.html","hash":"834785fb153bf7f31d273bd8aa7e32469f3a9f7e","modified":1704688778240},{"_id":"public/page/15/index.html","hash":"95860d4ec1a238471f782e05939b73b2d940db4b","modified":1704688778240},{"_id":"public/page/16/index.html","hash":"48ca5411892bbaa2cd1762b27b512660f3913985","modified":1704688778240},{"_id":"public/page/17/index.html","hash":"6b5fc8abb59c06940bde13524b9275b2ccabe77f","modified":1704688778240},{"_id":"public/imgs/00_overview_source_arch.png","hash":"4cf396c37bc31920abc98834ec8fa7309643c53d","modified":1648476054489},{"_id":"public/imgs/memory.gif","hash":"684c8406656a77cb40bae38e8650c50a5be77b7a","modified":1648476054489},{"_id":"public/imgs/someip_sd_service_entry_type.png","hash":"7dae7499d30fdd50829c52e4d9abd89f78d7510c","modified":1648476054489},{"_id":"public/imgs/vSOMEIP_source_messages_arch.png","hash":"5b49a13d9ab1c9d022460402f1e7f85d55a9aeeb","modified":1648476054489},{"_id":"public/imgs/vsomeip_abstraction.dio","hash":"dd75ed69e615f4679772cb6db2d0fd46dd52e835","modified":1648476054489},{"_id":"public/imgs/vsomeip_abstraction.png","hash":"811d62048fba2ce9682fe6419b5a1764192660b8","modified":1648476054489},{"_id":"public/imgs/vsomeip_configuration.png","hash":"ce3151ef1717d360cd6519caf619bf490ac0f01a","modified":1648476054489},{"_id":"public/imgs/vsomeip_example.png","hash":"f408a4a159d65740d863dbb5fec721c0beda23b6","modified":1648476054489},{"_id":"public/imgs/vsomeip_message.png","hash":"12fcfb914c6c95d9f5cf2d52982bab304fc89a90","modified":1648476054489},{"_id":"public/imgs/vsomeip_payload.png","hash":"f62861fcf677a2b7358da8c2a17c30ada6df1b34","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_daemon.png","hash":"b84530e7f99e1dad38b256de8d4a9a64ab921dec","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_endpoint.png","hash":"792735823f47affb04470f2fa01b583acb2caa55","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_datatype.png","hash":"c8fbf20d1a61a037e6ab1ea2a3a66c3878f36b95","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_overview.png","hash":"d7732abfbe55cc2fac07134d4ca4062ed2e54ca1","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_routing.png","hash":"52592ad4cb5c19b21889d4bd21e3e6ff77c669a0","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_routing_init.png","hash":"1914bdd8432c37fb795e71972a5bb06f3d0ca455","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_sd_init.png","hash":"29fd36180cee3aa35bbc29a186d9d33f894201c8","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_routing_start.png","hash":"f36a2c0b8ee43d296aa6b330eabf2ea1a37534e3","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_service_discovery.png","hash":"4ab7c13a2e376ea421ff977497cb0ddd8b6d55ae","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_sd_start.png","hash":"c9b6cf86c9bb2f4140277b32f71f17c9622b2536","modified":1648476054489},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1648476054489},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1648476054489},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1648476054489},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1648476054489},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1648476054489},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1648476054489},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1648476054489},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1648476054489},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1648476054489},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1648476054489},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1648476054489},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1648476054489},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1648476054489},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1648476054489},{"_id":"public/imgs/vsomeip_endpoint.png","hash":"a271c8f6f56e24bf02b89707feb5003780a50a04","modified":1648476054489},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1648476054489},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1648476054489},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1648476054489},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1648476054489},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1648476054489},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1648476054489},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1648476054489},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1648476054489},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1648476054489},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1648476054489},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1648476054489},{"_id":"public/css/main.css","hash":"7ea01523539c60c881a6576e32b60252a0a5580e","modified":1648476054489},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1648476054489},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1648476054489},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1648476054489},{"_id":"public/imgs/vSOMEIP_source_runtime.png","hash":"741fe233b1cbc367b5974b9d68a29261778d1e74","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_application.png","hash":"96d93bb0c84495f695ee1bc5ce057c191521c8ae","modified":1648476054489},{"_id":"public/imgs/vsomeip_source_message.png","hash":"43f2e80914dc29aa54d7156961481576ad381890","modified":1648476054489}],"Category":[{"name":"Linux编程","_id":"cl1as2wft000e079y8fvhfpiq"},{"name":"concepts","_id":"cl1as2wg1000p079y1yo3c11i"}],"Data":[],"Page":[{"title":"categories","date":"2021-11-20T11:33:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-20 19:33:51\ntype: \"categories\"\n---\n","updated":"2021-11-20T13:57:50.249Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl1as2wfe0000079y59zsg9kr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-11-20T11:34:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-20 19:34:15\ntype: \"tags\"\n---\n","updated":"2021-11-20T13:57:50.249Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl1as2wfi0002079y2pyn3nwt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Linux Kernel 编译调试（Qemu + gdb）","date":"2021-11-24T14:03:26.000Z","_content":"\n## 编译环境\n\n```bash\n\n ██████████████████  ████████     4soos@dev\n ██████████████████  ████████     OS: Manjaro 21.2.0 Qonos\n ██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO\n ██████████████████  ████████     Uptime: 19m\n ████████            ████████     Packages: 1324\n ████████  ████████  ████████     Shell: bash 5.1.8\n ████████  ████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     DE: GNOME 41.1\n ████████  ████████  ████████     WM: Mutter\n ████████  ████████  ████████     WM Theme: \n ████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]\n ████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     Disk: 150G / 946G (17%)\n                                  CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n                                  GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)\n                                  RAM: 2030MiB / 15453MiB\n\n```\n\n## 源码： \n\nhttps://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\n\n\n## 工具集\n```bash\nyay -S base-devel\n```\n\n## 编译步骤\n```bash\nmake menuconfig # 内核配置， 可以默认配置\n\nmake -j$(nproc) # -j job 一般为线程数\n\n......\n\narch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)\nKernel: arch/x86/boot/bzImage is ready  (#1)\n\n```\n编好之后的产物为 `arch/x86/boot/bzImage`。\n\n## rootfs 和文件系统简介\n\n`rootfs`是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。\n基于以上原因，linux在启动阶段使用`rootfs`文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从`rootfs`切换到磁盘文件系统。\n\n大致的启动流程\n\n```\nstart_kernel\n　　vfs_caches_init\n　　　　mnt_init\n　　　　　　init_rootfs注册rootfs文件系统\n　　　　　　init_mount_tree 挂载rootfs文件系统\n　　　　　　　　vfs_kern_mount\n　　　　　　　　　　mount_fs\n　　　　　　　　　　　　type->mount其实是rootfs_mount\n　　　　　　　　　　　　　　mount_nodev\n　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super\n　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi->mount_opts.mode, 0);\n　　　　　　　　　　　　　　　　　　sb->s_root = d_make_root(inode);\n　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]\n　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode->i_sb, &name);\n　　　　　　　　　　…\n　　　　　　　　　　mnt->mnt.mnt_root = root;[2*]\n　　　　　　　　　　mnt->mnt.mnt_sb = root->d_sb;[3*]\n　　　　　　　　　　mnt->mnt_mountpoint = mnt->mnt.mnt_root;[4*]\n　　　　　　　　　　mnt->mnt_parent = mnt;[5*]\nroot.mnt = mnt;\n　　　　　　　　root.dentry = mnt->mnt_root;\n　　　　　　　　mnt->mnt_flags |= MNT_LOCKED;\n　　　　　　　　set_fs_pwd(current->fs, &root);\n　　　　　　　　set_fs_root(current->fs, &root);\n　　…\n　　rest_init\n　　kernel_thread(kernel_init, NULL, CLONE_FS);\n\n```\n正常来说，根文件系统至少包括以下目录：\n\n* /etc/：存储重要的配置文件。\n\n* /bin/：存储常用且开机时必须用到的执行文件。\n\n* /sbin/：存储着开机过程中所需的系统执行文件。\n\n* /lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。\n\n* /dev/：存储设备文件。\n\n> 以上列举出的目录必须存储在根文件系统上，缺一不可。\n\n* /proc\n\n这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。\n\n### 制作一个临时的rootfs\n```bash\ntouch main.c\nvim main.c\n```\n\n#### 代码\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    fflush(stdout);\n    while(1) {\n        printf(\"linux-5.14 > \\n\");\n    };\n    return 0;\n}\n\n```\n\n#### 生成rootfs\n\n```bash\ngcc --static -o hello_kernel main.c\necho hello_kernel | cpio -o --format=newc > rootfs\n```\n\n#### QEMU 启动\n```bash\nqemu-system-x86_64 \\\n> -kernel ./arch/x86/boot/bzImage \\\n> -initrd ./rootfs \\\n> -append \"root=/dev/ram rdinit=hello_kernel\" \\\n> -smp 2 \\\n> -s -S\n\n```\n这时的Qemu 会进入等待状态, \n\n#### GDB 启动\n```\ngdb ./vmlinux\n......\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./vmlinux...\n(gdb) target remote:1234\nRemote debugging using :1234\n0x000000000000fff0 in exception_stacks ()\n(gdb) b start_kernel\nBreakpoint 1 at 0xfff0\n(gdb) c\nContinuing.\n\n```\n\n_target remote:1234_， gdb 连接上qemu,\n\n_b start_kernel_， 设置断点： `start_kernel`\n\n_c_， 继续执行：\n\n\n##  VS Code 上面调试\n\n需要安装好gdb插件\n然后, 三个配置文件：\n\nc_cpp_properties.json\n\n```json\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux kernel\",\n            \"cStandard\": \"c11\",\n            \"intelliSenseMode\": \"linux-clang-x64\",\n            \"compileCommands\": \"${}/compile_commands.json\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\nlaunch.json\n\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"qemu\",\n            \"miDebuggerServerAddress\":\"127.0.0.1:1234\",\n            \"program\": \"${workspaceFolder}/vmlinux\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}\n```\n\ntasks.json\n```json\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"qemu\",\n        \"type\": \"shell\",\n        \"command\": \"qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\\"root=/dev/ram rdinit=hello_kernel\\\" -smp 2 -s -S\",\n        \"presentation\": {\n          \"echo\": true,\n          \"clear\": true,\n          \"group\": \"qemu\"\n        },\n        \"isBackground\": true,\n        \"problemMatcher\": [\n          {\n            \"pattern\": [\n              {\n                \"regexp\": \".\",\n                \"file\": 1,\n                \"location\": 2,\n                \"message\": 3\n              }\n            ],\n            \"background\": {\n              \"activeOnStart\": true,\n              \"beginsPattern\": \".\",\n              \"endsPattern\": \".\"\n            }\n          }\n        ]\n      },\n      {\n        \"label\": \"build\",\n        \"type\": \"shell\",\n        \"command\": \"make\",\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        },\n        \"presentation\": {\n          \"echo\": false,\n          \"group\": \"build\"\n        }\n      }\n    ]\n  }\n```\n\n\n","source":"_posts/Linux-Kernel-编译调试.md","raw":"---\ntitle: Linux Kernel 编译调试（Qemu + gdb）\ndate: 2021-11-24 22:03:26\ntags:\n    - Linux\n    - gdb\n---\n\n## 编译环境\n\n```bash\n\n ██████████████████  ████████     4soos@dev\n ██████████████████  ████████     OS: Manjaro 21.2.0 Qonos\n ██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO\n ██████████████████  ████████     Uptime: 19m\n ████████            ████████     Packages: 1324\n ████████  ████████  ████████     Shell: bash 5.1.8\n ████████  ████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     DE: GNOME 41.1\n ████████  ████████  ████████     WM: Mutter\n ████████  ████████  ████████     WM Theme: \n ████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]\n ████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     Disk: 150G / 946G (17%)\n                                  CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n                                  GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)\n                                  RAM: 2030MiB / 15453MiB\n\n```\n\n## 源码： \n\nhttps://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\n\n\n## 工具集\n```bash\nyay -S base-devel\n```\n\n## 编译步骤\n```bash\nmake menuconfig # 内核配置， 可以默认配置\n\nmake -j$(nproc) # -j job 一般为线程数\n\n......\n\narch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)\nKernel: arch/x86/boot/bzImage is ready  (#1)\n\n```\n编好之后的产物为 `arch/x86/boot/bzImage`。\n\n## rootfs 和文件系统简介\n\n`rootfs`是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。\n基于以上原因，linux在启动阶段使用`rootfs`文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从`rootfs`切换到磁盘文件系统。\n\n大致的启动流程\n\n```\nstart_kernel\n　　vfs_caches_init\n　　　　mnt_init\n　　　　　　init_rootfs注册rootfs文件系统\n　　　　　　init_mount_tree 挂载rootfs文件系统\n　　　　　　　　vfs_kern_mount\n　　　　　　　　　　mount_fs\n　　　　　　　　　　　　type->mount其实是rootfs_mount\n　　　　　　　　　　　　　　mount_nodev\n　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super\n　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi->mount_opts.mode, 0);\n　　　　　　　　　　　　　　　　　　sb->s_root = d_make_root(inode);\n　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]\n　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode->i_sb, &name);\n　　　　　　　　　　…\n　　　　　　　　　　mnt->mnt.mnt_root = root;[2*]\n　　　　　　　　　　mnt->mnt.mnt_sb = root->d_sb;[3*]\n　　　　　　　　　　mnt->mnt_mountpoint = mnt->mnt.mnt_root;[4*]\n　　　　　　　　　　mnt->mnt_parent = mnt;[5*]\nroot.mnt = mnt;\n　　　　　　　　root.dentry = mnt->mnt_root;\n　　　　　　　　mnt->mnt_flags |= MNT_LOCKED;\n　　　　　　　　set_fs_pwd(current->fs, &root);\n　　　　　　　　set_fs_root(current->fs, &root);\n　　…\n　　rest_init\n　　kernel_thread(kernel_init, NULL, CLONE_FS);\n\n```\n正常来说，根文件系统至少包括以下目录：\n\n* /etc/：存储重要的配置文件。\n\n* /bin/：存储常用且开机时必须用到的执行文件。\n\n* /sbin/：存储着开机过程中所需的系统执行文件。\n\n* /lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。\n\n* /dev/：存储设备文件。\n\n> 以上列举出的目录必须存储在根文件系统上，缺一不可。\n\n* /proc\n\n这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。\n\n### 制作一个临时的rootfs\n```bash\ntouch main.c\nvim main.c\n```\n\n#### 代码\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    printf(\"hello world!\");\n    fflush(stdout);\n    while(1) {\n        printf(\"linux-5.14 > \\n\");\n    };\n    return 0;\n}\n\n```\n\n#### 生成rootfs\n\n```bash\ngcc --static -o hello_kernel main.c\necho hello_kernel | cpio -o --format=newc > rootfs\n```\n\n#### QEMU 启动\n```bash\nqemu-system-x86_64 \\\n> -kernel ./arch/x86/boot/bzImage \\\n> -initrd ./rootfs \\\n> -append \"root=/dev/ram rdinit=hello_kernel\" \\\n> -smp 2 \\\n> -s -S\n\n```\n这时的Qemu 会进入等待状态, \n\n#### GDB 启动\n```\ngdb ./vmlinux\n......\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./vmlinux...\n(gdb) target remote:1234\nRemote debugging using :1234\n0x000000000000fff0 in exception_stacks ()\n(gdb) b start_kernel\nBreakpoint 1 at 0xfff0\n(gdb) c\nContinuing.\n\n```\n\n_target remote:1234_， gdb 连接上qemu,\n\n_b start_kernel_， 设置断点： `start_kernel`\n\n_c_， 继续执行：\n\n\n##  VS Code 上面调试\n\n需要安装好gdb插件\n然后, 三个配置文件：\n\nc_cpp_properties.json\n\n```json\n{\n    \"configurations\": [\n        {\n            \"name\": \"Linux kernel\",\n            \"cStandard\": \"c11\",\n            \"intelliSenseMode\": \"linux-clang-x64\",\n            \"compileCommands\": \"${}/compile_commands.json\"\n        }\n    ],\n    \"version\": 4\n}\n```\n\nlaunch.json\n\n```json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"qemu\",\n            \"miDebuggerServerAddress\":\"127.0.0.1:1234\",\n            \"program\": \"${workspaceFolder}/vmlinux\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ]\n        }\n    ]\n}\n```\n\ntasks.json\n```json\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"qemu\",\n        \"type\": \"shell\",\n        \"command\": \"qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\\"root=/dev/ram rdinit=hello_kernel\\\" -smp 2 -s -S\",\n        \"presentation\": {\n          \"echo\": true,\n          \"clear\": true,\n          \"group\": \"qemu\"\n        },\n        \"isBackground\": true,\n        \"problemMatcher\": [\n          {\n            \"pattern\": [\n              {\n                \"regexp\": \".\",\n                \"file\": 1,\n                \"location\": 2,\n                \"message\": 3\n              }\n            ],\n            \"background\": {\n              \"activeOnStart\": true,\n              \"beginsPattern\": \".\",\n              \"endsPattern\": \".\"\n            }\n          }\n        ]\n      },\n      {\n        \"label\": \"build\",\n        \"type\": \"shell\",\n        \"command\": \"make\",\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        },\n        \"presentation\": {\n          \"echo\": false,\n          \"group\": \"build\"\n        }\n      }\n    ]\n  }\n```\n\n\n","slug":"Linux-Kernel-编译调试","published":1,"updated":"2021-11-24T16:39:13.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfg0001079y9tjq5uba","content":"<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">██████████████████  ████████     4soos@dev</span><br><span class=\"line\">██████████████████  ████████     OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Uptime: 19m</span><br><span class=\"line\">████████            ████████     Packages: 1324</span><br><span class=\"line\">████████  ████████  ████████     Shell: bash 5.1.8</span><br><span class=\"line\">████████  ████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.1</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]</span><br><span class=\"line\">████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     Disk: 150G / 946G (17%)</span><br><span class=\"line\">                                 CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">                                 GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)</span><br><span class=\"line\">                                 RAM: 2030MiB / 15453MiB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h2><p><a href=\"https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz</a></p>\n<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S base-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make menuconfig <span class=\"comment\"># 内核配置， 可以默认配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">make -j$(nproc) <span class=\"comment\"># -j job 一般为线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)</span><br><span class=\"line\">Kernel: arch/x86/boot/bzImage is ready  (<span class=\"comment\">#1)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编好之后的产物为 <code>arch/x86/boot/bzImage</code>。</p>\n<h2 id=\"rootfs-和文件系统简介\"><a href=\"#rootfs-和文件系统简介\" class=\"headerlink\" title=\"rootfs 和文件系统简介\"></a>rootfs 和文件系统简介</h2><p><code>rootfs</code>是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。<br>基于以上原因，linux在启动阶段使用<code>rootfs</code>文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从<code>rootfs</code>切换到磁盘文件系统。</p>\n<p>大致的启动流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_kernel</span><br><span class=\"line\">　　vfs_caches_init</span><br><span class=\"line\">　　　　mnt_init</span><br><span class=\"line\">　　　　　　init_rootfs注册rootfs文件系统</span><br><span class=\"line\">　　　　　　init_mount_tree 挂载rootfs文件系统</span><br><span class=\"line\">　　　　　　　　vfs_kern_mount</span><br><span class=\"line\">　　　　　　　　　　mount_fs</span><br><span class=\"line\">　　　　　　　　　　　　type-&gt;mount其实是rootfs_mount</span><br><span class=\"line\">　　　　　　　　　　　　　　mount_nodev</span><br><span class=\"line\">　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi-&gt;mount_opts.mode, 0);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　sb-&gt;s_root = d_make_root(inode);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode-&gt;i_sb, &amp;name);</span><br><span class=\"line\">　　　　　　　　　　…</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_root = root;[2*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;[3*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;[4*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_parent = mnt;[5*]</span><br><span class=\"line\">root.mnt = mnt;</span><br><span class=\"line\">　　　　　　　　root.dentry = mnt-&gt;mnt_root;</span><br><span class=\"line\">　　　　　　　　mnt-&gt;mnt_flags |= MNT_LOCKED;</span><br><span class=\"line\">　　　　　　　　set_fs_pwd(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　　　　　　　set_fs_root(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　…</span><br><span class=\"line\">　　rest_init</span><br><span class=\"line\">　　kernel_thread(kernel_init, NULL, CLONE_FS);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正常来说，根文件系统至少包括以下目录：</p>\n<ul>\n<li><p>/etc/：存储重要的配置文件。</p>\n</li>\n<li><p>/bin/：存储常用且开机时必须用到的执行文件。</p>\n</li>\n<li><p>/sbin/：存储着开机过程中所需的系统执行文件。</p>\n</li>\n<li><p>/lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。</p>\n</li>\n<li><p>/dev/：存储设备文件。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上列举出的目录必须存储在根文件系统上，缺一不可。</p>\n</blockquote>\n<ul>\n<li>/proc</li>\n</ul>\n<p>这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。</p>\n<h3 id=\"制作一个临时的rootfs\"><a href=\"#制作一个临时的rootfs\" class=\"headerlink\" title=\"制作一个临时的rootfs\"></a>制作一个临时的rootfs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch main.c</span><br><span class=\"line\">vim main.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;linux-5.14 &gt; \\n&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成rootfs\"><a href=\"#生成rootfs\" class=\"headerlink\" title=\"生成rootfs\"></a>生成rootfs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --static -o hello_kernel main.c</span><br><span class=\"line\"><span class=\"built_in\">echo</span> hello_kernel | cpio -o --format=newc &gt; rootfs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QEMU-启动\"><a href=\"#QEMU-启动\" class=\"headerlink\" title=\"QEMU 启动\"></a>QEMU 启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">&gt; -kernel ./arch/x86/boot/bzImage \\</span><br><span class=\"line\">&gt; -initrd ./rootfs \\</span><br><span class=\"line\">&gt; -append <span class=\"string\">&quot;root=/dev/ram rdinit=hello_kernel&quot;</span> \\</span><br><span class=\"line\">&gt; -smp 2 \\</span><br><span class=\"line\">&gt; -s -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时的Qemu 会进入等待状态, </p>\n<h4 id=\"GDB-启动\"><a href=\"#GDB-启动\" class=\"headerlink\" title=\"GDB 启动\"></a>GDB 启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./vmlinux</span><br><span class=\"line\">......</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./vmlinux...</span><br><span class=\"line\">(gdb) target remote:1234</span><br><span class=\"line\">Remote debugging using :1234</span><br><span class=\"line\">0x000000000000fff0 in exception_stacks ()</span><br><span class=\"line\">(gdb) b start_kernel</span><br><span class=\"line\">Breakpoint 1 at 0xfff0</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_target remote:1234_， gdb 连接上qemu,</p>\n<p>_b start_kernel_， 设置断点： <code>start_kernel</code></p>\n<p>_c_， 继续执行：</p>\n<h2 id=\"VS-Code-上面调试\"><a href=\"#VS-Code-上面调试\" class=\"headerlink\" title=\"VS Code 上面调试\"></a>VS Code 上面调试</h2><p>需要安装好gdb插件<br>然后, 三个配置文件：</p>\n<p>c_cpp_properties.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Linux kernel&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span>: <span class=\"string\">&quot;c11&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span>: <span class=\"string\">&quot;linux-clang-x64&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;compileCommands&quot;</span>: <span class=\"string\">&quot;$&#123;&#125;/compile_commands.json&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use IntelliSense to learn about possible attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// Hover to view descriptions of existing attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;(gdb) Launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerServerAddress&quot;</span>:<span class=\"string\">&quot;127.0.0.1:1234&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/vmlinux&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class=\"line\">    <span class=\"comment\">// for the documentation about the tasks.json format</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\&quot;root=/dev/ram rdinit=hello_kernel\\&quot; -smp 2 -s -S&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;clear&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isBackground&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatcher&quot;</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;pattern&quot;</span>: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;regexp&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;file&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;location&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;message&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;activeOnStart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;beginsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;endsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">██████████████████  ████████     4soos@dev</span><br><span class=\"line\">██████████████████  ████████     OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">██████████████████  ████████     Kernel: x86_64 Linux 5.10.79-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Uptime: 19m</span><br><span class=\"line\">████████            ████████     Packages: 1324</span><br><span class=\"line\">████████  ████████  ████████     Shell: bash 5.1.8</span><br><span class=\"line\">████████  ████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.1</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-dark-pueril [GTK2/3]</span><br><span class=\"line\">████████  ████████  ████████     Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     Disk: 150G / 946G (17%)</span><br><span class=\"line\">                                 CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">                                 GPU: AMD RENOIR (DRM 3.40.0, 5.10.79-1-MANJARO, LLVM 13.0.0)</span><br><span class=\"line\">                                 RAM: 2030MiB / 15453MiB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h2><p><a href=\"https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz\">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.4.tar.xz</a></p>\n<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S base-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译步骤\"><a href=\"#编译步骤\" class=\"headerlink\" title=\"编译步骤\"></a>编译步骤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make menuconfig <span class=\"comment\"># 内核配置， 可以默认配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">make -j$(nproc) <span class=\"comment\"># -j job 一般为线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x6455b190)</span><br><span class=\"line\">Kernel: arch/x86/boot/bzImage is ready  (<span class=\"comment\">#1)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编好之后的产物为 <code>arch/x86/boot/bzImage</code>。</p>\n<h2 id=\"rootfs-和文件系统简介\"><a href=\"#rootfs-和文件系统简介\" class=\"headerlink\" title=\"rootfs 和文件系统简介\"></a>rootfs 和文件系统简介</h2><p><code>rootfs</code>是基于内存的文件系统，所有操作都在内存中完成；也没有实际的存储设备，所以不需要设备驱动程序的参与。<br>基于以上原因，linux在启动阶段使用<code>rootfs</code>文件系统，当磁盘驱动程序和磁盘文件系统成功加载后，linux系统会将系统根目录从<code>rootfs</code>切换到磁盘文件系统。</p>\n<p>大致的启动流程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start_kernel</span><br><span class=\"line\">　　vfs_caches_init</span><br><span class=\"line\">　　　　mnt_init</span><br><span class=\"line\">　　　　　　init_rootfs注册rootfs文件系统</span><br><span class=\"line\">　　　　　　init_mount_tree 挂载rootfs文件系统</span><br><span class=\"line\">　　　　　　　　vfs_kern_mount</span><br><span class=\"line\">　　　　　　　　　　mount_fs</span><br><span class=\"line\">　　　　　　　　　　　　type-&gt;mount其实是rootfs_mount</span><br><span class=\"line\">　　　　　　　　　　　　　　mount_nodev</span><br><span class=\"line\">　　　　　　　　　　　　　　　　fill_super 其实是ramfs_fill_super</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi-&gt;mount_opts.mode, 0);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　sb-&gt;s_root = d_make_root(inode);</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　static const struct qstr name = QSTR_INIT(“/”, 1);[1*]</span><br><span class=\"line\">　　　　　　　　　　　　　　　　　　　　__d_alloc(root_inode-&gt;i_sb, &amp;name);</span><br><span class=\"line\">　　　　　　　　　　…</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_root = root;[2*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;[3*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;[4*]</span><br><span class=\"line\">　　　　　　　　　　mnt-&gt;mnt_parent = mnt;[5*]</span><br><span class=\"line\">root.mnt = mnt;</span><br><span class=\"line\">　　　　　　　　root.dentry = mnt-&gt;mnt_root;</span><br><span class=\"line\">　　　　　　　　mnt-&gt;mnt_flags |= MNT_LOCKED;</span><br><span class=\"line\">　　　　　　　　set_fs_pwd(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　　　　　　　set_fs_root(current-&gt;fs, &amp;root);</span><br><span class=\"line\">　　…</span><br><span class=\"line\">　　rest_init</span><br><span class=\"line\">　　kernel_thread(kernel_init, NULL, CLONE_FS);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正常来说，根文件系统至少包括以下目录：</p>\n<ul>\n<li><p>/etc/：存储重要的配置文件。</p>\n</li>\n<li><p>/bin/：存储常用且开机时必须用到的执行文件。</p>\n</li>\n<li><p>/sbin/：存储着开机过程中所需的系统执行文件。</p>\n</li>\n<li><p>/lib/：存储/bin/及/sbin/的执行文件所需的链接库，以及Linux的内核模块。</p>\n</li>\n<li><p>/dev/：存储设备文件。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上列举出的目录必须存储在根文件系统上，缺一不可。</p>\n</blockquote>\n<ul>\n<li>/proc</li>\n</ul>\n<p>这是一个空目录，常作为proc文件系统的挂接点，proc文件系统是个虚拟的文件系统，它没有实际的存储设备，里面的目录，文件都是由内核临时生成的，用来表示系统的运行状态，也可以操作其中的文件控制系统。</p>\n<h3 id=\"制作一个临时的rootfs\"><a href=\"#制作一个临时的rootfs\" class=\"headerlink\" title=\"制作一个临时的rootfs\"></a>制作一个临时的rootfs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch main.c</span><br><span class=\"line\">vim main.c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;linux-5.14 &gt; \\n&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成rootfs\"><a href=\"#生成rootfs\" class=\"headerlink\" title=\"生成rootfs\"></a>生成rootfs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --static -o hello_kernel main.c</span><br><span class=\"line\"><span class=\"built_in\">echo</span> hello_kernel | cpio -o --format=newc &gt; rootfs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"QEMU-启动\"><a href=\"#QEMU-启动\" class=\"headerlink\" title=\"QEMU 启动\"></a>QEMU 启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">&gt; -kernel ./arch/x86/boot/bzImage \\</span><br><span class=\"line\">&gt; -initrd ./rootfs \\</span><br><span class=\"line\">&gt; -append <span class=\"string\">&quot;root=/dev/ram rdinit=hello_kernel&quot;</span> \\</span><br><span class=\"line\">&gt; -smp 2 \\</span><br><span class=\"line\">&gt; -s -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时的Qemu 会进入等待状态, </p>\n<h4 id=\"GDB-启动\"><a href=\"#GDB-启动\" class=\"headerlink\" title=\"GDB 启动\"></a>GDB 启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./vmlinux</span><br><span class=\"line\">......</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./vmlinux...</span><br><span class=\"line\">(gdb) target remote:1234</span><br><span class=\"line\">Remote debugging using :1234</span><br><span class=\"line\">0x000000000000fff0 in exception_stacks ()</span><br><span class=\"line\">(gdb) b start_kernel</span><br><span class=\"line\">Breakpoint 1 at 0xfff0</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>_target remote:1234_， gdb 连接上qemu,</p>\n<p>_b start_kernel_， 设置断点： <code>start_kernel</code></p>\n<p>_c_， 继续执行：</p>\n<h2 id=\"VS-Code-上面调试\"><a href=\"#VS-Code-上面调试\" class=\"headerlink\" title=\"VS Code 上面调试\"></a>VS Code 上面调试</h2><p>需要安装好gdb插件<br>然后, 三个配置文件：</p>\n<p>c_cpp_properties.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Linux kernel&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span>: <span class=\"string\">&quot;c11&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span>: <span class=\"string\">&quot;linux-clang-x64&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;compileCommands&quot;</span>: <span class=\"string\">&quot;$&#123;&#125;/compile_commands.json&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use IntelliSense to learn about possible attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// Hover to view descriptions of existing attributes.</span></span><br><span class=\"line\">    <span class=\"comment\">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;(gdb) Launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerServerAddress&quot;</span>:<span class=\"string\">&quot;127.0.0.1:1234&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/vmlinux&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class=\"line\">    <span class=\"comment\">// for the documentation about the tasks.json format</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ./rootfs -append \\&quot;root=/dev/ram rdinit=hello_kernel\\&quot; -smp 2 -s -S&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;clear&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;qemu&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isBackground&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatcher&quot;</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;pattern&quot;</span>: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;regexp&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;file&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;location&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;message&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;background&quot;</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">&quot;activeOnStart&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;beginsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">&quot;endsPattern&quot;</span>: <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">&quot;presentation&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;echo&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;group&quot;</span>: <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"The art of command line","date":"2022-03-28T13:57:47.000Z","_content":"\n# 命令行的艺术\n\n> fork from `https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md`\n\n[![Join the chat at https://gitter.im/jlevy/the-art-of-command-line](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jlevy/the-art-of-command-line?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n- [前言](#前言)\n- [基础](#基础)\n- [日常使用](#日常使用)\n- [文件及数据处理](#文件及数据处理)\n- [系统调试](#系统调试)\n- [单行脚本](#单行脚本)\n- [冷门但有用](#冷门但有用)\n- [仅限 OS X 系统](#仅限-os-x-系统)\n- [仅限 Windows 系统](#仅限-windows-系统)\n- [更多资源](#更多资源)\n- [免责声明](#免责声明)\n\n\n![curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '`\\w+`' | tr -d '`' | cowsay -W50](cowsay.png)\n\n熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。\n\n这篇文章是[许多作者和译者](AUTHORS.md)共同的成果。\n这里的部分内容\n[首次](http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands)\n[出现](http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix)\n于 [Quora](http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know)，\n但已经迁移到了 Github，并由众多高手做出了许多改进。\n如果你在本文中发现了错误或者存在可以改善的地方，请[**贡献你的一份力量**](/CONTRIBUTING.md)。\n\n## 前言\n\n涵盖范围：\n\n- 这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到*覆盖面广*（涉及所有重要的内容），*具体*（给出具体的最常用的例子），以及*简洁*（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。\n- 本文主要为 Linux 所写，但在[仅限 OS X 系统](#仅限-os-x-系统)章节和[仅限 Windows 系统](#仅限-windows-系统)章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。\n- 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。\n- 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。\n\n注意事项：\n\n- 为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 `apt-get`，`yum`，`dnf`，`pacman`，\n`pip` 或 `brew`（以及其它合适的包管理器）来安装依赖的程序。\n- 遇到问题的话，请尝试使用 [Explainshell](http://explainshell.com/) 去获取相关命令、参数、管道等内容的解释。\n\n\n## 基础\n\n- 学习 Bash 的基础知识。具体地，在命令行中输入 `man bash` 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你*只*学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。\n\n- 熟悉至少一个基于文本的编辑器。通常而言 Vim （`vi`） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。\n\n- 学会如何使用 `man` 命令去阅读文档。学会使用 `apropos` 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 `help` 和 `help -d` 命令获取帮助信息。你可以用 `type 命令` 来判断这个命令到底是可执行文件、shell 内置命令还是别名。\n\n- 学会使用 `>` 和 `<` 来重定向输出和输入，学会使用 `|` 来重定向管道。明白 `>` 会覆盖了输出文件而 `>>` 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\n\n- 学会使用通配符 `*` （或许再算上 `?` 和 `[`...`]`） 和引用以及引用中 `'` 和 `\"` 的区别（后文中有一些具体的例子）。\n\n- 熟悉 Bash 中的任务管理工具：`&`，**ctrl-z**，**ctrl-c**，`jobs`，`fg`，`bg`，`kill` 等。\n\n- 学会使用 `ssh` 进行远程命令行登录，最好知道如何使用 `ssh-agent`，`ssh-add` 等命令来实现基础的无密码认证登录。\n\n- 学会基本的文件管理工具：`ls` 和 `ls -l` （了解 `ls -l` 中每一列代表的意义），`less`，`head`，`tail` 和 `tail -f` （甚至 `less +F`），`ln` 和 `ln -s` （了解硬链接与软链接的区别），`chown`，`chmod`，`du` （硬盘使用情况概述：`du -hs *`）。 关于文件系统的管理，学习 `df`，`mount`，`fdisk`，`mkfs`，`lsblk`。知道 inode 是什么（与 `ls -i` 和 `df -i` 等命令相关）。\n\n- 学习基本的网络管理工具：`ip` 或 `ifconfig`，`dig`。\n\n- 学习并使用一种版本控制管理系统，例如 `git`。\n\n- 熟悉正则表达式，学会使用 `grep`／`egrep`，它们的参数中 `-i`，`-o`，`-v`，`-A`，`-B` 和 `-C` 这些是很常用并值得认真学习的。\n\n- 学会使用 `apt-get`，`yum`，`dnf` 或 `pacman` （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 `pip` 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 `pip` 来安装会很方便）。\n\n\n## 日常使用\n\n- 在 Bash 中，可以通过按 **Tab** 键实现自动补全参数，使用 **ctrl-r** 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 **ctrl-r** 会向后查找匹配项，按下 **Enter** 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。\n\n- 在 Bash 中，可以按下 **ctrl-w** 删除你键入的最后一个单词，**ctrl-u** 可以删除行内光标所在位置之前的内容，**alt-b** 和 **alt-f** 可以以单词为单位移动光标，**ctrl-a** 可以将光标移至行首，**ctrl-e** 可以将光标移至行尾，**ctrl-k** 可以删除光标至行尾的所有内容，**ctrl-l** 可以清屏。键入 `man readline` 可以查看 Bash 中的默认快捷键。内容有很多，例如 **alt-.** 循环地移向前一个参数，而 **alt-*** 可以展开通配符。\n\n\n- 你喜欢的话，可以执行 `set -o vi` 来使用 vi 风格的快捷键，而执行 `set -o emacs` 可以把它改回来。\n\n- 为了便于编辑长命令，在设置你的默认编辑器后（例如 `export EDITOR=vim`），**ctrl-x** **ctrl-e** 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 **escape-v**。\n\n- 键入 `history` 查看命令行历史记录，再用 `!n`（`n` 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 `!$`， 它用于指代上次键入的参数，而 `!!` 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 **ctrl-r** 和 **alt-.** 来实现。\n\n- `cd` 命令可以切换工作路径，输入 `cd ~` 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 `~`（例如 `~/.bashrc`）。在 `sh` 脚本里则用环境变量 `$HOME` 指代 home 目录的路径。\n\n- 回到前一个工作路径：`cd -`。\n\n- 如果你输入命令的时候中途改了主意，按下 **alt-#** 在行首添加 `#` 把它当做注释再按下回车执行（或者依次按下 **ctrl-a**， **#**， **enter**）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。\n\n- 使用 `xargs` （ 或 `parallel`）。他们非常给力。注意到你可以控制每行参数个数（`-L`）和最大并行数（`-P`）。如果你不确定它们是否会按你想的那样工作，先使用 `xargs echo` 查看一下。此外，使用 `-I{}` 会很方便。例如：\n```bash\n      find . -name '*.py' | xargs grep some_function\n      cat hosts | xargs -I{} ssh root@{} hostname\n```\n\n\n- `pstree -p` 以一种优雅的方式展示进程树。\n\n- 使用 `pgrep` 和 `pkill` 根据名字查找进程或发送信号（`-f` 参数通常有用）。\n\n- 了解你可以发往进程的信号的种类。比如，使用 `kill -STOP [pid]` 停止一个进程。使用 `man 7 signal` 查看详细列表。\n\n- 使用 `nohup` 或 `disown` 使一个后台进程持续运行。\n\n- 使用 `netstat -lntp` 或 `ss -plat` 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 `-u` 则检查 UDP 端口）或者 `lsof -iTCP -sTCP:LISTEN -P -n` (这也可以在 OS X 上运行)。\n\n- `lsof` 来查看开启的套接字和文件。\n\n- 使用 `uptime` 或 `w` 来查看系统已经运行多长时间。\n\n- 使用 `alias` 来创建常用命令的快捷形式。例如：`alias ll='ls -latr'` 创建了一个新的命令别名 `ll`。\n\n- 可以把别名、shell 选项和常用函数保存在 `~/.bashrc`，具体看下这篇[文章](http://superuser.com/a/183980/7106)。这样做的话你就可以在所有 shell 会话中使用你的设定。\n\n- 把环境变量的设定以及登陆时要执行的命令保存在 `~/.bash_profile`。而对于从图形界面启动的 shell 和 `cron` 启动的 shell，则需要单独配置文件。\n\n- 要想在几台电脑中同步你的配置文件（例如 `.bashrc` 和 `.bash_profile`），可以借助 Git。\n\n- 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 `\"$FOO\"`。尽量使用 `-0` 或 `-print0` 选项以便用 NULL 来分隔文件名，例如 `locate -0 pattern | xargs -0 ls -al` 或 `find / -print0 -type d | xargs -0 ls -al`。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 `IFS=$'\\n'` 把内部字段分隔符设为换行符。\n\n- 在 Bash 脚本中，使用 `set -x` 去调试输出（或者使用它的变体 `set -v`，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 `set -e` 令脚本在发生错误时退出而不是继续运行；使用 `set -u` 来检查是否使用了未赋值的变量；试试 `set -o pipefail`，它可以监测管道中的错误。当牵扯到很多脚本时，使用 `trap` 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：\n```bash\n      set -euo pipefail\n      trap \"echo 'error: Script failed: see failed command above'\" ERR\n```\n\n- 在 Bash 脚本中，子 shell（使用括号 `(...)`）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：\n```bash\n      # do something in current dir\n      (cd /some/other/dir && other-command)\n      # continue in original dir\n```\n\n- 在 Bash 中，变量有许多的扩展方式。`${name:?error message}` 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 `input_file=${1:?usage: $0 input_file}`。在变量为空时使用默认值：`${name:-default}`。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 `output_file=${2:-logfile}`，如果省略了 $2，它的值就为空，于是 `output_file` 就会被设为 `logfile`。数学表达式：`i=$(( (i + 1) % 5 ))`。序列：`{1..10}`。截断字符串：`${var%suffix}` 和 `${var#prefix}`。例如，假设 `var=foo.pdf`，那么 `echo ${var%.pdf}.txt` 将输出 `foo.txt`。\n\n- 使用括号扩展（`{`...`}`）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 `mv foo.{txt,pdf} some-dir`（同时移动两个文件），`cp somefile{,.bak}`（会被扩展成 `cp somefile somefile.bak`）或者 `mkdir -p test-{a,b,c}/subtest-{1,2,3}`（会被扩展成所有可能的组合，并创建一个目录树）。\n\n- 通过使用 `<(some command)` 可以将输出视为文件。例如，对比本地文件 `/etc/hosts` 和一个远程文件：\n```sh\n      diff /etc/hosts <(ssh somehost cat /etc/hosts)\n```\n\n- 编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。\n```bash\n{\n      # 在这里写代码\n}\n```\n\n- 了解 Bash 中的“here documents”，例如 `cat <<EOF ...`。\n\n- 在 Bash 中，同时重定向标准输出和标准错误：`some-command >logfile 2>&1` 或者 `some-command &>logfile`。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 `</dev/null` 是一个好习惯。\n\n- 使用 `man ascii` 查看具有十六进制和十进制值的ASCII表。`man unicode`，`man utf-8`，以及 `man latin1` 有助于你去了解通用的编码信息。\n\n- 使用 `screen` 或 [`tmux`](https://tmux.github.io/) 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 `byobu` 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 [`dtach`](https://github.com/bogner/dtach)。\n\n- ssh 中，了解如何使用 `-L` 或 `-D`（偶尔需要用 `-R`）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。\n\n- 对 ssh 设置做一些小优化可能是很有用的，例如这个 `~/.ssh/config` 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：\n```\n      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes\n```\n\n- 一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 `StrictHostKeyChecking=no`，`ForwardAgent=yes`。\n\n- 考虑使用 [`mosh`](https://mosh.mit.edu/) 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。\n\n- 获取八进制形式的文件访问权限（修改系统设置时通常需要，但 `ls` 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：\n```sh\n      stat -c '%A %a %n' /etc/timezone\n```\n\n- 使用 [`percol`](https://github.com/mooz/percol) 或者 [`fzf`](https://github.com/junegunn/fzf) 可以交互式地从另一个命令输出中选取值。\n\n- 使用 `fpp`（[PathPicker](https://github.com/facebook/PathPicker)）可以与基于另一个命令(例如 `git`）输出的文件交互。\n\n- 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\n`python -m SimpleHTTPServer 7777` （使用端口 7777 和 Python 2）或`python -m http.server 7777` （使用端口 7777 和 Python 3）。\n\n- 以其他用户的身份执行命令，使用 `sudo`。默认以 root 用户的身份执行；使用 `-u` 来指定其他用户。使用 `-i` 来以该用户登录（需要输入_你自己的_密码）。\n\n- 将 shell 切换为其他用户，使用 `su username` 或者 `sudo - username`。加入 `-` 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。\n\n- 了解命令行的 [128K 限制](https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong)。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 `find` 或 `xargs` 通常可以解决。）\n\n- 当你需要一个基本的计算器时，可以使用 `python` 解释器（当然你要用 python 的时候也是这样）。例如：\n```\n>>> 2+3\n5\n```\n\n\n## 文件及数据处理\n\n- 在当前目录下通过文件名查找一个文件，使用类似于这样的命令：`find . -iname '*something*'`。在所有路径下通过文件名查找文件，使用 `locate something` （但注意到 `updatedb` 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。\n\n- 使用 [`ag`](https://github.com/ggreer/the_silver_searcher) 在源代码或数据文件里检索（`grep -r` 同样可以做到，但相比之下 `ag` 更加先进）。\n\n- 将 HTML 转为文本：`lynx -dump -stdin`。\n\n- Markdown，HTML，以及所有文档格式之间的转换，试试 [`pandoc`](http://pandoc.org/)。\n\n- 当你要处理棘手的 XML 时候，`xmlstarlet` 算是上古时代流传下来的神器。\n\n- 使用 [`jq`](http://stedolan.github.io/jq/) 处理 JSON。\n\n- 使用 [`shyaml`](https://github.com/0k/shyaml) 处理 YAML。\n\n- 要处理 Excel 或 CSV 文件的话，[csvkit](https://github.com/onyxfish/csvkit) 提供了 `in2csv`，`csvcut`，`csvjoin`，`csvgrep` 等方便易用的工具。\n\n- 当你要处理 Amazon S3 相关的工作的时候，[`s3cmd`](https://github.com/s3tools/s3cmd) 是一个很方便的工具而 [`s4cmd`](https://github.com/bloomreach/s4cmd) 的效率更高。Amazon 官方提供的 [`aws`](https://github.com/aws/aws-cli) 以及  [`saws`](https://github.com/donnemartin/saws) 是其他 AWS 相关工作的基础，值得学习。\n\n- 了解如何使用 `sort` 和 `uniq`，包括 uniq 的 `-u` 参数和 `-d` 参数，具体内容在后文单行脚本节中。另外可以了解一下 `comm`。\n\n- 了解如何使用 `cut`，`paste` 和 `join` 来更改文件。很多人都会使用 `cut`，但遗忘了 `join`。\n\n- 了解如何运用 `wc` 去计算新行数（`-l`），字符数（`-m`），单词数（`-w`）以及字节数（`-c`）。\n\n- 了解如何使用 `tee` 将标准输入复制到文件甚至标准输出，例如 `ls -al | tee file.txt`。\n\n- 要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 [`datamash`](https://www.gnu.org/software/datamash/)。\n\n- 注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 `LANG` 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降*许多倍*。某些情况下（例如集合运算）你可以放心的使用 `export LC_ALL=C` 来忽略掉国际化并按照字节来判断顺序。\n\n- 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 `TZ=Pacific/Fiji date` 可以获取斐济的时间。\n\n- 了解如何使用 `awk` 和 `sed` 来进行简单的数据处理。 参阅 [One-liners](#one-liners) 获取示例。\n\n- 替换一个或多个文件中出现的字符串：\n```sh\n      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\n```\n\n- 使用 [`repren`](https://github.com/jlevy/repren) 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 `rename` 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）\n```sh\n      # 将文件、目录和内容全部重命名 foo -> bar:\n      repren --full --preserve-case --from foo --to bar .\n      # 还原所有备份文件 whatever.bak -> whatever:\n      repren --renames --from '(.*)\\.bak' --to '\\1' *.bak\n      # 用 rename 实现上述功能（若可用）:\n      rename 's/\\.bak$//' *.bak\n```\n\n- 根据 man 页面的描述，`rsync` 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 `rsync` 代替 `scp` 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的[最快方法](https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html)之一：\n```sh\nmkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir\n```\n\n- 若要在复制文件时获取当前进度，可使用 `pv`，[`pycp`](https://github.com/dmerejkowsky/pycp)，[`progress`](https://github.com/Xfennec/progress)，`rsync --progress`。若所执行的复制为block块拷贝，可以使用 `dd status=progress`。\n\n- 使用 `shuf` 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。\n\n- 了解 `sort` 的参数。显示数字时，使用 `-n` 或者 `-h` 来显示更易读的数（例如 `du -h` 的输出）。明白排序时关键字的工作原理（`-t` 和 `-k`）。例如，注意到你需要 `-k1，1` 来仅按第一个域来排序，而 `-k1` 意味着按整行排序。稳定排序（`sort -s`）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 `sort -k1，1 | sort -s -k2，2`。\n\n- 如果你想在 Bash 命令行中写 tab 制表符，按下 **ctrl-v** **[Tab]** 或键入 `$'\\t'` （后者可能更好，因为你可以复制粘贴它）。\n\n- 标准的源代码对比及合并工具是 `diff` 和 `patch`。使用 `diffstat` 查看变更总览数据。注意到 `diff -r` 对整个文件夹有效。使用 `diff -r tree1 tree2 | diffstat` 查看变更的统计数据。`vimdiff` 用于比对并编辑文件。\n\n- 对于二进制文件，使用 `hd`，`hexdump` 或者 `xxd` 使其以十六进制显示，使用 `bvi`，`hexedit` 或者 `biew` 来进行二进制编辑。\n\n- 同样对于二进制文件，`strings`（包括 `grep` 等工具）可以帮助在二进制文件中查找特定比特。\n\n- 制作二进制差分文件（Delta 压缩），使用 `xdelta3`。\n\n- 使用 `iconv` 更改文本编码。需要更高级的功能，可以使用 `uconv`，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：\n```sh\n      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt\n```\n\n- 拆分文件可以使用 `split`（按大小拆分）和 `csplit`（按模式拆分）。\n\n- 操作日期和时间表达式，可以用 [`dateutils`](http://www.fresse.org/dateutils/) 中的 `dateadd`、`datediff`、`strptime` 等工具。\n\n- 使用 `zless`、`zmore`、`zcat` 和 `zgrep` 对压缩过的文件进行操作。\n\n- 文件属性可以通过 `chattr` 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：`sudo chattr +i /critical/directory/or/file`\n\n- 使用 `getfacl` 和 `setfacl` 以保存和恢复文件权限。例如：\n```sh\n   getfacl -R /some/path > permissions.txt\n   setfacl --restore=permissions.txt\n```\n\n- 为了高效地创建空文件，请使用 `truncate`（创建[稀疏文件](https://zh.wikipedia.org/wiki/稀疏文件)），`fallocate`（用于 ext4，xfs，btrf 和 ocfs2 文件系统），`xfs_mkfile`（适用于几乎所有的文件系统，包含在 xfsprogs 包中），`mkfile`（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。\n\n## 系统调试\n\n- `curl` 和 `curl -I` 可以被轻松地应用于 web 调试中，它们的好兄弟 `wget` 也是如此，或者也可以试试更潮的 [`httpie`](https://github.com/jkbrzt/httpie)。\n\n- 获取 CPU 和硬盘的使用状态，通常使用使用 `top`（`htop` 更佳），`iostat` 和 `iotop`。而 `iostat -mxz 15` 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。\n\n- 使用 `netstat` 和 `ss` 查看网络连接的细节。\n\n- `dstat` 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 [`glances`](https://github.com/nicolargo/glances)，它会在一个终端窗口中向你提供一些系统级的数据。\n\n- 若要了解内存状态，运行并理解 `free` 和 `vmstat` 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。\n\n- Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 `kill -3 <pid>` 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 `jps`，`jstat`，`jstack`，`jmap` 很有用。[SJK tools](https://github.com/aragozin/jvm-tools) 更高级。\n\n- 使用 [`mtr`](http://www.bitwizard.nl/mtr/) 去跟踪路由，用于确定网络问题。\n\n- 用 [`ncdu`](https://dev.yorhel.nl/ncdu) 来查看磁盘使用情况，它比寻常的命令，如 `du -sh *`，更节省时间。\n\n- 查找正在使用带宽的套接字连接或进程，使用 [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)。\n\n- `ab` 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 `siege`。\n\n- [`wireshark`](https://wireshark.org/)，[`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html) 和 [`ngrep`](http://ngrep.sourceforge.net/) 可用于复杂的网络调试。\n\n- 了解 `strace` 和 `ltrace`。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（`-c`）和附加到一个运行的进程参数 （`-p`）。\n\n- 了解使用 `ldd` 来检查共享库。但是[永远不要在不信任的文件上运行](http://www.catonmat.net/blog/ldd-arbitrary-code-execution/)。\n\n- 了解如何运用 `gdb` 连接到一个运行着的进程并获取它的堆栈轨迹。\n\n- 学会使用 `/proc`。它在调试正在出现的问题的时候有时会效果惊人。比如：`/proc/cpuinfo`，`/proc/meminfo`，`/proc/cmdline`，`/proc/xxx/cwd`，`/proc/xxx/exe`，`/proc/xxx/fd/`，`/proc/xxx/smaps`（这里的 `xxx` 表示进程的 id 或 pid）。\n\n- 当调试一些之前出现的问题的时候，[`sar`](http://sebastien.godard.pagesperso-orange.fr/) 非常有用。它展示了 cpu、内存以及网络等的历史数据。\n\n- 关于更深层次的系统分析以及性能分析，看看 `stap`（[SystemTap](https://sourceware.org/systemtap/wiki)），[`perf`](https://en.wikipedia.org/wiki/Perf_(Linux))，以及[`sysdig`](https://github.com/draios/sysdig)。\n\n- 查看你当前使用的系统，使用 `uname`，`uname -a`（Unix／kernel 信息）或者 `lsb_release -a`（Linux 发行版信息）。\n\n- 无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 `dmesg`。\n\n- 如果你删除了一个文件，但通过 `du` 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\n`lsof | grep deleted | grep \"filename-of-my-big-file\"`\n\n\n## 单行脚本\n\n一些命令组合的例子：\n\n- 当你需要对文本文件做集合交、并、差运算时，`sort` 和 `uniq` 会是你的好帮手。具体例子请参照代码后面的，此处假设 `a` 与 `b` 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 `/tmp` 在一个小的根分区上时你可能需要 `-T` 参数，但是实际上 `sort` 并不被内存大小约束），参阅前文中关于 `LC_ALL` 和 `sort` 的 `-u` 参数的部分。\n```sh\n      sort a b | uniq > c   # c 是 a 并 b\n      sort a b | uniq -d > c   # c 是 a 交 b\n      sort a b b | uniq -u > c   # c 是 a - b\n```\n\n- 使用 `grep . *`（每行都会附上文件名）或者 `head -100 *`（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 `/sys`、`/proc`、`/etc`）时特别好用。\n\n\n- 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\n```sh\n      awk '{ x += $3 } END { print x }' myfile\n```\n\n- 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 `ls -l` 但比 `ls -lR` 更易于理解：\n```sh\n      find . -type f -ls\n```\n\n- 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 `acct_id` 参数在 URI 中。如果你想计算出每个 `acct_id` 值有多少次请求，使用如下代码：\n```sh\n      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn\n```\n\n- 要持续监测文件改动，可以使用 `watch`，例如检查某个文件夹中文件的改变，可以用 `watch -d -n 2 'ls -rtlh | tail'`；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 `watch -d -n 2 ifconfig`。\n\n- 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\n```sh\n      function taocl() {\n        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|\n          pandoc -f markdown -t html |\n          iconv -f 'utf-8' -t 'unicode' |\n          xmlstarlet fo --html --dropdtd |\n          xmlstarlet sel -t -v \"(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]\" |\n          xmlstarlet unesc | fmt -80\n      }\n```\n\n## 冷门但有用\n\n- `expr`：计算表达式或正则匹配\n\n- `m4`：简单的宏处理器\n\n- `yes`：多次打印字符串\n\n- `cal`：漂亮的日历\n\n- `env`：执行一个命令（脚本文件中很有用）\n\n- `printenv`：打印环境变量（调试时或在写脚本文件时很有用）\n\n- `look`：查找以特定字符串开头的单词或行\n\n- `cut`，`paste` 和 `join`：数据修改\n\n- `fmt`：格式化文本段落\n\n- `pr`：将文本格式化成页／列形式\n\n- `fold`：包裹文本中的几行\n\n- `column`：将文本格式化成多个对齐、定宽的列或表格\n\n- `expand` 和 `unexpand`：制表符与空格之间转换\n\n- `nl`：添加行号\n\n- `seq`：打印数字\n\n- `bc`：计算器\n\n- `factor`：分解因数\n\n- [`gpg`](https://gnupg.org/)：加密并签名文件\n\n- `toe`：terminfo 入口列表\n\n- `nc`：网络调试及数据传输\n\n- `socat`：套接字代理，与 `netcat` 类似\n\n- [`slurm`](https://github.com/mattthias/slurm)：网络流量可视化\n\n- `dd`：文件或设备间传输数据\n\n- `file`：确定文件类型\n\n- `tree`：以树的形式显示路径和文件，类似于递归的 `ls`\n\n- `stat`：文件信息\n\n- `time`：执行命令，并计算执行时间\n\n- `timeout`：在指定时长范围内执行命令，并在规定时间结束后停止进程\n\n- `lockfile`：使文件只能通过 `rm -f` 移除\n\n- `logrotate`： 切换、压缩以及发送日志文件\n\n- `watch`：重复运行同一个命令，展示结果并／或高亮有更改的部分\n\n- [`when-changed`](https://github.com/joh/when-changed)：当检测到文件更改时执行指定命令。参阅 `inotifywait` 和 `entr`。\n\n- `tac`：反向输出文件\n\n- `shuf`：文件中随机选取几行\n\n- `comm`：一行一行的比较排序过的文件\n\n- `strings`：从二进制文件中抽取文本\n\n- `tr`：转换字母\n\n- `iconv` 或 `uconv`：文本编码转换\n\n- `split` 和 `csplit`：分割文件\n\n- `sponge`：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 `grep -v something some-file | sponge some-file`\n\n- `units`：将一种计量单位转换为另一种等效的计量单位（参阅 `/usr/share/units/definitions.units`）\n\n- `apg`：随机生成密码\n\n- `xz`：高比例的文件压缩\n\n- `ldd`：动态库信息\n\n- `nm`：提取 obj 文件中的符号\n\n- `ab` 或 [`wrk`](https://github.com/wg/wrk)：web 服务器性能分析\n\n- `strace`：调试系统调用\n\n- [`mtr`](http://www.bitwizard.nl/mtr/)：更好的网络调试跟踪工具\n\n- `cssh`：可视化的并发 shell\n\n- `rsync`：通过 ssh 或本地文件系统同步文件和文件夹\n\n- [`wireshark`](https://wireshark.org/) 和 [`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html)：抓包和网络调试工具\n\n- [`ngrep`](http://ngrep.sourceforge.net/)：网络层的 grep\n\n- `host` 和 `dig`：DNS 查找\n\n- `lsof`：列出当前系统打开文件的工具以及查看端口信息\n\n- `dstat`：系统状态查看\n\n- [`glances`](https://github.com/nicolargo/glances)：高层次的多子系统总览\n\n- `iostat`：硬盘使用状态\n\n- `mpstat`： CPU 使用状态\n\n- `vmstat`： 内存使用状态\n\n- `htop`：top 的加强版\n\n- `last`：登入记录\n\n- `w`：查看处于登录状态的用户\n\n- `id`：用户/组 ID 信息\n\n- [`sar`](http://sebastien.godard.pagesperso-orange.fr/)：系统历史数据\n\n- [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)：套接字及进程的网络利用情况\n\n- `ss`：套接字数据\n\n- `dmesg`：引导及系统错误信息\n\n- `sysctl`： 在内核运行时动态地查看和修改内核的运行参数\n\n- `hdparm`：SATA/ATA 磁盘更改及性能分析\n\n- `lsblk`：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\n\n- `lshw`，`lscpu`，`lspci`，`lsusb` 和 `dmidecode`：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等\n\n- `lsmod` 和 `modinfo`：列出内核模块，并显示其细节\n\n- `fortune`，`ddate` 和 `sl`：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\n\n\n## 仅限 OS X 系统\n\n以下是*仅限于* OS X 系统的技巧。\n\n- 用 `brew` （Homebrew）或者 `port` （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\n\n- 用 `pbcopy` 复制任何命令的输出到桌面应用，用 `pbpaste` 粘贴输入。\n\n- 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 **alt-b**、**alt-f** 等命令中用到），打开 偏好设置 -> 描述文件 -> 键盘 并勾选“使用 Option 键作为 Meta 键”。\n\n- 用 `open` 或者 `open -a /Applications/Whatever.app` 使用桌面应用打开文件。\n\n- Spotlight：用 `mdfind` 搜索文件，用 `mdls` 列出元数据（例如照片的 EXIF 信息）。\n\n- 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 `ps`，`ls`，`tail`，`awk`，`sed`）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 \"BSD General Commands Manual\" 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 `gawk` 和 `gsed` 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 `perl` ）或者经过仔细的测试。\n\n- 用 `sw_vers` 获取 OS X 的版本信息。\n\n## 仅限 Windows 系统\n\n以下是*仅限于* Windows 系统的技巧。\n\n### 在 Winodws 下获取 Unix 工具\n\n- 可以安装 [Cygwin](https://cygwin.com/) 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。\n\n- 在 Windows 10 上，你可以使用 [Bash on Ubuntu on Windows](https://msdn.microsoft.com/commandline/wsl/about)，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。\n\n- 如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。\n\n- 另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 [Cash](https://github.com/dthree/cash)。注意在此环境下只有很少的 Unix 命令和命令行可用。\n\n### 实用 Windows 命令行工具\n\n- 可以使用 `wmic` 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。\n\n- Windows 实用的原生命令行网络工具包括 `ping`，`ipconfig`，`tracert`，和 `netstat`。\n\n- 可以使用 `Rundll32` 命令来实现[许多有用的 Windows 任务](http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) 。\n\n### Cygwin 技巧\n\n- 通过 Cygwin 的包管理器来安装额外的 Unix 程序。\n\n- 使用 `mintty` 作为你的命令行窗口。\n\n- 要访问 Windows 剪贴板，可以通过 `/dev/clipboard`。\n\n- 运行 `cygstart` 以通过默认程序打开一个文件。\n\n- 要访问 Windows 注册表，可以使用 `regtool`。\n\n- 注意 Windows 驱动器路径 `C:\\` 在 Cygwin 中用 `/cygdrive/c` 代表，而 Cygwin 的 `/` 代表 Windows 中的 `C:\\cygwin`。要转换 Cygwin 和 Windows 风格的路径可以用 `cygpath`。这在需要调用 Windows 程序的脚本里很有用。\n\n- 学会使用 `wmic`，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\n\n- 要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 [Cash](https://github.com/dthree/cash)。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。\n\n- 要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。\n\n## 更多资源\n\n- [awesome-shell](https://github.com/alebcay/awesome-shell)：一份精心组织的命令行工具及资源的列表。\n- [awesome-osx-command-line](https://github.com/herrbischoff/awesome-osx-command-line)：一份针对 OS X 命令行的更深入的指南。\n- [Strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)：为了编写更好的脚本文件。\n- [shellcheck](https://github.com/koalaman/shellcheck)：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。\n- [Filenames and Pathnames in Shell](http://www.dwheeler.com/essays/filenames-in-shell.html)：有关如何在 shell 脚本里正确处理文件名的细枝末节。\n- [Data Science at the Command Line](http://datascienceatthecommandline.com/#tools)：用于数据科学的一些命令和工具，摘自同名书籍。\n\n## 免责声明\n\n除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 *有能力* 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)\n\n\n## 授权条款\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)\n\n本文使用授权协议 [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/)。\n","source":"_posts/The-art-of-command-line.md","raw":"---\ntitle: The art of command line\ndate: 2022-03-28 21:57:47\ntags:\n---\n\n# 命令行的艺术\n\n> fork from `https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md`\n\n[![Join the chat at https://gitter.im/jlevy/the-art-of-command-line](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jlevy/the-art-of-command-line?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n- [前言](#前言)\n- [基础](#基础)\n- [日常使用](#日常使用)\n- [文件及数据处理](#文件及数据处理)\n- [系统调试](#系统调试)\n- [单行脚本](#单行脚本)\n- [冷门但有用](#冷门但有用)\n- [仅限 OS X 系统](#仅限-os-x-系统)\n- [仅限 Windows 系统](#仅限-windows-系统)\n- [更多资源](#更多资源)\n- [免责声明](#免责声明)\n\n\n![curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '`\\w+`' | tr -d '`' | cowsay -W50](cowsay.png)\n\n熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。\n\n这篇文章是[许多作者和译者](AUTHORS.md)共同的成果。\n这里的部分内容\n[首次](http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands)\n[出现](http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix)\n于 [Quora](http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know)，\n但已经迁移到了 Github，并由众多高手做出了许多改进。\n如果你在本文中发现了错误或者存在可以改善的地方，请[**贡献你的一份力量**](/CONTRIBUTING.md)。\n\n## 前言\n\n涵盖范围：\n\n- 这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到*覆盖面广*（涉及所有重要的内容），*具体*（给出具体的最常用的例子），以及*简洁*（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。\n- 本文主要为 Linux 所写，但在[仅限 OS X 系统](#仅限-os-x-系统)章节和[仅限 Windows 系统](#仅限-windows-系统)章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。\n- 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。\n- 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。\n\n注意事项：\n\n- 为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 `apt-get`，`yum`，`dnf`，`pacman`，\n`pip` 或 `brew`（以及其它合适的包管理器）来安装依赖的程序。\n- 遇到问题的话，请尝试使用 [Explainshell](http://explainshell.com/) 去获取相关命令、参数、管道等内容的解释。\n\n\n## 基础\n\n- 学习 Bash 的基础知识。具体地，在命令行中输入 `man bash` 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你*只*学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。\n\n- 熟悉至少一个基于文本的编辑器。通常而言 Vim （`vi`） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。\n\n- 学会如何使用 `man` 命令去阅读文档。学会使用 `apropos` 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 `help` 和 `help -d` 命令获取帮助信息。你可以用 `type 命令` 来判断这个命令到底是可执行文件、shell 内置命令还是别名。\n\n- 学会使用 `>` 和 `<` 来重定向输出和输入，学会使用 `|` 来重定向管道。明白 `>` 会覆盖了输出文件而 `>>` 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\n\n- 学会使用通配符 `*` （或许再算上 `?` 和 `[`...`]`） 和引用以及引用中 `'` 和 `\"` 的区别（后文中有一些具体的例子）。\n\n- 熟悉 Bash 中的任务管理工具：`&`，**ctrl-z**，**ctrl-c**，`jobs`，`fg`，`bg`，`kill` 等。\n\n- 学会使用 `ssh` 进行远程命令行登录，最好知道如何使用 `ssh-agent`，`ssh-add` 等命令来实现基础的无密码认证登录。\n\n- 学会基本的文件管理工具：`ls` 和 `ls -l` （了解 `ls -l` 中每一列代表的意义），`less`，`head`，`tail` 和 `tail -f` （甚至 `less +F`），`ln` 和 `ln -s` （了解硬链接与软链接的区别），`chown`，`chmod`，`du` （硬盘使用情况概述：`du -hs *`）。 关于文件系统的管理，学习 `df`，`mount`，`fdisk`，`mkfs`，`lsblk`。知道 inode 是什么（与 `ls -i` 和 `df -i` 等命令相关）。\n\n- 学习基本的网络管理工具：`ip` 或 `ifconfig`，`dig`。\n\n- 学习并使用一种版本控制管理系统，例如 `git`。\n\n- 熟悉正则表达式，学会使用 `grep`／`egrep`，它们的参数中 `-i`，`-o`，`-v`，`-A`，`-B` 和 `-C` 这些是很常用并值得认真学习的。\n\n- 学会使用 `apt-get`，`yum`，`dnf` 或 `pacman` （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 `pip` 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 `pip` 来安装会很方便）。\n\n\n## 日常使用\n\n- 在 Bash 中，可以通过按 **Tab** 键实现自动补全参数，使用 **ctrl-r** 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 **ctrl-r** 会向后查找匹配项，按下 **Enter** 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。\n\n- 在 Bash 中，可以按下 **ctrl-w** 删除你键入的最后一个单词，**ctrl-u** 可以删除行内光标所在位置之前的内容，**alt-b** 和 **alt-f** 可以以单词为单位移动光标，**ctrl-a** 可以将光标移至行首，**ctrl-e** 可以将光标移至行尾，**ctrl-k** 可以删除光标至行尾的所有内容，**ctrl-l** 可以清屏。键入 `man readline` 可以查看 Bash 中的默认快捷键。内容有很多，例如 **alt-.** 循环地移向前一个参数，而 **alt-*** 可以展开通配符。\n\n\n- 你喜欢的话，可以执行 `set -o vi` 来使用 vi 风格的快捷键，而执行 `set -o emacs` 可以把它改回来。\n\n- 为了便于编辑长命令，在设置你的默认编辑器后（例如 `export EDITOR=vim`），**ctrl-x** **ctrl-e** 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 **escape-v**。\n\n- 键入 `history` 查看命令行历史记录，再用 `!n`（`n` 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 `!$`， 它用于指代上次键入的参数，而 `!!` 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 **ctrl-r** 和 **alt-.** 来实现。\n\n- `cd` 命令可以切换工作路径，输入 `cd ~` 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 `~`（例如 `~/.bashrc`）。在 `sh` 脚本里则用环境变量 `$HOME` 指代 home 目录的路径。\n\n- 回到前一个工作路径：`cd -`。\n\n- 如果你输入命令的时候中途改了主意，按下 **alt-#** 在行首添加 `#` 把它当做注释再按下回车执行（或者依次按下 **ctrl-a**， **#**， **enter**）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。\n\n- 使用 `xargs` （ 或 `parallel`）。他们非常给力。注意到你可以控制每行参数个数（`-L`）和最大并行数（`-P`）。如果你不确定它们是否会按你想的那样工作，先使用 `xargs echo` 查看一下。此外，使用 `-I{}` 会很方便。例如：\n```bash\n      find . -name '*.py' | xargs grep some_function\n      cat hosts | xargs -I{} ssh root@{} hostname\n```\n\n\n- `pstree -p` 以一种优雅的方式展示进程树。\n\n- 使用 `pgrep` 和 `pkill` 根据名字查找进程或发送信号（`-f` 参数通常有用）。\n\n- 了解你可以发往进程的信号的种类。比如，使用 `kill -STOP [pid]` 停止一个进程。使用 `man 7 signal` 查看详细列表。\n\n- 使用 `nohup` 或 `disown` 使一个后台进程持续运行。\n\n- 使用 `netstat -lntp` 或 `ss -plat` 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 `-u` 则检查 UDP 端口）或者 `lsof -iTCP -sTCP:LISTEN -P -n` (这也可以在 OS X 上运行)。\n\n- `lsof` 来查看开启的套接字和文件。\n\n- 使用 `uptime` 或 `w` 来查看系统已经运行多长时间。\n\n- 使用 `alias` 来创建常用命令的快捷形式。例如：`alias ll='ls -latr'` 创建了一个新的命令别名 `ll`。\n\n- 可以把别名、shell 选项和常用函数保存在 `~/.bashrc`，具体看下这篇[文章](http://superuser.com/a/183980/7106)。这样做的话你就可以在所有 shell 会话中使用你的设定。\n\n- 把环境变量的设定以及登陆时要执行的命令保存在 `~/.bash_profile`。而对于从图形界面启动的 shell 和 `cron` 启动的 shell，则需要单独配置文件。\n\n- 要想在几台电脑中同步你的配置文件（例如 `.bashrc` 和 `.bash_profile`），可以借助 Git。\n\n- 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 `\"$FOO\"`。尽量使用 `-0` 或 `-print0` 选项以便用 NULL 来分隔文件名，例如 `locate -0 pattern | xargs -0 ls -al` 或 `find / -print0 -type d | xargs -0 ls -al`。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 `IFS=$'\\n'` 把内部字段分隔符设为换行符。\n\n- 在 Bash 脚本中，使用 `set -x` 去调试输出（或者使用它的变体 `set -v`，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 `set -e` 令脚本在发生错误时退出而不是继续运行；使用 `set -u` 来检查是否使用了未赋值的变量；试试 `set -o pipefail`，它可以监测管道中的错误。当牵扯到很多脚本时，使用 `trap` 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：\n```bash\n      set -euo pipefail\n      trap \"echo 'error: Script failed: see failed command above'\" ERR\n```\n\n- 在 Bash 脚本中，子 shell（使用括号 `(...)`）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：\n```bash\n      # do something in current dir\n      (cd /some/other/dir && other-command)\n      # continue in original dir\n```\n\n- 在 Bash 中，变量有许多的扩展方式。`${name:?error message}` 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 `input_file=${1:?usage: $0 input_file}`。在变量为空时使用默认值：`${name:-default}`。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 `output_file=${2:-logfile}`，如果省略了 $2，它的值就为空，于是 `output_file` 就会被设为 `logfile`。数学表达式：`i=$(( (i + 1) % 5 ))`。序列：`{1..10}`。截断字符串：`${var%suffix}` 和 `${var#prefix}`。例如，假设 `var=foo.pdf`，那么 `echo ${var%.pdf}.txt` 将输出 `foo.txt`。\n\n- 使用括号扩展（`{`...`}`）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 `mv foo.{txt,pdf} some-dir`（同时移动两个文件），`cp somefile{,.bak}`（会被扩展成 `cp somefile somefile.bak`）或者 `mkdir -p test-{a,b,c}/subtest-{1,2,3}`（会被扩展成所有可能的组合，并创建一个目录树）。\n\n- 通过使用 `<(some command)` 可以将输出视为文件。例如，对比本地文件 `/etc/hosts` 和一个远程文件：\n```sh\n      diff /etc/hosts <(ssh somehost cat /etc/hosts)\n```\n\n- 编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。\n```bash\n{\n      # 在这里写代码\n}\n```\n\n- 了解 Bash 中的“here documents”，例如 `cat <<EOF ...`。\n\n- 在 Bash 中，同时重定向标准输出和标准错误：`some-command >logfile 2>&1` 或者 `some-command &>logfile`。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 `</dev/null` 是一个好习惯。\n\n- 使用 `man ascii` 查看具有十六进制和十进制值的ASCII表。`man unicode`，`man utf-8`，以及 `man latin1` 有助于你去了解通用的编码信息。\n\n- 使用 `screen` 或 [`tmux`](https://tmux.github.io/) 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 `byobu` 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 [`dtach`](https://github.com/bogner/dtach)。\n\n- ssh 中，了解如何使用 `-L` 或 `-D`（偶尔需要用 `-R`）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。\n\n- 对 ssh 设置做一些小优化可能是很有用的，例如这个 `~/.ssh/config` 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：\n```\n      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes\n```\n\n- 一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 `StrictHostKeyChecking=no`，`ForwardAgent=yes`。\n\n- 考虑使用 [`mosh`](https://mosh.mit.edu/) 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。\n\n- 获取八进制形式的文件访问权限（修改系统设置时通常需要，但 `ls` 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：\n```sh\n      stat -c '%A %a %n' /etc/timezone\n```\n\n- 使用 [`percol`](https://github.com/mooz/percol) 或者 [`fzf`](https://github.com/junegunn/fzf) 可以交互式地从另一个命令输出中选取值。\n\n- 使用 `fpp`（[PathPicker](https://github.com/facebook/PathPicker)）可以与基于另一个命令(例如 `git`）输出的文件交互。\n\n- 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\n`python -m SimpleHTTPServer 7777` （使用端口 7777 和 Python 2）或`python -m http.server 7777` （使用端口 7777 和 Python 3）。\n\n- 以其他用户的身份执行命令，使用 `sudo`。默认以 root 用户的身份执行；使用 `-u` 来指定其他用户。使用 `-i` 来以该用户登录（需要输入_你自己的_密码）。\n\n- 将 shell 切换为其他用户，使用 `su username` 或者 `sudo - username`。加入 `-` 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。\n\n- 了解命令行的 [128K 限制](https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong)。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 `find` 或 `xargs` 通常可以解决。）\n\n- 当你需要一个基本的计算器时，可以使用 `python` 解释器（当然你要用 python 的时候也是这样）。例如：\n```\n>>> 2+3\n5\n```\n\n\n## 文件及数据处理\n\n- 在当前目录下通过文件名查找一个文件，使用类似于这样的命令：`find . -iname '*something*'`。在所有路径下通过文件名查找文件，使用 `locate something` （但注意到 `updatedb` 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。\n\n- 使用 [`ag`](https://github.com/ggreer/the_silver_searcher) 在源代码或数据文件里检索（`grep -r` 同样可以做到，但相比之下 `ag` 更加先进）。\n\n- 将 HTML 转为文本：`lynx -dump -stdin`。\n\n- Markdown，HTML，以及所有文档格式之间的转换，试试 [`pandoc`](http://pandoc.org/)。\n\n- 当你要处理棘手的 XML 时候，`xmlstarlet` 算是上古时代流传下来的神器。\n\n- 使用 [`jq`](http://stedolan.github.io/jq/) 处理 JSON。\n\n- 使用 [`shyaml`](https://github.com/0k/shyaml) 处理 YAML。\n\n- 要处理 Excel 或 CSV 文件的话，[csvkit](https://github.com/onyxfish/csvkit) 提供了 `in2csv`，`csvcut`，`csvjoin`，`csvgrep` 等方便易用的工具。\n\n- 当你要处理 Amazon S3 相关的工作的时候，[`s3cmd`](https://github.com/s3tools/s3cmd) 是一个很方便的工具而 [`s4cmd`](https://github.com/bloomreach/s4cmd) 的效率更高。Amazon 官方提供的 [`aws`](https://github.com/aws/aws-cli) 以及  [`saws`](https://github.com/donnemartin/saws) 是其他 AWS 相关工作的基础，值得学习。\n\n- 了解如何使用 `sort` 和 `uniq`，包括 uniq 的 `-u` 参数和 `-d` 参数，具体内容在后文单行脚本节中。另外可以了解一下 `comm`。\n\n- 了解如何使用 `cut`，`paste` 和 `join` 来更改文件。很多人都会使用 `cut`，但遗忘了 `join`。\n\n- 了解如何运用 `wc` 去计算新行数（`-l`），字符数（`-m`），单词数（`-w`）以及字节数（`-c`）。\n\n- 了解如何使用 `tee` 将标准输入复制到文件甚至标准输出，例如 `ls -al | tee file.txt`。\n\n- 要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 [`datamash`](https://www.gnu.org/software/datamash/)。\n\n- 注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 `LANG` 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降*许多倍*。某些情况下（例如集合运算）你可以放心的使用 `export LC_ALL=C` 来忽略掉国际化并按照字节来判断顺序。\n\n- 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 `TZ=Pacific/Fiji date` 可以获取斐济的时间。\n\n- 了解如何使用 `awk` 和 `sed` 来进行简单的数据处理。 参阅 [One-liners](#one-liners) 获取示例。\n\n- 替换一个或多个文件中出现的字符串：\n```sh\n      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\n```\n\n- 使用 [`repren`](https://github.com/jlevy/repren) 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 `rename` 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）\n```sh\n      # 将文件、目录和内容全部重命名 foo -> bar:\n      repren --full --preserve-case --from foo --to bar .\n      # 还原所有备份文件 whatever.bak -> whatever:\n      repren --renames --from '(.*)\\.bak' --to '\\1' *.bak\n      # 用 rename 实现上述功能（若可用）:\n      rename 's/\\.bak$//' *.bak\n```\n\n- 根据 man 页面的描述，`rsync` 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 `rsync` 代替 `scp` 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的[最快方法](https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html)之一：\n```sh\nmkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir\n```\n\n- 若要在复制文件时获取当前进度，可使用 `pv`，[`pycp`](https://github.com/dmerejkowsky/pycp)，[`progress`](https://github.com/Xfennec/progress)，`rsync --progress`。若所执行的复制为block块拷贝，可以使用 `dd status=progress`。\n\n- 使用 `shuf` 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。\n\n- 了解 `sort` 的参数。显示数字时，使用 `-n` 或者 `-h` 来显示更易读的数（例如 `du -h` 的输出）。明白排序时关键字的工作原理（`-t` 和 `-k`）。例如，注意到你需要 `-k1，1` 来仅按第一个域来排序，而 `-k1` 意味着按整行排序。稳定排序（`sort -s`）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 `sort -k1，1 | sort -s -k2，2`。\n\n- 如果你想在 Bash 命令行中写 tab 制表符，按下 **ctrl-v** **[Tab]** 或键入 `$'\\t'` （后者可能更好，因为你可以复制粘贴它）。\n\n- 标准的源代码对比及合并工具是 `diff` 和 `patch`。使用 `diffstat` 查看变更总览数据。注意到 `diff -r` 对整个文件夹有效。使用 `diff -r tree1 tree2 | diffstat` 查看变更的统计数据。`vimdiff` 用于比对并编辑文件。\n\n- 对于二进制文件，使用 `hd`，`hexdump` 或者 `xxd` 使其以十六进制显示，使用 `bvi`，`hexedit` 或者 `biew` 来进行二进制编辑。\n\n- 同样对于二进制文件，`strings`（包括 `grep` 等工具）可以帮助在二进制文件中查找特定比特。\n\n- 制作二进制差分文件（Delta 压缩），使用 `xdelta3`。\n\n- 使用 `iconv` 更改文本编码。需要更高级的功能，可以使用 `uconv`，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：\n```sh\n      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt\n```\n\n- 拆分文件可以使用 `split`（按大小拆分）和 `csplit`（按模式拆分）。\n\n- 操作日期和时间表达式，可以用 [`dateutils`](http://www.fresse.org/dateutils/) 中的 `dateadd`、`datediff`、`strptime` 等工具。\n\n- 使用 `zless`、`zmore`、`zcat` 和 `zgrep` 对压缩过的文件进行操作。\n\n- 文件属性可以通过 `chattr` 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：`sudo chattr +i /critical/directory/or/file`\n\n- 使用 `getfacl` 和 `setfacl` 以保存和恢复文件权限。例如：\n```sh\n   getfacl -R /some/path > permissions.txt\n   setfacl --restore=permissions.txt\n```\n\n- 为了高效地创建空文件，请使用 `truncate`（创建[稀疏文件](https://zh.wikipedia.org/wiki/稀疏文件)），`fallocate`（用于 ext4，xfs，btrf 和 ocfs2 文件系统），`xfs_mkfile`（适用于几乎所有的文件系统，包含在 xfsprogs 包中），`mkfile`（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。\n\n## 系统调试\n\n- `curl` 和 `curl -I` 可以被轻松地应用于 web 调试中，它们的好兄弟 `wget` 也是如此，或者也可以试试更潮的 [`httpie`](https://github.com/jkbrzt/httpie)。\n\n- 获取 CPU 和硬盘的使用状态，通常使用使用 `top`（`htop` 更佳），`iostat` 和 `iotop`。而 `iostat -mxz 15` 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。\n\n- 使用 `netstat` 和 `ss` 查看网络连接的细节。\n\n- `dstat` 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 [`glances`](https://github.com/nicolargo/glances)，它会在一个终端窗口中向你提供一些系统级的数据。\n\n- 若要了解内存状态，运行并理解 `free` 和 `vmstat` 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。\n\n- Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 `kill -3 <pid>` 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 `jps`，`jstat`，`jstack`，`jmap` 很有用。[SJK tools](https://github.com/aragozin/jvm-tools) 更高级。\n\n- 使用 [`mtr`](http://www.bitwizard.nl/mtr/) 去跟踪路由，用于确定网络问题。\n\n- 用 [`ncdu`](https://dev.yorhel.nl/ncdu) 来查看磁盘使用情况，它比寻常的命令，如 `du -sh *`，更节省时间。\n\n- 查找正在使用带宽的套接字连接或进程，使用 [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)。\n\n- `ab` 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 `siege`。\n\n- [`wireshark`](https://wireshark.org/)，[`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html) 和 [`ngrep`](http://ngrep.sourceforge.net/) 可用于复杂的网络调试。\n\n- 了解 `strace` 和 `ltrace`。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（`-c`）和附加到一个运行的进程参数 （`-p`）。\n\n- 了解使用 `ldd` 来检查共享库。但是[永远不要在不信任的文件上运行](http://www.catonmat.net/blog/ldd-arbitrary-code-execution/)。\n\n- 了解如何运用 `gdb` 连接到一个运行着的进程并获取它的堆栈轨迹。\n\n- 学会使用 `/proc`。它在调试正在出现的问题的时候有时会效果惊人。比如：`/proc/cpuinfo`，`/proc/meminfo`，`/proc/cmdline`，`/proc/xxx/cwd`，`/proc/xxx/exe`，`/proc/xxx/fd/`，`/proc/xxx/smaps`（这里的 `xxx` 表示进程的 id 或 pid）。\n\n- 当调试一些之前出现的问题的时候，[`sar`](http://sebastien.godard.pagesperso-orange.fr/) 非常有用。它展示了 cpu、内存以及网络等的历史数据。\n\n- 关于更深层次的系统分析以及性能分析，看看 `stap`（[SystemTap](https://sourceware.org/systemtap/wiki)），[`perf`](https://en.wikipedia.org/wiki/Perf_(Linux))，以及[`sysdig`](https://github.com/draios/sysdig)。\n\n- 查看你当前使用的系统，使用 `uname`，`uname -a`（Unix／kernel 信息）或者 `lsb_release -a`（Linux 发行版信息）。\n\n- 无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 `dmesg`。\n\n- 如果你删除了一个文件，但通过 `du` 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\n`lsof | grep deleted | grep \"filename-of-my-big-file\"`\n\n\n## 单行脚本\n\n一些命令组合的例子：\n\n- 当你需要对文本文件做集合交、并、差运算时，`sort` 和 `uniq` 会是你的好帮手。具体例子请参照代码后面的，此处假设 `a` 与 `b` 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 `/tmp` 在一个小的根分区上时你可能需要 `-T` 参数，但是实际上 `sort` 并不被内存大小约束），参阅前文中关于 `LC_ALL` 和 `sort` 的 `-u` 参数的部分。\n```sh\n      sort a b | uniq > c   # c 是 a 并 b\n      sort a b | uniq -d > c   # c 是 a 交 b\n      sort a b b | uniq -u > c   # c 是 a - b\n```\n\n- 使用 `grep . *`（每行都会附上文件名）或者 `head -100 *`（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 `/sys`、`/proc`、`/etc`）时特别好用。\n\n\n- 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\n```sh\n      awk '{ x += $3 } END { print x }' myfile\n```\n\n- 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 `ls -l` 但比 `ls -lR` 更易于理解：\n```sh\n      find . -type f -ls\n```\n\n- 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 `acct_id` 参数在 URI 中。如果你想计算出每个 `acct_id` 值有多少次请求，使用如下代码：\n```sh\n      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn\n```\n\n- 要持续监测文件改动，可以使用 `watch`，例如检查某个文件夹中文件的改变，可以用 `watch -d -n 2 'ls -rtlh | tail'`；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 `watch -d -n 2 ifconfig`。\n\n- 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\n```sh\n      function taocl() {\n        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|\n          pandoc -f markdown -t html |\n          iconv -f 'utf-8' -t 'unicode' |\n          xmlstarlet fo --html --dropdtd |\n          xmlstarlet sel -t -v \"(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]\" |\n          xmlstarlet unesc | fmt -80\n      }\n```\n\n## 冷门但有用\n\n- `expr`：计算表达式或正则匹配\n\n- `m4`：简单的宏处理器\n\n- `yes`：多次打印字符串\n\n- `cal`：漂亮的日历\n\n- `env`：执行一个命令（脚本文件中很有用）\n\n- `printenv`：打印环境变量（调试时或在写脚本文件时很有用）\n\n- `look`：查找以特定字符串开头的单词或行\n\n- `cut`，`paste` 和 `join`：数据修改\n\n- `fmt`：格式化文本段落\n\n- `pr`：将文本格式化成页／列形式\n\n- `fold`：包裹文本中的几行\n\n- `column`：将文本格式化成多个对齐、定宽的列或表格\n\n- `expand` 和 `unexpand`：制表符与空格之间转换\n\n- `nl`：添加行号\n\n- `seq`：打印数字\n\n- `bc`：计算器\n\n- `factor`：分解因数\n\n- [`gpg`](https://gnupg.org/)：加密并签名文件\n\n- `toe`：terminfo 入口列表\n\n- `nc`：网络调试及数据传输\n\n- `socat`：套接字代理，与 `netcat` 类似\n\n- [`slurm`](https://github.com/mattthias/slurm)：网络流量可视化\n\n- `dd`：文件或设备间传输数据\n\n- `file`：确定文件类型\n\n- `tree`：以树的形式显示路径和文件，类似于递归的 `ls`\n\n- `stat`：文件信息\n\n- `time`：执行命令，并计算执行时间\n\n- `timeout`：在指定时长范围内执行命令，并在规定时间结束后停止进程\n\n- `lockfile`：使文件只能通过 `rm -f` 移除\n\n- `logrotate`： 切换、压缩以及发送日志文件\n\n- `watch`：重复运行同一个命令，展示结果并／或高亮有更改的部分\n\n- [`when-changed`](https://github.com/joh/when-changed)：当检测到文件更改时执行指定命令。参阅 `inotifywait` 和 `entr`。\n\n- `tac`：反向输出文件\n\n- `shuf`：文件中随机选取几行\n\n- `comm`：一行一行的比较排序过的文件\n\n- `strings`：从二进制文件中抽取文本\n\n- `tr`：转换字母\n\n- `iconv` 或 `uconv`：文本编码转换\n\n- `split` 和 `csplit`：分割文件\n\n- `sponge`：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 `grep -v something some-file | sponge some-file`\n\n- `units`：将一种计量单位转换为另一种等效的计量单位（参阅 `/usr/share/units/definitions.units`）\n\n- `apg`：随机生成密码\n\n- `xz`：高比例的文件压缩\n\n- `ldd`：动态库信息\n\n- `nm`：提取 obj 文件中的符号\n\n- `ab` 或 [`wrk`](https://github.com/wg/wrk)：web 服务器性能分析\n\n- `strace`：调试系统调用\n\n- [`mtr`](http://www.bitwizard.nl/mtr/)：更好的网络调试跟踪工具\n\n- `cssh`：可视化的并发 shell\n\n- `rsync`：通过 ssh 或本地文件系统同步文件和文件夹\n\n- [`wireshark`](https://wireshark.org/) 和 [`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html)：抓包和网络调试工具\n\n- [`ngrep`](http://ngrep.sourceforge.net/)：网络层的 grep\n\n- `host` 和 `dig`：DNS 查找\n\n- `lsof`：列出当前系统打开文件的工具以及查看端口信息\n\n- `dstat`：系统状态查看\n\n- [`glances`](https://github.com/nicolargo/glances)：高层次的多子系统总览\n\n- `iostat`：硬盘使用状态\n\n- `mpstat`： CPU 使用状态\n\n- `vmstat`： 内存使用状态\n\n- `htop`：top 的加强版\n\n- `last`：登入记录\n\n- `w`：查看处于登录状态的用户\n\n- `id`：用户/组 ID 信息\n\n- [`sar`](http://sebastien.godard.pagesperso-orange.fr/)：系统历史数据\n\n- [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)：套接字及进程的网络利用情况\n\n- `ss`：套接字数据\n\n- `dmesg`：引导及系统错误信息\n\n- `sysctl`： 在内核运行时动态地查看和修改内核的运行参数\n\n- `hdparm`：SATA/ATA 磁盘更改及性能分析\n\n- `lsblk`：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\n\n- `lshw`，`lscpu`，`lspci`，`lsusb` 和 `dmidecode`：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等\n\n- `lsmod` 和 `modinfo`：列出内核模块，并显示其细节\n\n- `fortune`，`ddate` 和 `sl`：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\n\n\n## 仅限 OS X 系统\n\n以下是*仅限于* OS X 系统的技巧。\n\n- 用 `brew` （Homebrew）或者 `port` （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\n\n- 用 `pbcopy` 复制任何命令的输出到桌面应用，用 `pbpaste` 粘贴输入。\n\n- 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 **alt-b**、**alt-f** 等命令中用到），打开 偏好设置 -> 描述文件 -> 键盘 并勾选“使用 Option 键作为 Meta 键”。\n\n- 用 `open` 或者 `open -a /Applications/Whatever.app` 使用桌面应用打开文件。\n\n- Spotlight：用 `mdfind` 搜索文件，用 `mdls` 列出元数据（例如照片的 EXIF 信息）。\n\n- 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 `ps`，`ls`，`tail`，`awk`，`sed`）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 \"BSD General Commands Manual\" 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 `gawk` 和 `gsed` 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 `perl` ）或者经过仔细的测试。\n\n- 用 `sw_vers` 获取 OS X 的版本信息。\n\n## 仅限 Windows 系统\n\n以下是*仅限于* Windows 系统的技巧。\n\n### 在 Winodws 下获取 Unix 工具\n\n- 可以安装 [Cygwin](https://cygwin.com/) 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。\n\n- 在 Windows 10 上，你可以使用 [Bash on Ubuntu on Windows](https://msdn.microsoft.com/commandline/wsl/about)，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。\n\n- 如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。\n\n- 另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 [Cash](https://github.com/dthree/cash)。注意在此环境下只有很少的 Unix 命令和命令行可用。\n\n### 实用 Windows 命令行工具\n\n- 可以使用 `wmic` 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。\n\n- Windows 实用的原生命令行网络工具包括 `ping`，`ipconfig`，`tracert`，和 `netstat`。\n\n- 可以使用 `Rundll32` 命令来实现[许多有用的 Windows 任务](http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) 。\n\n### Cygwin 技巧\n\n- 通过 Cygwin 的包管理器来安装额外的 Unix 程序。\n\n- 使用 `mintty` 作为你的命令行窗口。\n\n- 要访问 Windows 剪贴板，可以通过 `/dev/clipboard`。\n\n- 运行 `cygstart` 以通过默认程序打开一个文件。\n\n- 要访问 Windows 注册表，可以使用 `regtool`。\n\n- 注意 Windows 驱动器路径 `C:\\` 在 Cygwin 中用 `/cygdrive/c` 代表，而 Cygwin 的 `/` 代表 Windows 中的 `C:\\cygwin`。要转换 Cygwin 和 Windows 风格的路径可以用 `cygpath`。这在需要调用 Windows 程序的脚本里很有用。\n\n- 学会使用 `wmic`，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\n\n- 要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 [Cash](https://github.com/dthree/cash)。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。\n\n- 要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。\n\n## 更多资源\n\n- [awesome-shell](https://github.com/alebcay/awesome-shell)：一份精心组织的命令行工具及资源的列表。\n- [awesome-osx-command-line](https://github.com/herrbischoff/awesome-osx-command-line)：一份针对 OS X 命令行的更深入的指南。\n- [Strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)：为了编写更好的脚本文件。\n- [shellcheck](https://github.com/koalaman/shellcheck)：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。\n- [Filenames and Pathnames in Shell](http://www.dwheeler.com/essays/filenames-in-shell.html)：有关如何在 shell 脚本里正确处理文件名的细枝末节。\n- [Data Science at the Command Line](http://datascienceatthecommandline.com/#tools)：用于数据科学的一些命令和工具，摘自同名书籍。\n\n## 免责声明\n\n除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 *有能力* 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)\n\n\n## 授权条款\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)\n\n本文使用授权协议 [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/)。\n","slug":"The-art-of-command-line","published":1,"updated":"2022-03-28T13:58:53.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfj0003079ygkn930lj","content":"<h1 id=\"命令行的艺术\"><a href=\"#命令行的艺术\" class=\"headerlink\" title=\"命令行的艺术\"></a>命令行的艺术</h1><blockquote>\n<p>fork from <code>https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md</code></p>\n</blockquote>\n<p><a href=\"https://gitter.im/jlevy/the-art-of-command-line?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Join the chat at https://gitter.im/jlevy/the-art-of-command-line\"></a></p>\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80\">基础</a></li>\n<li><a href=\"#%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8\">日常使用</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\">文件及数据处理</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95\">系统调试</a></li>\n<li><a href=\"#%E5%8D%95%E8%A1%8C%E8%84%9A%E6%9C%AC\">单行脚本</a></li>\n<li><a href=\"#%E5%86%B7%E9%97%A8%E4%BD%86%E6%9C%89%E7%94%A8\">冷门但有用</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E8%B5%84%E6%BA%90\">更多资源</a></li>\n<li><a href=\"#%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E\">免责声明</a></li>\n</ul>\n<p>![curl -s ‘<a href=\"https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md&#39;\">https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md&#39;</a> | egrep -o ‘<code>\\w+</code>‘ | tr -d ‘`’ | cowsay -W50](cowsay.png)</p>\n<p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。</p>\n<p>这篇文章是<a href=\"AUTHORS.md\">许多作者和译者</a>共同的成果。<br>这里的部分内容<br><a href=\"http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands\">首次</a><br><a href=\"http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix\">出现</a><br>于 <a href=\"http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know\">Quora</a>，<br>但已经迁移到了 Github，并由众多高手做出了许多改进。<br>如果你在本文中发现了错误或者存在可以改善的地方，请<a href=\"/CONTRIBUTING.md\"><strong>贡献你的一份力量</strong></a>。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涵盖范围：</p>\n<ul>\n<li>这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到<em>覆盖面广</em>（涉及所有重要的内容），<em>具体</em>（给出具体的最常用的例子），以及<em>简洁</em>（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。</li>\n<li>本文主要为 Linux 所写，但在<a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a>章节和<a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a>章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。</li>\n<li>本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。</li>\n<li>除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code>，<code>pacman</code>，<br><code>pip</code> 或 <code>brew</code>（以及其它合适的包管理器）来安装依赖的程序。</li>\n<li>遇到问题的话，请尝试使用 <a href=\"http://explainshell.com/\">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>学习 Bash 的基础知识。具体地，在命令行中输入 <code>man bash</code> 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你<em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。</p>\n</li>\n<li><p>熟悉至少一个基于文本的编辑器。通常而言 Vim （<code>vi</code>） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</p>\n</li>\n<li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断这个命令到底是可执行文件、shell 内置命令还是别名。</p>\n</li>\n<li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p>\n</li>\n<li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别（后文中有一些具体的例子）。</p>\n</li>\n<li><p>熟悉 Bash 中的任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p>\n</li>\n<li><p>学会使用 <code>ssh</code> 进行远程命令行登录，最好知道如何使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基础的无密码认证登录。</p>\n</li>\n<li><p>学会基本的文件管理工具：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p>\n</li>\n<li><p>学习基本的网络管理工具：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p>\n</li>\n<li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p>\n</li>\n<li><p>熟悉正则表达式，学会使用 <code>grep</code>／<code>egrep</code>，它们的参数中 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code> 这些是很常用并值得认真学习的。</p>\n</li>\n<li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p>\n</li>\n</ul>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ul>\n<li><p>在 Bash 中，可以通过按 <strong>Tab</strong> 键实现自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 <strong>ctrl-r</strong> 会向后查找匹配项，按下 <strong>Enter</strong> 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。</p>\n</li>\n<li><p>在 Bash 中，可以按下 <strong>ctrl-w</strong> 删除你键入的最后一个单词，<strong>ctrl-u</strong> 可以删除行内光标所在位置之前的内容，<strong>alt-b</strong> 和 <strong>alt-f</strong> 可以以单词为单位移动光标，<strong>ctrl-a</strong> 可以将光标移至行首，<strong>ctrl-e</strong> 可以将光标移至行尾，<strong>ctrl-k</strong> 可以删除光标至行尾的所有内容，<strong>ctrl-l</strong> 可以清屏。键入 <code>man readline</code> 可以查看 Bash 中的默认快捷键。内容有很多，例如 <strong>alt-.</strong> 循环地移向前一个参数，而 <strong>alt-</strong>* 可以展开通配符。</p>\n</li>\n</ul>\n<ul>\n<li><p>你喜欢的话，可以执行 <code>set -o vi</code> 来使用 vi 风格的快捷键，而执行 <code>set -o emacs</code> 可以把它改回来。</p>\n</li>\n<li><p>为了便于编辑长命令，在设置你的默认编辑器后（例如 <code>export EDITOR=vim</code>），<strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 <strong>escape-v</strong>。</p>\n</li>\n<li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 <code>!$</code>， 它用于指代上次键入的参数，而 <code>!!</code> 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 来实现。</p>\n</li>\n<li><p><code>cd</code> 命令可以切换工作路径，输入 <code>cd ~</code> 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 <code>~</code>（例如 <code>~/.bashrc</code>）。在 <code>sh</code> 脚本里则用环境变量 <code>$HOME</code> 指代 home 目录的路径。</p>\n</li>\n<li><p>回到前一个工作路径：<code>cd -</code>。</p>\n</li>\n<li><p>如果你输入命令的时候中途改了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code> 把它当做注释再按下回车执行（或者依次按下 <strong>ctrl-a</strong>， **#**， <strong>enter</strong>）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。</p>\n</li>\n<li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I&#123;&#125;</code> 会很方便。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">&#x27;*.py&#x27;</span> | xargs grep some_function</span><br><span class=\"line\">cat hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p><code>pstree -p</code> 以一种优雅的方式展示进程树。</p>\n</li>\n<li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p>\n</li>\n<li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p>\n</li>\n<li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p>\n</li>\n<li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 <code>-u</code> 则检查 UDP 端口）或者 <code>lsof -iTCP -sTCP:LISTEN -P -n</code> (这也可以在 OS X 上运行)。</p>\n</li>\n<li><p><code>lsof</code> 来查看开启的套接字和文件。</p>\n</li>\n<li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p>\n</li>\n<li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p>\n</li>\n<li><p>可以把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code>，具体看下这篇<a href=\"http://superuser.com/a/183980/7106\">文章</a>。这样做的话你就可以在所有 shell 会话中使用你的设定。</p>\n</li>\n<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>~/.bash_profile</code>。而对于从图形界面启动的 shell 和 <code>cron</code> 启动的 shell，则需要单独配置文件。</p>\n</li>\n<li><p>要想在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以借助 Git。</p>\n</li>\n<li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;$FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用 NULL 来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 <code>IFS=$&#39;\\n&#39;</code> 把内部字段分隔符设为换行符。</p>\n</li>\n<li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出（或者使用它的变体 <code>set -v</code>，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行；使用 <code>set -u</code> 来检查是否使用了未赋值的变量；试试 <code>set -o pipefail</code>，它可以监测管道中的错误。当牵扯到很多脚本时，使用 <code>trap</code> 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -euo pipefail</span><br><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;echo &#x27;error: Script failed: see failed command above&#x27;&quot;</span> ERR</span><br></pre></td></tr></table></figure></li>\n<li><p>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># do something in current dir</span></span><br><span class=\"line\">(<span class=\"built_in\">cd</span> /some/other/dir &amp;&amp; other-command)</span><br><span class=\"line\"><span class=\"comment\"># continue in original dir</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 Bash 中，变量有许多的扩展方式。<code>$&#123;name:?error message&#125;</code> 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 <code>input_file=$&#123;1:?usage: $0 input_file&#125;</code>。在变量为空时使用默认值：<code>$&#123;name:-default&#125;</code>。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 <code>output_file=$&#123;2:-logfile&#125;</code>，如果省略了 $2，它的值就为空，于是 <code>output_file</code> 就会被设为 <code>logfile</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>&#123;1..10&#125;</code>。截断字符串：<code>$&#123;var%suffix&#125;</code> 和 <code>$&#123;var#prefix&#125;</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo $&#123;var%.pdf&#125;.txt</code> 将输出 <code>foo.txt</code>。</p>\n</li>\n<li><p>使用括号扩展（<code>&#123;</code>…<code>&#125;</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.&#123;txt,pdf&#125; some-dir</code>（同时移动两个文件），<code>cp somefile&#123;,.bak&#125;</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-&#123;a,b,c&#125;/subtest-&#123;1,2,3&#125;</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p>\n</li>\n<li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)</span><br></pre></td></tr></table></figure></li>\n<li><p>编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 在这里写代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p>\n</li>\n<li><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p>\n</li>\n<li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p>\n</li>\n<li><p>使用 <code>screen</code> 或 <a href=\"https://tmux.github.io/\"><code>tmux</code></a> 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 <code>byobu</code> 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 <a href=\"https://github.com/bogner/dtach\"><code>dtach</code></a>。</p>\n</li>\n<li><p>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。</p>\n</li>\n<li><p>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCPKeepAlive=yes</span><br><span class=\"line\">ServerAliveInterval=15</span><br><span class=\"line\">ServerAliveCountMax=6</span><br><span class=\"line\">Compression=yes</span><br><span class=\"line\">ControlMaster auto</span><br><span class=\"line\">ControlPath /tmp/%r@%h:%p</span><br><span class=\"line\">ControlPersist yes</span><br></pre></td></tr></table></figure></li>\n<li><p>一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 <code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code>。</p>\n</li>\n<li><p>考虑使用 <a href=\"https://mosh.mit.edu/\"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。</p>\n</li>\n<li><p>获取八进制形式的文件访问权限（修改系统设置时通常需要，但 <code>ls</code> 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%A %a %n&#x27;</span> /etc/timezone</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <a href=\"https://github.com/mooz/percol\"><code>percol</code></a> 或者 <a href=\"https://github.com/junegunn/fzf\"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</p>\n</li>\n<li><p>使用 <code>fpp</code>（<a href=\"https://github.com/facebook/PathPicker\">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</p>\n</li>\n<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p>\n</li>\n<li><p>以其他用户的身份执行命令，使用 <code>sudo</code>。默认以 root 用户的身份执行；使用 <code>-u</code> 来指定其他用户。使用 <code>-i</code> 来以该用户登录（需要输入_你自己的_密码）。</p>\n</li>\n<li><p>将 shell 切换为其他用户，使用 <code>su username</code> 或者 <code>sudo - username</code>。加入 <code>-</code> 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。</p>\n</li>\n<li><p>了解命令行的 <a href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\">128K 限制</a>。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 <code>find</code> 或 <code>xargs</code> 通常可以解决。）</p>\n</li>\n<li><p>当你需要一个基本的计算器时，可以使用 <code>python</code> 解释器（当然你要用 python 的时候也是这样）。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 2+3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"文件及数据处理\"><a href=\"#文件及数据处理\" class=\"headerlink\" title=\"文件及数据处理\"></a>文件及数据处理</h2><ul>\n<li><p>在当前目录下通过文件名查找一个文件，使用类似于这样的命令：<code>find . -iname &#39;*something*&#39;</code>。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但注意到 <code>updatedb</code> 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/ggreer/the_silver_searcher\"><code>ag</code></a> 在源代码或数据文件里检索（<code>grep -r</code> 同样可以做到，但相比之下 <code>ag</code> 更加先进）。</p>\n</li>\n<li><p>将 HTML 转为文本：<code>lynx -dump -stdin</code>。</p>\n</li>\n<li><p>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href=\"http://pandoc.org/\"><code>pandoc</code></a>。</p>\n</li>\n<li><p>当你要处理棘手的 XML 时候，<code>xmlstarlet</code> 算是上古时代流传下来的神器。</p>\n</li>\n<li><p>使用 <a href=\"http://stedolan.github.io/jq/\"><code>jq</code></a> 处理 JSON。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/0k/shyaml\"><code>shyaml</code></a> 处理 YAML。</p>\n</li>\n<li><p>要处理 Excel 或 CSV 文件的话，<a href=\"https://github.com/onyxfish/csvkit\">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code> 等方便易用的工具。</p>\n</li>\n<li><p>当你要处理 Amazon S3 相关的工作的时候，<a href=\"https://github.com/s3tools/s3cmd\"><code>s3cmd</code></a> 是一个很方便的工具而 <a href=\"https://github.com/bloomreach/s4cmd\"><code>s4cmd</code></a> 的效率更高。Amazon 官方提供的 <a href=\"https://github.com/aws/aws-cli\"><code>aws</code></a> 以及  <a href=\"https://github.com/donnemartin/saws\"><code>saws</code></a> 是其他 AWS 相关工作的基础，值得学习。</p>\n</li>\n<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，具体内容在后文单行脚本节中。另外可以了解一下 <code>comm</code>。</p>\n</li>\n<li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但遗忘了 <code>join</code>。</p>\n</li>\n<li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p>\n</li>\n<li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p>\n</li>\n<li><p>要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 <a href=\"https://www.gnu.org/software/datamash/\"><code>datamash</code></a>。</p>\n</li>\n<li><p>注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并按照字节来判断顺序。</p>\n</li>\n<li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 <code>TZ=Pacific/Fiji date</code> 可以获取斐济的时间。</p>\n</li>\n<li><p>了解如何使用 <code>awk</code> 和 <code>sed</code> 来进行简单的数据处理。 参阅 <a href=\"#one-liners\">One-liners</a> 获取示例。</p>\n</li>\n<li><p>替换一个或多个文件中出现的字符串：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl -pi.bak -e <span class=\"string\">&#x27;s/old-string/new-string/g&#x27;</span> my-files-*.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <a href=\"https://github.com/jlevy/repren\"><code>repren</code></a> 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span></span><br><span class=\"line\">repren --full --preserve-case --from foo --to bar .</span><br><span class=\"line\"><span class=\"comment\"># 还原所有备份文件 whatever.bak -&gt; whatever:</span></span><br><span class=\"line\">repren --renames --from <span class=\"string\">&#x27;(.*)\\.bak&#x27;</span> --to <span class=\"string\">&#x27;\\1&#x27;</span> *.bak</span><br><span class=\"line\"><span class=\"comment\"># 用 rename 实现上述功能（若可用）:</span></span><br><span class=\"line\">rename <span class=\"string\">&#x27;s/\\.bak$//&#x27;</span> *.bak</span><br></pre></td></tr></table></figure></li>\n<li><p>根据 man 页面的描述，<code>rsync</code> 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 <code>rsync</code> 代替 <code>scp</code> 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的<a href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\">最快方法</a>之一：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir</span><br></pre></td></tr></table></figure></li>\n<li><p>若要在复制文件时获取当前进度，可使用 <code>pv</code>，<a href=\"https://github.com/dmerejkowsky/pycp\"><code>pycp</code></a>，<a href=\"https://github.com/Xfennec/progress\"><code>progress</code></a>，<code>rsync --progress</code>。若所执行的复制为block块拷贝，可以使用 <code>dd status=progress</code>。</p>\n</li>\n<li><p>使用 <code>shuf</code> 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。</p>\n</li>\n<li><p>了解 <code>sort</code> 的参数。显示数字时，使用 <code>-n</code> 或者 <code>-h</code> 来显示更易读的数（例如 <code>du -h</code> 的输出）。明白排序时关键字的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p>\n</li>\n<li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p>\n</li>\n<li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更的统计数据。<code>vimdiff</code> 用于比对并编辑文件。</p>\n</li>\n<li><p>对于二进制文件，使用 <code>hd</code>，<code>hexdump</code> 或者 <code>xxd</code> 使其以十六进制显示，使用 <code>bvi</code>，<code>hexedit</code> 或者 <code>biew</code> 来进行二进制编辑。</p>\n</li>\n<li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等工具）可以帮助在二进制文件中查找特定比特。</p>\n</li>\n<li><p>制作二进制差分文件（Delta 压缩），使用 <code>xdelta3</code>。</p>\n</li>\n<li><p>使用 <code>iconv</code> 更改文本编码。需要更高级的功能，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uconv -f utf-8 -t utf-8 -x <span class=\"string\">&#x27;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; &#x27;</span> &lt; input.txt &gt; output.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>拆分文件可以使用 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</p>\n</li>\n<li><p>操作日期和时间表达式，可以用 <a href=\"http://www.fresse.org/dateutils/\"><code>dateutils</code></a> 中的 <code>dateadd</code>、<code>datediff</code>、<code>strptime</code> 等工具。</p>\n</li>\n<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p>\n</li>\n<li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p>\n</li>\n<li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl -R /some/path &gt; permissions.txt</span><br><span class=\"line\">setfacl --restore=permissions.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>为了高效地创建空文件，请使用 <code>truncate</code>（创建<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6\">稀疏文件</a>），<code>fallocate</code>（用于 ext4，xfs，btrf 和 ocfs2 文件系统），<code>xfs_mkfile</code>（适用于几乎所有的文件系统，包含在 xfsprogs 包中），<code>mkfile</code>（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。</p>\n</li>\n</ul>\n<h2 id=\"系统调试\"><a href=\"#系统调试\" class=\"headerlink\" title=\"系统调试\"></a>系统调试</h2><ul>\n<li><p><code>curl</code> 和 <code>curl -I</code> 可以被轻松地应用于 web 调试中，它们的好兄弟 <code>wget</code> 也是如此，或者也可以试试更潮的 <a href=\"https://github.com/jkbrzt/httpie\"><code>httpie</code></a>。</p>\n</li>\n<li><p>获取 CPU 和硬盘的使用状态，通常使用使用 <code>top</code>（<code>htop</code> 更佳），<code>iostat</code> 和 <code>iotop</code>。而 <code>iostat -mxz 15</code> 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。</p>\n</li>\n<li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p>\n</li>\n<li><p><code>dstat</code> 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 <a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>，它会在一个终端窗口中向你提供一些系统级的数据。</p>\n</li>\n<li><p>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。</p>\n</li>\n<li><p>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 <code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href=\"https://github.com/aragozin/jvm-tools\">SJK tools</a> 更高级。</p>\n</li>\n<li><p>使用 <a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a> 去跟踪路由，用于确定网络问题。</p>\n</li>\n<li><p>用 <a href=\"https://dev.yorhel.nl/ncdu\"><code>ncdu</code></a> 来查看磁盘使用情况，它比寻常的命令，如 <code>du -sh *</code>，更节省时间。</p>\n</li>\n<li><p>查找正在使用带宽的套接字连接或进程，使用 <a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>。</p>\n</li>\n<li><p><code>ab</code> 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a>，<a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a> 和 <a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a> 可用于复杂的网络调试。</p>\n</li>\n<li><p>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</p>\n</li>\n<li><p>了解使用 <code>ldd</code> 来检查共享库。但是<a href=\"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/\">永远不要在不信任的文件上运行</a>。</p>\n</li>\n<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p>\n</li>\n<li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p>\n</li>\n<li><p>当调试一些之前出现的问题的时候，<a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</p>\n</li>\n<li><p>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href=\"https://sourceware.org/systemtap/wiki\">SystemTap</a>），<a href=\"https://en.wikipedia.org/wiki/Perf_(Linux)\"><code>perf</code></a>，以及<a href=\"https://github.com/draios/sysdig\"><code>sysdig</code></a>。</p>\n</li>\n<li><p>查看你当前使用的系统，使用 <code>uname</code>，<code>uname -a</code>（Unix／kernel 信息）或者 <code>lsb_release -a</code>（Linux 发行版信息）。</p>\n</li>\n<li><p>无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 <code>dmesg</code>。</p>\n</li>\n<li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"单行脚本\"><a href=\"#单行脚本\" class=\"headerlink\" title=\"单行脚本\"></a>单行脚本</h2><p>一些命令组合的例子：</p>\n<ul>\n<li><p>当你需要对文本文件做集合交、并、差运算时，<code>sort</code> 和 <code>uniq</code> 会是你的好帮手。具体例子请参照代码后面的，此处假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数，但是实际上 <code>sort</code> 并不被内存大小约束），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort a b | uniq &gt; c   <span class=\"comment\"># c 是 a 并 b</span></span><br><span class=\"line\">sort a b | uniq -d &gt; c   <span class=\"comment\"># c 是 a 交 b</span></span><br><span class=\"line\">sort a b b | uniq -u &gt; c   <span class=\"comment\"># c 是 a - b</span></span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</p>\n</li>\n</ul>\n<ul>\n<li><p>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123; x += $3 &#125; END &#123; print x &#125;&#x27;</span> myfile</span><br></pre></td></tr></table></figure></li>\n<li><p>如果你想在文件树上查看大小/日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -ls</span><br></pre></td></tr></table></figure></li>\n<li><p>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在 URI 中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -o <span class=\"string\">&#x27;acct_id=[0-9]+&#x27;</span> access.log | cut -d= -f2 | sort | uniq -c | sort -rn</span><br></pre></td></tr></table></figure></li>\n<li><p>要持续监测文件改动，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p>\n</li>\n<li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">taocl</span></span>() &#123;</span><br><span class=\"line\">  curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|</span><br><span class=\"line\">    pandoc -f markdown -t html |</span><br><span class=\"line\">    iconv -f <span class=\"string\">&#x27;utf-8&#x27;</span> -t <span class=\"string\">&#x27;unicode&#x27;</span> |</span><br><span class=\"line\">    xmlstarlet fo --html --dropdtd |</span><br><span class=\"line\">    xmlstarlet sel -t -v <span class=\"string\">&quot;(html/body/ul/li[count(p)&gt;0])[<span class=\"variable\">$RANDOM</span> mod last()+1]&quot;</span> |</span><br><span class=\"line\">    xmlstarlet unesc | fmt -80</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"冷门但有用\"><a href=\"#冷门但有用\" class=\"headerlink\" title=\"冷门但有用\"></a>冷门但有用</h2><ul>\n<li><p><code>expr</code>：计算表达式或正则匹配</p>\n</li>\n<li><p><code>m4</code>：简单的宏处理器</p>\n</li>\n<li><p><code>yes</code>：多次打印字符串</p>\n</li>\n<li><p><code>cal</code>：漂亮的日历</p>\n</li>\n<li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p>\n</li>\n<li><p><code>printenv</code>：打印环境变量（调试时或在写脚本文件时很有用）</p>\n</li>\n<li><p><code>look</code>：查找以特定字符串开头的单词或行</p>\n</li>\n<li><p><code>cut</code>，<code>paste</code> 和 <code>join</code>：数据修改</p>\n</li>\n<li><p><code>fmt</code>：格式化文本段落</p>\n</li>\n<li><p><code>pr</code>：将文本格式化成页／列形式</p>\n</li>\n<li><p><code>fold</code>：包裹文本中的几行</p>\n</li>\n<li><p><code>column</code>：将文本格式化成多个对齐、定宽的列或表格</p>\n</li>\n<li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p>\n</li>\n<li><p><code>nl</code>：添加行号</p>\n</li>\n<li><p><code>seq</code>：打印数字</p>\n</li>\n<li><p><code>bc</code>：计算器</p>\n</li>\n<li><p><code>factor</code>：分解因数</p>\n</li>\n<li><p><a href=\"https://gnupg.org/\"><code>gpg</code></a>：加密并签名文件</p>\n</li>\n<li><p><code>toe</code>：terminfo 入口列表</p>\n</li>\n<li><p><code>nc</code>：网络调试及数据传输</p>\n</li>\n<li><p><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</p>\n</li>\n<li><p><a href=\"https://github.com/mattthias/slurm\"><code>slurm</code></a>：网络流量可视化</p>\n</li>\n<li><p><code>dd</code>：文件或设备间传输数据</p>\n</li>\n<li><p><code>file</code>：确定文件类型</p>\n</li>\n<li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p>\n</li>\n<li><p><code>stat</code>：文件信息</p>\n</li>\n<li><p><code>time</code>：执行命令，并计算执行时间</p>\n</li>\n<li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p>\n</li>\n<li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p>\n</li>\n<li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p>\n</li>\n<li><p><code>watch</code>：重复运行同一个命令，展示结果并／或高亮有更改的部分</p>\n</li>\n<li><p><a href=\"https://github.com/joh/when-changed\"><code>when-changed</code></a>：当检测到文件更改时执行指定命令。参阅 <code>inotifywait</code> 和 <code>entr</code>。</p>\n</li>\n<li><p><code>tac</code>：反向输出文件</p>\n</li>\n<li><p><code>shuf</code>：文件中随机选取几行</p>\n</li>\n<li><p><code>comm</code>：一行一行的比较排序过的文件</p>\n</li>\n<li><p><code>strings</code>：从二进制文件中抽取文本</p>\n</li>\n<li><p><code>tr</code>：转换字母</p>\n</li>\n<li><p><code>iconv</code> 或 <code>uconv</code>：文本编码转换</p>\n</li>\n<li><p><code>split</code> 和 <code>csplit</code>：分割文件</p>\n</li>\n<li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p>\n</li>\n<li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p>\n</li>\n<li><p><code>apg</code>：随机生成密码</p>\n</li>\n<li><p><code>xz</code>：高比例的文件压缩</p>\n</li>\n<li><p><code>ldd</code>：动态库信息</p>\n</li>\n<li><p><code>nm</code>：提取 obj 文件中的符号</p>\n</li>\n<li><p><code>ab</code> 或 <a href=\"https://github.com/wg/wrk\"><code>wrk</code></a>：web 服务器性能分析</p>\n</li>\n<li><p><code>strace</code>：调试系统调用</p>\n</li>\n<li><p><a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a>：更好的网络调试跟踪工具</p>\n</li>\n<li><p><code>cssh</code>：可视化的并发 shell</p>\n</li>\n<li><p><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a> 和 <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a>：抓包和网络调试工具</p>\n</li>\n<li><p><a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a>：网络层的 grep</p>\n</li>\n<li><p><code>host</code> 和 <code>dig</code>：DNS 查找</p>\n</li>\n<li><p><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</p>\n</li>\n<li><p><code>dstat</code>：系统状态查看</p>\n</li>\n<li><p><a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>：高层次的多子系统总览</p>\n</li>\n<li><p><code>iostat</code>：硬盘使用状态</p>\n</li>\n<li><p><code>mpstat</code>： CPU 使用状态</p>\n</li>\n<li><p><code>vmstat</code>： 内存使用状态</p>\n</li>\n<li><p><code>htop</code>：top 的加强版</p>\n</li>\n<li><p><code>last</code>：登入记录</p>\n</li>\n<li><p><code>w</code>：查看处于登录状态的用户</p>\n</li>\n<li><p><code>id</code>：用户/组 ID 信息</p>\n</li>\n<li><p><a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a>：系统历史数据</p>\n</li>\n<li><p><a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>：套接字及进程的网络利用情况</p>\n</li>\n<li><p><code>ss</code>：套接字数据</p>\n</li>\n<li><p><code>dmesg</code>：引导及系统错误信息</p>\n</li>\n<li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p>\n</li>\n<li><p><code>hdparm</code>：SATA/ATA 磁盘更改及性能分析</p>\n</li>\n<li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p>\n</li>\n<li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</p>\n</li>\n<li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p>\n</li>\n<li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p>\n</li>\n</ul>\n<h2 id=\"仅限-OS-X-系统\"><a href=\"#仅限-OS-X-系统\" class=\"headerlink\" title=\"仅限 OS X 系统\"></a>仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧。</p>\n<ul>\n<li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p>\n</li>\n<li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p>\n</li>\n<li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p>\n</li>\n<li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p>\n</li>\n<li><p>Spotlight：用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p>\n</li>\n<li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p>\n</li>\n<li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p>\n</li>\n</ul>\n<h2 id=\"仅限-Windows-系统\"><a href=\"#仅限-Windows-系统\" class=\"headerlink\" title=\"仅限 Windows 系统\"></a>仅限 Windows 系统</h2><p>以下是<em>仅限于</em> Windows 系统的技巧。</p>\n<h3 id=\"在-Winodws-下获取-Unix-工具\"><a href=\"#在-Winodws-下获取-Unix-工具\" class=\"headerlink\" title=\"在 Winodws 下获取 Unix 工具\"></a>在 Winodws 下获取 Unix 工具</h3><ul>\n<li><p>可以安装 <a href=\"https://cygwin.com/\">Cygwin</a> 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。</p>\n</li>\n<li><p>在 Windows 10 上，你可以使用 <a href=\"https://msdn.microsoft.com/commandline/wsl/about\">Bash on Ubuntu on Windows</a>，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。</p>\n</li>\n<li><p>如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。</p>\n</li>\n<li><p>另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 <a href=\"https://github.com/dthree/cash\">Cash</a>。注意在此环境下只有很少的 Unix 命令和命令行可用。</p>\n</li>\n</ul>\n<h3 id=\"实用-Windows-命令行工具\"><a href=\"#实用-Windows-命令行工具\" class=\"headerlink\" title=\"实用 Windows 命令行工具\"></a>实用 Windows 命令行工具</h3><ul>\n<li><p>可以使用 <code>wmic</code> 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。</p>\n</li>\n<li><p>Windows 实用的原生命令行网络工具包括 <code>ping</code>，<code>ipconfig</code>，<code>tracert</code>，和 <code>netstat</code>。</p>\n</li>\n<li><p>可以使用 <code>Rundll32</code> 命令来实现<a href=\"http://www.thewindowsclub.com/rundll32-shortcut-commands-windows\">许多有用的 Windows 任务</a> 。</p>\n</li>\n</ul>\n<h3 id=\"Cygwin-技巧\"><a href=\"#Cygwin-技巧\" class=\"headerlink\" title=\"Cygwin 技巧\"></a>Cygwin 技巧</h3><ul>\n<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p>\n</li>\n<li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p>\n</li>\n<li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p>\n</li>\n<li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p>\n</li>\n<li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p>\n</li>\n<li><p>注意 Windows 驱动器路径 <code>C:\\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 代表 Windows 中的 <code>C:\\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p>\n</li>\n<li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p>\n</li>\n<li><p>要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 <a href=\"https://github.com/dthree/cash\">Cash</a>。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。</p>\n</li>\n<li><p>要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。</p>\n</li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"https://github.com/alebcay/awesome-shell\">awesome-shell</a>：一份精心组织的命令行工具及资源的列表。</li>\n<li><a href=\"https://github.com/herrbischoff/awesome-osx-command-line\">awesome-osx-command-line</a>：一份针对 OS X 命令行的更深入的指南。</li>\n<li><a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\">Strict mode</a>：为了编写更好的脚本文件。</li>\n<li><a href=\"https://github.com/koalaman/shellcheck\">shellcheck</a>：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。</li>\n<li><a href=\"http://www.dwheeler.com/essays/filenames-in-shell.html\">Filenames and Pathnames in Shell</a>：有关如何在 shell 脚本里正确处理文件名的细枝末节。</li>\n<li><a href=\"http://datascienceatthecommandline.com/#tools\">Data Science at the Command Line</a>：用于数据科学的一些命令和工具，摘自同名书籍。</li>\n</ul>\n<h2 id=\"免责声明\"><a href=\"#免责声明\" class=\"headerlink\" title=\"免责声明\"></a>免责声明</h2><p>除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 <em>有能力</em> 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)</p>\n<h2 id=\"授权条款\"><a href=\"#授权条款\" class=\"headerlink\" title=\"授权条款\"></a>授权条款</h2><p><a href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" alt=\"Creative Commons License\"></a></p>\n<p>本文使用授权协议 <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"命令行的艺术\"><a href=\"#命令行的艺术\" class=\"headerlink\" title=\"命令行的艺术\"></a>命令行的艺术</h1><blockquote>\n<p>fork from <code>https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md</code></p>\n</blockquote>\n<p><a href=\"https://gitter.im/jlevy/the-art-of-command-line?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Join the chat at https://gitter.im/jlevy/the-art-of-command-line\"></a></p>\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80\">基础</a></li>\n<li><a href=\"#%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8\">日常使用</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\">文件及数据处理</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95\">系统调试</a></li>\n<li><a href=\"#%E5%8D%95%E8%A1%8C%E8%84%9A%E6%9C%AC\">单行脚本</a></li>\n<li><a href=\"#%E5%86%B7%E9%97%A8%E4%BD%86%E6%9C%89%E7%94%A8\">冷门但有用</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E8%B5%84%E6%BA%90\">更多资源</a></li>\n<li><a href=\"#%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E\">免责声明</a></li>\n</ul>\n<p>![curl -s ‘<a href=\"https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md&#39;\">https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md&#39;</a> | egrep -o ‘<code>\\w+</code>‘ | tr -d ‘`’ | cowsay -W50](cowsay.png)</p>\n<p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。</p>\n<p>这篇文章是<a href=\"AUTHORS.md\">许多作者和译者</a>共同的成果。<br>这里的部分内容<br><a href=\"http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands\">首次</a><br><a href=\"http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix\">出现</a><br>于 <a href=\"http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know\">Quora</a>，<br>但已经迁移到了 Github，并由众多高手做出了许多改进。<br>如果你在本文中发现了错误或者存在可以改善的地方，请<a href=\"/CONTRIBUTING.md\"><strong>贡献你的一份力量</strong></a>。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涵盖范围：</p>\n<ul>\n<li>这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到<em>覆盖面广</em>（涉及所有重要的内容），<em>具体</em>（给出具体的最常用的例子），以及<em>简洁</em>（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。</li>\n<li>本文主要为 Linux 所写，但在<a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a>章节和<a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a>章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。</li>\n<li>本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。</li>\n<li>除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code>，<code>pacman</code>，<br><code>pip</code> 或 <code>brew</code>（以及其它合适的包管理器）来安装依赖的程序。</li>\n<li>遇到问题的话，请尝试使用 <a href=\"http://explainshell.com/\">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>学习 Bash 的基础知识。具体地，在命令行中输入 <code>man bash</code> 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你<em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。</p>\n</li>\n<li><p>熟悉至少一个基于文本的编辑器。通常而言 Vim （<code>vi</code>） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</p>\n</li>\n<li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断这个命令到底是可执行文件、shell 内置命令还是别名。</p>\n</li>\n<li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p>\n</li>\n<li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别（后文中有一些具体的例子）。</p>\n</li>\n<li><p>熟悉 Bash 中的任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p>\n</li>\n<li><p>学会使用 <code>ssh</code> 进行远程命令行登录，最好知道如何使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基础的无密码认证登录。</p>\n</li>\n<li><p>学会基本的文件管理工具：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p>\n</li>\n<li><p>学习基本的网络管理工具：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p>\n</li>\n<li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p>\n</li>\n<li><p>熟悉正则表达式，学会使用 <code>grep</code>／<code>egrep</code>，它们的参数中 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code> 这些是很常用并值得认真学习的。</p>\n</li>\n<li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p>\n</li>\n</ul>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ul>\n<li><p>在 Bash 中，可以通过按 <strong>Tab</strong> 键实现自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 <strong>ctrl-r</strong> 会向后查找匹配项，按下 <strong>Enter</strong> 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。</p>\n</li>\n<li><p>在 Bash 中，可以按下 <strong>ctrl-w</strong> 删除你键入的最后一个单词，<strong>ctrl-u</strong> 可以删除行内光标所在位置之前的内容，<strong>alt-b</strong> 和 <strong>alt-f</strong> 可以以单词为单位移动光标，<strong>ctrl-a</strong> 可以将光标移至行首，<strong>ctrl-e</strong> 可以将光标移至行尾，<strong>ctrl-k</strong> 可以删除光标至行尾的所有内容，<strong>ctrl-l</strong> 可以清屏。键入 <code>man readline</code> 可以查看 Bash 中的默认快捷键。内容有很多，例如 <strong>alt-.</strong> 循环地移向前一个参数，而 <strong>alt-</strong>* 可以展开通配符。</p>\n</li>\n</ul>\n<ul>\n<li><p>你喜欢的话，可以执行 <code>set -o vi</code> 来使用 vi 风格的快捷键，而执行 <code>set -o emacs</code> 可以把它改回来。</p>\n</li>\n<li><p>为了便于编辑长命令，在设置你的默认编辑器后（例如 <code>export EDITOR=vim</code>），<strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 <strong>escape-v</strong>。</p>\n</li>\n<li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 <code>!$</code>， 它用于指代上次键入的参数，而 <code>!!</code> 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 来实现。</p>\n</li>\n<li><p><code>cd</code> 命令可以切换工作路径，输入 <code>cd ~</code> 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 <code>~</code>（例如 <code>~/.bashrc</code>）。在 <code>sh</code> 脚本里则用环境变量 <code>$HOME</code> 指代 home 目录的路径。</p>\n</li>\n<li><p>回到前一个工作路径：<code>cd -</code>。</p>\n</li>\n<li><p>如果你输入命令的时候中途改了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code> 把它当做注释再按下回车执行（或者依次按下 <strong>ctrl-a</strong>， **#**， <strong>enter</strong>）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。</p>\n</li>\n<li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I&#123;&#125;</code> 会很方便。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">&#x27;*.py&#x27;</span> | xargs grep some_function</span><br><span class=\"line\">cat hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p><code>pstree -p</code> 以一种优雅的方式展示进程树。</p>\n</li>\n<li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p>\n</li>\n<li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p>\n</li>\n<li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p>\n</li>\n<li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 <code>-u</code> 则检查 UDP 端口）或者 <code>lsof -iTCP -sTCP:LISTEN -P -n</code> (这也可以在 OS X 上运行)。</p>\n</li>\n<li><p><code>lsof</code> 来查看开启的套接字和文件。</p>\n</li>\n<li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p>\n</li>\n<li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p>\n</li>\n<li><p>可以把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code>，具体看下这篇<a href=\"http://superuser.com/a/183980/7106\">文章</a>。这样做的话你就可以在所有 shell 会话中使用你的设定。</p>\n</li>\n<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>~/.bash_profile</code>。而对于从图形界面启动的 shell 和 <code>cron</code> 启动的 shell，则需要单独配置文件。</p>\n</li>\n<li><p>要想在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以借助 Git。</p>\n</li>\n<li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;$FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用 NULL 来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 <code>IFS=$&#39;\\n&#39;</code> 把内部字段分隔符设为换行符。</p>\n</li>\n<li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出（或者使用它的变体 <code>set -v</code>，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行；使用 <code>set -u</code> 来检查是否使用了未赋值的变量；试试 <code>set -o pipefail</code>，它可以监测管道中的错误。当牵扯到很多脚本时，使用 <code>trap</code> 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -euo pipefail</span><br><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;echo &#x27;error: Script failed: see failed command above&#x27;&quot;</span> ERR</span><br></pre></td></tr></table></figure></li>\n<li><p>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># do something in current dir</span></span><br><span class=\"line\">(<span class=\"built_in\">cd</span> /some/other/dir &amp;&amp; other-command)</span><br><span class=\"line\"><span class=\"comment\"># continue in original dir</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 Bash 中，变量有许多的扩展方式。<code>$&#123;name:?error message&#125;</code> 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 <code>input_file=$&#123;1:?usage: $0 input_file&#125;</code>。在变量为空时使用默认值：<code>$&#123;name:-default&#125;</code>。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 <code>output_file=$&#123;2:-logfile&#125;</code>，如果省略了 $2，它的值就为空，于是 <code>output_file</code> 就会被设为 <code>logfile</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>&#123;1..10&#125;</code>。截断字符串：<code>$&#123;var%suffix&#125;</code> 和 <code>$&#123;var#prefix&#125;</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo $&#123;var%.pdf&#125;.txt</code> 将输出 <code>foo.txt</code>。</p>\n</li>\n<li><p>使用括号扩展（<code>&#123;</code>…<code>&#125;</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.&#123;txt,pdf&#125; some-dir</code>（同时移动两个文件），<code>cp somefile&#123;,.bak&#125;</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-&#123;a,b,c&#125;/subtest-&#123;1,2,3&#125;</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p>\n</li>\n<li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)</span><br></pre></td></tr></table></figure></li>\n<li><p>编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 在这里写代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p>\n</li>\n<li><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p>\n</li>\n<li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p>\n</li>\n<li><p>使用 <code>screen</code> 或 <a href=\"https://tmux.github.io/\"><code>tmux</code></a> 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 <code>byobu</code> 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 <a href=\"https://github.com/bogner/dtach\"><code>dtach</code></a>。</p>\n</li>\n<li><p>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。</p>\n</li>\n<li><p>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCPKeepAlive=yes</span><br><span class=\"line\">ServerAliveInterval=15</span><br><span class=\"line\">ServerAliveCountMax=6</span><br><span class=\"line\">Compression=yes</span><br><span class=\"line\">ControlMaster auto</span><br><span class=\"line\">ControlPath /tmp/%r@%h:%p</span><br><span class=\"line\">ControlPersist yes</span><br></pre></td></tr></table></figure></li>\n<li><p>一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 <code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code>。</p>\n</li>\n<li><p>考虑使用 <a href=\"https://mosh.mit.edu/\"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。</p>\n</li>\n<li><p>获取八进制形式的文件访问权限（修改系统设置时通常需要，但 <code>ls</code> 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%A %a %n&#x27;</span> /etc/timezone</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <a href=\"https://github.com/mooz/percol\"><code>percol</code></a> 或者 <a href=\"https://github.com/junegunn/fzf\"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</p>\n</li>\n<li><p>使用 <code>fpp</code>（<a href=\"https://github.com/facebook/PathPicker\">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</p>\n</li>\n<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p>\n</li>\n<li><p>以其他用户的身份执行命令，使用 <code>sudo</code>。默认以 root 用户的身份执行；使用 <code>-u</code> 来指定其他用户。使用 <code>-i</code> 来以该用户登录（需要输入_你自己的_密码）。</p>\n</li>\n<li><p>将 shell 切换为其他用户，使用 <code>su username</code> 或者 <code>sudo - username</code>。加入 <code>-</code> 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。</p>\n</li>\n<li><p>了解命令行的 <a href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\">128K 限制</a>。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 <code>find</code> 或 <code>xargs</code> 通常可以解决。）</p>\n</li>\n<li><p>当你需要一个基本的计算器时，可以使用 <code>python</code> 解释器（当然你要用 python 的时候也是这样）。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 2+3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"文件及数据处理\"><a href=\"#文件及数据处理\" class=\"headerlink\" title=\"文件及数据处理\"></a>文件及数据处理</h2><ul>\n<li><p>在当前目录下通过文件名查找一个文件，使用类似于这样的命令：<code>find . -iname &#39;*something*&#39;</code>。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但注意到 <code>updatedb</code> 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/ggreer/the_silver_searcher\"><code>ag</code></a> 在源代码或数据文件里检索（<code>grep -r</code> 同样可以做到，但相比之下 <code>ag</code> 更加先进）。</p>\n</li>\n<li><p>将 HTML 转为文本：<code>lynx -dump -stdin</code>。</p>\n</li>\n<li><p>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href=\"http://pandoc.org/\"><code>pandoc</code></a>。</p>\n</li>\n<li><p>当你要处理棘手的 XML 时候，<code>xmlstarlet</code> 算是上古时代流传下来的神器。</p>\n</li>\n<li><p>使用 <a href=\"http://stedolan.github.io/jq/\"><code>jq</code></a> 处理 JSON。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/0k/shyaml\"><code>shyaml</code></a> 处理 YAML。</p>\n</li>\n<li><p>要处理 Excel 或 CSV 文件的话，<a href=\"https://github.com/onyxfish/csvkit\">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code> 等方便易用的工具。</p>\n</li>\n<li><p>当你要处理 Amazon S3 相关的工作的时候，<a href=\"https://github.com/s3tools/s3cmd\"><code>s3cmd</code></a> 是一个很方便的工具而 <a href=\"https://github.com/bloomreach/s4cmd\"><code>s4cmd</code></a> 的效率更高。Amazon 官方提供的 <a href=\"https://github.com/aws/aws-cli\"><code>aws</code></a> 以及  <a href=\"https://github.com/donnemartin/saws\"><code>saws</code></a> 是其他 AWS 相关工作的基础，值得学习。</p>\n</li>\n<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，具体内容在后文单行脚本节中。另外可以了解一下 <code>comm</code>。</p>\n</li>\n<li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但遗忘了 <code>join</code>。</p>\n</li>\n<li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p>\n</li>\n<li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p>\n</li>\n<li><p>要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 <a href=\"https://www.gnu.org/software/datamash/\"><code>datamash</code></a>。</p>\n</li>\n<li><p>注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并按照字节来判断顺序。</p>\n</li>\n<li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 <code>TZ=Pacific/Fiji date</code> 可以获取斐济的时间。</p>\n</li>\n<li><p>了解如何使用 <code>awk</code> 和 <code>sed</code> 来进行简单的数据处理。 参阅 <a href=\"#one-liners\">One-liners</a> 获取示例。</p>\n</li>\n<li><p>替换一个或多个文件中出现的字符串：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl -pi.bak -e <span class=\"string\">&#x27;s/old-string/new-string/g&#x27;</span> my-files-*.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <a href=\"https://github.com/jlevy/repren\"><code>repren</code></a> 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span></span><br><span class=\"line\">repren --full --preserve-case --from foo --to bar .</span><br><span class=\"line\"><span class=\"comment\"># 还原所有备份文件 whatever.bak -&gt; whatever:</span></span><br><span class=\"line\">repren --renames --from <span class=\"string\">&#x27;(.*)\\.bak&#x27;</span> --to <span class=\"string\">&#x27;\\1&#x27;</span> *.bak</span><br><span class=\"line\"><span class=\"comment\"># 用 rename 实现上述功能（若可用）:</span></span><br><span class=\"line\">rename <span class=\"string\">&#x27;s/\\.bak$//&#x27;</span> *.bak</span><br></pre></td></tr></table></figure></li>\n<li><p>根据 man 页面的描述，<code>rsync</code> 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 <code>rsync</code> 代替 <code>scp</code> 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的<a href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\">最快方法</a>之一：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir</span><br></pre></td></tr></table></figure></li>\n<li><p>若要在复制文件时获取当前进度，可使用 <code>pv</code>，<a href=\"https://github.com/dmerejkowsky/pycp\"><code>pycp</code></a>，<a href=\"https://github.com/Xfennec/progress\"><code>progress</code></a>，<code>rsync --progress</code>。若所执行的复制为block块拷贝，可以使用 <code>dd status=progress</code>。</p>\n</li>\n<li><p>使用 <code>shuf</code> 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。</p>\n</li>\n<li><p>了解 <code>sort</code> 的参数。显示数字时，使用 <code>-n</code> 或者 <code>-h</code> 来显示更易读的数（例如 <code>du -h</code> 的输出）。明白排序时关键字的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p>\n</li>\n<li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p>\n</li>\n<li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更的统计数据。<code>vimdiff</code> 用于比对并编辑文件。</p>\n</li>\n<li><p>对于二进制文件，使用 <code>hd</code>，<code>hexdump</code> 或者 <code>xxd</code> 使其以十六进制显示，使用 <code>bvi</code>，<code>hexedit</code> 或者 <code>biew</code> 来进行二进制编辑。</p>\n</li>\n<li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等工具）可以帮助在二进制文件中查找特定比特。</p>\n</li>\n<li><p>制作二进制差分文件（Delta 压缩），使用 <code>xdelta3</code>。</p>\n</li>\n<li><p>使用 <code>iconv</code> 更改文本编码。需要更高级的功能，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uconv -f utf-8 -t utf-8 -x <span class=\"string\">&#x27;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; &#x27;</span> &lt; input.txt &gt; output.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>拆分文件可以使用 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</p>\n</li>\n<li><p>操作日期和时间表达式，可以用 <a href=\"http://www.fresse.org/dateutils/\"><code>dateutils</code></a> 中的 <code>dateadd</code>、<code>datediff</code>、<code>strptime</code> 等工具。</p>\n</li>\n<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p>\n</li>\n<li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p>\n</li>\n<li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl -R /some/path &gt; permissions.txt</span><br><span class=\"line\">setfacl --restore=permissions.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>为了高效地创建空文件，请使用 <code>truncate</code>（创建<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6\">稀疏文件</a>），<code>fallocate</code>（用于 ext4，xfs，btrf 和 ocfs2 文件系统），<code>xfs_mkfile</code>（适用于几乎所有的文件系统，包含在 xfsprogs 包中），<code>mkfile</code>（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。</p>\n</li>\n</ul>\n<h2 id=\"系统调试\"><a href=\"#系统调试\" class=\"headerlink\" title=\"系统调试\"></a>系统调试</h2><ul>\n<li><p><code>curl</code> 和 <code>curl -I</code> 可以被轻松地应用于 web 调试中，它们的好兄弟 <code>wget</code> 也是如此，或者也可以试试更潮的 <a href=\"https://github.com/jkbrzt/httpie\"><code>httpie</code></a>。</p>\n</li>\n<li><p>获取 CPU 和硬盘的使用状态，通常使用使用 <code>top</code>（<code>htop</code> 更佳），<code>iostat</code> 和 <code>iotop</code>。而 <code>iostat -mxz 15</code> 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。</p>\n</li>\n<li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p>\n</li>\n<li><p><code>dstat</code> 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 <a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>，它会在一个终端窗口中向你提供一些系统级的数据。</p>\n</li>\n<li><p>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。</p>\n</li>\n<li><p>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 <code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href=\"https://github.com/aragozin/jvm-tools\">SJK tools</a> 更高级。</p>\n</li>\n<li><p>使用 <a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a> 去跟踪路由，用于确定网络问题。</p>\n</li>\n<li><p>用 <a href=\"https://dev.yorhel.nl/ncdu\"><code>ncdu</code></a> 来查看磁盘使用情况，它比寻常的命令，如 <code>du -sh *</code>，更节省时间。</p>\n</li>\n<li><p>查找正在使用带宽的套接字连接或进程，使用 <a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>。</p>\n</li>\n<li><p><code>ab</code> 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a>，<a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a> 和 <a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a> 可用于复杂的网络调试。</p>\n</li>\n<li><p>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</p>\n</li>\n<li><p>了解使用 <code>ldd</code> 来检查共享库。但是<a href=\"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/\">永远不要在不信任的文件上运行</a>。</p>\n</li>\n<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p>\n</li>\n<li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p>\n</li>\n<li><p>当调试一些之前出现的问题的时候，<a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</p>\n</li>\n<li><p>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href=\"https://sourceware.org/systemtap/wiki\">SystemTap</a>），<a href=\"https://en.wikipedia.org/wiki/Perf_(Linux)\"><code>perf</code></a>，以及<a href=\"https://github.com/draios/sysdig\"><code>sysdig</code></a>。</p>\n</li>\n<li><p>查看你当前使用的系统，使用 <code>uname</code>，<code>uname -a</code>（Unix／kernel 信息）或者 <code>lsb_release -a</code>（Linux 发行版信息）。</p>\n</li>\n<li><p>无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 <code>dmesg</code>。</p>\n</li>\n<li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"单行脚本\"><a href=\"#单行脚本\" class=\"headerlink\" title=\"单行脚本\"></a>单行脚本</h2><p>一些命令组合的例子：</p>\n<ul>\n<li><p>当你需要对文本文件做集合交、并、差运算时，<code>sort</code> 和 <code>uniq</code> 会是你的好帮手。具体例子请参照代码后面的，此处假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数，但是实际上 <code>sort</code> 并不被内存大小约束），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort a b | uniq &gt; c   <span class=\"comment\"># c 是 a 并 b</span></span><br><span class=\"line\">sort a b | uniq -d &gt; c   <span class=\"comment\"># c 是 a 交 b</span></span><br><span class=\"line\">sort a b b | uniq -u &gt; c   <span class=\"comment\"># c 是 a - b</span></span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</p>\n</li>\n</ul>\n<ul>\n<li><p>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123; x += $3 &#125; END &#123; print x &#125;&#x27;</span> myfile</span><br></pre></td></tr></table></figure></li>\n<li><p>如果你想在文件树上查看大小/日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -ls</span><br></pre></td></tr></table></figure></li>\n<li><p>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在 URI 中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -o <span class=\"string\">&#x27;acct_id=[0-9]+&#x27;</span> access.log | cut -d= -f2 | sort | uniq -c | sort -rn</span><br></pre></td></tr></table></figure></li>\n<li><p>要持续监测文件改动，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p>\n</li>\n<li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">taocl</span></span>() &#123;</span><br><span class=\"line\">  curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|</span><br><span class=\"line\">    pandoc -f markdown -t html |</span><br><span class=\"line\">    iconv -f <span class=\"string\">&#x27;utf-8&#x27;</span> -t <span class=\"string\">&#x27;unicode&#x27;</span> |</span><br><span class=\"line\">    xmlstarlet fo --html --dropdtd |</span><br><span class=\"line\">    xmlstarlet sel -t -v <span class=\"string\">&quot;(html/body/ul/li[count(p)&gt;0])[<span class=\"variable\">$RANDOM</span> mod last()+1]&quot;</span> |</span><br><span class=\"line\">    xmlstarlet unesc | fmt -80</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"冷门但有用\"><a href=\"#冷门但有用\" class=\"headerlink\" title=\"冷门但有用\"></a>冷门但有用</h2><ul>\n<li><p><code>expr</code>：计算表达式或正则匹配</p>\n</li>\n<li><p><code>m4</code>：简单的宏处理器</p>\n</li>\n<li><p><code>yes</code>：多次打印字符串</p>\n</li>\n<li><p><code>cal</code>：漂亮的日历</p>\n</li>\n<li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p>\n</li>\n<li><p><code>printenv</code>：打印环境变量（调试时或在写脚本文件时很有用）</p>\n</li>\n<li><p><code>look</code>：查找以特定字符串开头的单词或行</p>\n</li>\n<li><p><code>cut</code>，<code>paste</code> 和 <code>join</code>：数据修改</p>\n</li>\n<li><p><code>fmt</code>：格式化文本段落</p>\n</li>\n<li><p><code>pr</code>：将文本格式化成页／列形式</p>\n</li>\n<li><p><code>fold</code>：包裹文本中的几行</p>\n</li>\n<li><p><code>column</code>：将文本格式化成多个对齐、定宽的列或表格</p>\n</li>\n<li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p>\n</li>\n<li><p><code>nl</code>：添加行号</p>\n</li>\n<li><p><code>seq</code>：打印数字</p>\n</li>\n<li><p><code>bc</code>：计算器</p>\n</li>\n<li><p><code>factor</code>：分解因数</p>\n</li>\n<li><p><a href=\"https://gnupg.org/\"><code>gpg</code></a>：加密并签名文件</p>\n</li>\n<li><p><code>toe</code>：terminfo 入口列表</p>\n</li>\n<li><p><code>nc</code>：网络调试及数据传输</p>\n</li>\n<li><p><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</p>\n</li>\n<li><p><a href=\"https://github.com/mattthias/slurm\"><code>slurm</code></a>：网络流量可视化</p>\n</li>\n<li><p><code>dd</code>：文件或设备间传输数据</p>\n</li>\n<li><p><code>file</code>：确定文件类型</p>\n</li>\n<li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p>\n</li>\n<li><p><code>stat</code>：文件信息</p>\n</li>\n<li><p><code>time</code>：执行命令，并计算执行时间</p>\n</li>\n<li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p>\n</li>\n<li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p>\n</li>\n<li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p>\n</li>\n<li><p><code>watch</code>：重复运行同一个命令，展示结果并／或高亮有更改的部分</p>\n</li>\n<li><p><a href=\"https://github.com/joh/when-changed\"><code>when-changed</code></a>：当检测到文件更改时执行指定命令。参阅 <code>inotifywait</code> 和 <code>entr</code>。</p>\n</li>\n<li><p><code>tac</code>：反向输出文件</p>\n</li>\n<li><p><code>shuf</code>：文件中随机选取几行</p>\n</li>\n<li><p><code>comm</code>：一行一行的比较排序过的文件</p>\n</li>\n<li><p><code>strings</code>：从二进制文件中抽取文本</p>\n</li>\n<li><p><code>tr</code>：转换字母</p>\n</li>\n<li><p><code>iconv</code> 或 <code>uconv</code>：文本编码转换</p>\n</li>\n<li><p><code>split</code> 和 <code>csplit</code>：分割文件</p>\n</li>\n<li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p>\n</li>\n<li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p>\n</li>\n<li><p><code>apg</code>：随机生成密码</p>\n</li>\n<li><p><code>xz</code>：高比例的文件压缩</p>\n</li>\n<li><p><code>ldd</code>：动态库信息</p>\n</li>\n<li><p><code>nm</code>：提取 obj 文件中的符号</p>\n</li>\n<li><p><code>ab</code> 或 <a href=\"https://github.com/wg/wrk\"><code>wrk</code></a>：web 服务器性能分析</p>\n</li>\n<li><p><code>strace</code>：调试系统调用</p>\n</li>\n<li><p><a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a>：更好的网络调试跟踪工具</p>\n</li>\n<li><p><code>cssh</code>：可视化的并发 shell</p>\n</li>\n<li><p><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a> 和 <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a>：抓包和网络调试工具</p>\n</li>\n<li><p><a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a>：网络层的 grep</p>\n</li>\n<li><p><code>host</code> 和 <code>dig</code>：DNS 查找</p>\n</li>\n<li><p><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</p>\n</li>\n<li><p><code>dstat</code>：系统状态查看</p>\n</li>\n<li><p><a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>：高层次的多子系统总览</p>\n</li>\n<li><p><code>iostat</code>：硬盘使用状态</p>\n</li>\n<li><p><code>mpstat</code>： CPU 使用状态</p>\n</li>\n<li><p><code>vmstat</code>： 内存使用状态</p>\n</li>\n<li><p><code>htop</code>：top 的加强版</p>\n</li>\n<li><p><code>last</code>：登入记录</p>\n</li>\n<li><p><code>w</code>：查看处于登录状态的用户</p>\n</li>\n<li><p><code>id</code>：用户/组 ID 信息</p>\n</li>\n<li><p><a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a>：系统历史数据</p>\n</li>\n<li><p><a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>：套接字及进程的网络利用情况</p>\n</li>\n<li><p><code>ss</code>：套接字数据</p>\n</li>\n<li><p><code>dmesg</code>：引导及系统错误信息</p>\n</li>\n<li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p>\n</li>\n<li><p><code>hdparm</code>：SATA/ATA 磁盘更改及性能分析</p>\n</li>\n<li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p>\n</li>\n<li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</p>\n</li>\n<li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p>\n</li>\n<li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p>\n</li>\n</ul>\n<h2 id=\"仅限-OS-X-系统\"><a href=\"#仅限-OS-X-系统\" class=\"headerlink\" title=\"仅限 OS X 系统\"></a>仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧。</p>\n<ul>\n<li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p>\n</li>\n<li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p>\n</li>\n<li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p>\n</li>\n<li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p>\n</li>\n<li><p>Spotlight：用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p>\n</li>\n<li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p>\n</li>\n<li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p>\n</li>\n</ul>\n<h2 id=\"仅限-Windows-系统\"><a href=\"#仅限-Windows-系统\" class=\"headerlink\" title=\"仅限 Windows 系统\"></a>仅限 Windows 系统</h2><p>以下是<em>仅限于</em> Windows 系统的技巧。</p>\n<h3 id=\"在-Winodws-下获取-Unix-工具\"><a href=\"#在-Winodws-下获取-Unix-工具\" class=\"headerlink\" title=\"在 Winodws 下获取 Unix 工具\"></a>在 Winodws 下获取 Unix 工具</h3><ul>\n<li><p>可以安装 <a href=\"https://cygwin.com/\">Cygwin</a> 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。</p>\n</li>\n<li><p>在 Windows 10 上，你可以使用 <a href=\"https://msdn.microsoft.com/commandline/wsl/about\">Bash on Ubuntu on Windows</a>，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。</p>\n</li>\n<li><p>如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。</p>\n</li>\n<li><p>另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 <a href=\"https://github.com/dthree/cash\">Cash</a>。注意在此环境下只有很少的 Unix 命令和命令行可用。</p>\n</li>\n</ul>\n<h3 id=\"实用-Windows-命令行工具\"><a href=\"#实用-Windows-命令行工具\" class=\"headerlink\" title=\"实用 Windows 命令行工具\"></a>实用 Windows 命令行工具</h3><ul>\n<li><p>可以使用 <code>wmic</code> 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。</p>\n</li>\n<li><p>Windows 实用的原生命令行网络工具包括 <code>ping</code>，<code>ipconfig</code>，<code>tracert</code>，和 <code>netstat</code>。</p>\n</li>\n<li><p>可以使用 <code>Rundll32</code> 命令来实现<a href=\"http://www.thewindowsclub.com/rundll32-shortcut-commands-windows\">许多有用的 Windows 任务</a> 。</p>\n</li>\n</ul>\n<h3 id=\"Cygwin-技巧\"><a href=\"#Cygwin-技巧\" class=\"headerlink\" title=\"Cygwin 技巧\"></a>Cygwin 技巧</h3><ul>\n<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p>\n</li>\n<li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p>\n</li>\n<li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p>\n</li>\n<li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p>\n</li>\n<li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p>\n</li>\n<li><p>注意 Windows 驱动器路径 <code>C:\\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 代表 Windows 中的 <code>C:\\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p>\n</li>\n<li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p>\n</li>\n<li><p>要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 <a href=\"https://github.com/dthree/cash\">Cash</a>。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。</p>\n</li>\n<li><p>要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。</p>\n</li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"https://github.com/alebcay/awesome-shell\">awesome-shell</a>：一份精心组织的命令行工具及资源的列表。</li>\n<li><a href=\"https://github.com/herrbischoff/awesome-osx-command-line\">awesome-osx-command-line</a>：一份针对 OS X 命令行的更深入的指南。</li>\n<li><a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\">Strict mode</a>：为了编写更好的脚本文件。</li>\n<li><a href=\"https://github.com/koalaman/shellcheck\">shellcheck</a>：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。</li>\n<li><a href=\"http://www.dwheeler.com/essays/filenames-in-shell.html\">Filenames and Pathnames in Shell</a>：有关如何在 shell 脚本里正确处理文件名的细枝末节。</li>\n<li><a href=\"http://datascienceatthecommandline.com/#tools\">Data Science at the Command Line</a>：用于数据科学的一些命令和工具，摘自同名书籍。</li>\n</ul>\n<h2 id=\"免责声明\"><a href=\"#免责声明\" class=\"headerlink\" title=\"免责声明\"></a>免责声明</h2><p>除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 <em>有能力</em> 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)</p>\n<h2 id=\"授权条款\"><a href=\"#授权条款\" class=\"headerlink\" title=\"授权条款\"></a>授权条款</h2><p><a href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" alt=\"Creative Commons License\"></a></p>\n<p>本文使用授权协议 <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>。</p>\n"},{"title":"c_memory","date":"2022-01-03T15:20:06.000Z","_content":"\n## 内存分区\n* 栈区（stack）:\n  \n  栈又称堆栈，是用户存放程序临时创建的局部变量,\n  存放函数形参和局部变量（auto类型），由编译器自动分配和释放。\n\n  在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。\n\n  由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。\n\n\n* 堆区（heap）:\n  \n  堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。\n  该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。\n  如果程序员没有手动释放，那么程序结束时可能由OS回收。\n\n* 全局/静态存储区：\n  \n  存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。\n\n* 文字常量区：\n  \n  常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。\n\n* 程序代码区：\n  \n  存放程序的二进制代码，内存由系统管理\n\n## 可执行分段\n一个程序本质上都是由 bss段、data段、text段三个组成的。\n\n- `text`\n  \n  这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。\n  在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等\n\n- `date`\n\n  存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。\n  也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.\n  数据段属于静态内存分配.\n\n- `bss`\n  bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。\n  bss是英文Block Started by Symbol的简称。\n  bss段属于静态内存分配。\n  已经定义但没赋初值的全局变量和静态变量存放在这个区域。\n\n> `text` 段在内存中被映射为只读，但 `date` 段与 `bss` 段是可写的.\n\n\n![m](../imgs/memory.gif)\n\n\n> 代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念\n","source":"_posts/c-memory.md","raw":"---\ntitle: c_memory\ndate: 2022-01-03 23:20:06\ntags:\n    - Linux\n    - C\n    - Memory\n    - Notes\n---\n\n## 内存分区\n* 栈区（stack）:\n  \n  栈又称堆栈，是用户存放程序临时创建的局部变量,\n  存放函数形参和局部变量（auto类型），由编译器自动分配和释放。\n\n  在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。\n\n  由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。\n\n\n* 堆区（heap）:\n  \n  堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。\n  该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。\n  如果程序员没有手动释放，那么程序结束时可能由OS回收。\n\n* 全局/静态存储区：\n  \n  存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。\n\n* 文字常量区：\n  \n  常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。\n\n* 程序代码区：\n  \n  存放程序的二进制代码，内存由系统管理\n\n## 可执行分段\n一个程序本质上都是由 bss段、data段、text段三个组成的。\n\n- `text`\n  \n  这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。\n  在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等\n\n- `date`\n\n  存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。\n  也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.\n  数据段属于静态内存分配.\n\n- `bss`\n  bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。\n  bss是英文Block Started by Symbol的简称。\n  bss段属于静态内存分配。\n  已经定义但没赋初值的全局变量和静态变量存放在这个区域。\n\n> `text` 段在内存中被映射为只读，但 `date` 段与 `bss` 段是可写的.\n\n\n![m](../imgs/memory.gif)\n\n\n> 代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念\n","slug":"c-memory","published":1,"updated":"2022-01-03T15:22:16.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfm0005079y88jj6m7r","content":"<h2 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h2><ul>\n<li><p>栈区（stack）:</p>\n<p>栈又称堆栈，是用户存放程序临时创建的局部变量,<br>存放函数形参和局部变量（auto类型），由编译器自动分配和释放。</p>\n<p>在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p>\n<p>由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。</p>\n</li>\n</ul>\n<ul>\n<li><p>堆区（heap）:</p>\n<p>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。<br>该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。<br>如果程序员没有手动释放，那么程序结束时可能由OS回收。</p>\n</li>\n<li><p>全局/静态存储区：</p>\n<p>存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。</p>\n</li>\n<li><p>文字常量区：</p>\n<p>常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。</p>\n</li>\n<li><p>程序代码区：</p>\n<p>存放程序的二进制代码，内存由系统管理</p>\n</li>\n</ul>\n<h2 id=\"可执行分段\"><a href=\"#可执行分段\" class=\"headerlink\" title=\"可执行分段\"></a>可执行分段</h2><p>一个程序本质上都是由 bss段、data段、text段三个组成的。</p>\n<ul>\n<li><p><code>text</code></p>\n<p>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。<br>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等</p>\n</li>\n<li><p><code>date</code></p>\n<p>存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。<br>也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.<br>数据段属于静态内存分配.</p>\n</li>\n<li><p><code>bss</code><br>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。<br>bss是英文Block Started by Symbol的简称。<br>bss段属于静态内存分配。<br>已经定义但没赋初值的全局变量和静态变量存放在这个区域。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>text</code> 段在内存中被映射为只读，但 <code>date</code> 段与 <code>bss</code> 段是可写的.</p>\n</blockquote>\n<p><img src=\"../imgs/memory.gif\" alt=\"m\"></p>\n<blockquote>\n<p>代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h2><ul>\n<li><p>栈区（stack）:</p>\n<p>栈又称堆栈，是用户存放程序临时创建的局部变量,<br>存放函数形参和局部变量（auto类型），由编译器自动分配和释放。</p>\n<p>在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p>\n<p>由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。</p>\n</li>\n</ul>\n<ul>\n<li><p>堆区（heap）:</p>\n<p>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。<br>该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。<br>如果程序员没有手动释放，那么程序结束时可能由OS回收。</p>\n</li>\n<li><p>全局/静态存储区：</p>\n<p>存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块。</p>\n</li>\n<li><p>文字常量区：</p>\n<p>常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。</p>\n</li>\n<li><p>程序代码区：</p>\n<p>存放程序的二进制代码，内存由系统管理</p>\n</li>\n</ul>\n<h2 id=\"可执行分段\"><a href=\"#可执行分段\" class=\"headerlink\" title=\"可执行分段\"></a>可执行分段</h2><p>一个程序本质上都是由 bss段、data段、text段三个组成的。</p>\n<ul>\n<li><p><code>text</code></p>\n<p>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。<br>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等</p>\n</li>\n<li><p><code>date</code></p>\n<p>存放在编译阶段（而非运行时）就能确定的数据，可读可写, 是指用来存放程序中已初始化的全局变量的一块内存区域。<br>也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域.<br>数据段属于静态内存分配.</p>\n</li>\n<li><p><code>bss</code><br>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。<br>bss是英文Block Started by Symbol的简称。<br>bss段属于静态内存分配。<br>已经定义但没赋初值的全局变量和静态变量存放在这个区域。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>text</code> 段在内存中被映射为只读，但 <code>date</code> 段与 <code>bss</code> 段是可写的.</p>\n</blockquote>\n<p><img src=\"../imgs/memory.gif\" alt=\"m\"></p>\n<blockquote>\n<p>代码段，数据段，堆栈段是cpu级别的概念，五大分区属于语言级别的概念</p>\n</blockquote>\n"},{"title":"huawei adb","date":"2021-12-04T17:03:46.000Z","_content":"\n\n\n## 环境\n* 系统:Manjaro\n* 桌面:GNOME\n\n## ADB链接手机\nUSB连接具体的解决办法如下：\n\n### 1、打开拨号界面,输入: `*#*#2846579#*#*`。自动进入工程菜单,选择后台设置——>usb端口设置——>生产模式.\n\n### 2、打开调试\n\n设置--系统和更新--开发者选项--打开调试.\n\n### 3、USB连接方式\n\n选择传输文件\n\n### 4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\n\n### 5、回到adb命令下查看是否已经连接上了\n```bash\nadb devices\n```\n","source":"_posts/huawei-adb.md","raw":"---\ntitle: huawei adb \ndate: 2021-12-05 01:03:46\ntags:\n    - adb\n---\n\n\n\n## 环境\n* 系统:Manjaro\n* 桌面:GNOME\n\n## ADB链接手机\nUSB连接具体的解决办法如下：\n\n### 1、打开拨号界面,输入: `*#*#2846579#*#*`。自动进入工程菜单,选择后台设置——>usb端口设置——>生产模式.\n\n### 2、打开调试\n\n设置--系统和更新--开发者选项--打开调试.\n\n### 3、USB连接方式\n\n选择传输文件\n\n### 4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\n\n### 5、回到adb命令下查看是否已经连接上了\n```bash\nadb devices\n```\n","slug":"huawei-adb","published":1,"updated":"2021-12-04T17:06:07.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfn0006079yavje26t0","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统:Manjaro</li>\n<li>桌面:GNOME</li>\n</ul>\n<h2 id=\"ADB链接手机\"><a href=\"#ADB链接手机\" class=\"headerlink\" title=\"ADB链接手机\"></a>ADB链接手机</h2><p>USB连接具体的解决办法如下：</p>\n<h3 id=\"1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\"><a href=\"#1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\" class=\"headerlink\" title=\"1、打开拨号界面,输入: *#*#2846579#*#*。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.\"></a>1、打开拨号界面,输入: <code>*#*#2846579#*#*</code>。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.</h3><h3 id=\"2、打开调试\"><a href=\"#2、打开调试\" class=\"headerlink\" title=\"2、打开调试\"></a>2、打开调试</h3><p>设置–系统和更新–开发者选项–打开调试.</p>\n<h3 id=\"3、USB连接方式\"><a href=\"#3、USB连接方式\" class=\"headerlink\" title=\"3、USB连接方式\"></a>3、USB连接方式</h3><p>选择传输文件</p>\n<h3 id=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"><a href=\"#4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\" class=\"headerlink\" title=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"></a>4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备</h3><h3 id=\"5、回到adb命令下查看是否已经连接上了\"><a href=\"#5、回到adb命令下查看是否已经连接上了\" class=\"headerlink\" title=\"5、回到adb命令下查看是否已经连接上了\"></a>5、回到adb命令下查看是否已经连接上了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统:Manjaro</li>\n<li>桌面:GNOME</li>\n</ul>\n<h2 id=\"ADB链接手机\"><a href=\"#ADB链接手机\" class=\"headerlink\" title=\"ADB链接手机\"></a>ADB链接手机</h2><p>USB连接具体的解决办法如下：</p>\n<h3 id=\"1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\"><a href=\"#1、打开拨号界面-输入-2846579-。自动进入工程菜单-选择后台设置——-gt-usb端口设置——-gt-生产模式\" class=\"headerlink\" title=\"1、打开拨号界面,输入: *#*#2846579#*#*。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.\"></a>1、打开拨号界面,输入: <code>*#*#2846579#*#*</code>。自动进入工程菜单,选择后台设置——&gt;usb端口设置——&gt;生产模式.</h3><h3 id=\"2、打开调试\"><a href=\"#2、打开调试\" class=\"headerlink\" title=\"2、打开调试\"></a>2、打开调试</h3><p>设置–系统和更新–开发者选项–打开调试.</p>\n<h3 id=\"3、USB连接方式\"><a href=\"#3、USB连接方式\" class=\"headerlink\" title=\"3、USB连接方式\"></a>3、USB连接方式</h3><p>选择传输文件</p>\n<h3 id=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"><a href=\"#4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\" class=\"headerlink\" title=\"4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备\"></a>4、在设置中搜索HDB，打开允许HiSuite通过HDB连接设备</h3><h3 id=\"5、回到adb命令下查看是否已经连接上了\"><a href=\"#5、回到adb命令下查看是否已经连接上了\" class=\"headerlink\" title=\"5、回到adb命令下查看是否已经连接上了\"></a>5、回到adb命令下查看是否已经连接上了</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n"},{"title":"elf简介","date":"2022-01-15T10:03:28.000Z","_content":"\n## 回顾\n\n程序的转换处理过程:\n\n1. C代码 hello.c:\n\n```C\n#include <stdio.h>\n\nint main() {\n    printf(\"hello!\");\n}\n```\n2. 预处理\n\n```bash\n$ gcc -E hello.c -o hello.i\n# 0 \"hello.c\"\n# 0 \"<built-in>\"\n# 0 \"<command-line>\"\n# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n# 0 \"<command-line>\" 2\n# 1 \"hello.c\"\n# 1 \"/usr/include/stdio.h\" 1 3 4\n# 27 \"/usr/include/stdio.h\" 3 4\n# 1 \"/usr/include/bits/libc-header-start.h\" 1 3 4\n# 33 \"/usr/include/bits/libc-header-start.h\" 3 4\n# 1 \"/usr/include/features.h\" 1 3 4\n# 473 \"/usr/include/features.h\" 3 4\n# 1 \"/usr/include/sys/cdefs.h\" 1 3 4\n# 462 \"/usr/include/sys/cdefs.h\" 3 4\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\n# 463 \"/usr/include/sys/cdefs.h\" 2 3 4\n# 1 \"/usr/include/bits/long-double.h\" 1 3 4\n# 464 \"/usr/include/sys/cdefs.h\" 2 3 4\n# 474 \"/usr/include/features.h\" 2 3 4\n# 497 \"/usr/include/features.h\" 3 4\n# 1 \"/usr/include/gnu/stubs.h\" 1 3 4\n# 10 \"/usr/include/gnu/stubs.h\" 3 4\n# 1 \"/usr/include/gnu/stubs-64.h\" 1 3 4\n# 11 \"/usr/include/gnu/stubs.h\" 2 3 4\n# 498 \"/usr/include/features.h\" 2 3 4\n# 34 \"/usr/include/bits/libc-header-start.h\" 2 3 4\n# 28 \"/usr/include/stdio.h\" 2 3 4\n\n\n\n\n\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h\" 1 3 4\n# 209 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h\" 3 4\n\n# 209 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h\" 3 4\ntypedef long unsigned int size_t;\n# 34 \"/usr/include/stdio.h\" 2 3 4\n\n\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h\" 1 3 4\n# 40 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h\" 3 4\ntypedef __builtin_va_list __gnuc_va_list;\n# 37 \"/usr/include/stdio.h\" 2 3 4\n\n# 1 \"/usr/include/bits/types.h\" 1 3 4\n# 27 \"/usr/include/bits/types.h\" 3 4\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\n# 28 \"/usr/include/bits/types.h\" 2 3 4\n# 1 \"/usr/include/bits/timesize.h\" 1 3 4\n# 29 \"/usr/include/bits/types.h\" 2 3 4\n\n\ntypedef unsigned char __u_char;\ntypedef unsigned short int __u_short;\ntypedef unsigned int __u_int;\ntypedef unsigned long int __u_long;\n\n\ntypedef signed char __int8_t;\ntypedef unsigned char __uint8_t;\ntypedef signed short int __int16_t;\ntypedef unsigned short int __uint16_t;\ntypedef signed int __int32_t;\ntypedef unsigned int __uint32_t;\n\ntypedef signed long int __int64_t;\ntypedef unsigned long int __uint64_t;\n\n\n\n\n\n\ntypedef __int8_t __int_least8_t;\ntypedef __uint8_t __uint_least8_t;\ntypedef __int16_t __int_least16_t;\ntypedef __uint16_t __uint_least16_t;\ntypedef __int32_t __int_least32_t;\ntypedef __uint32_t __uint_least32_t;\ntypedef __int64_t __int_least64_t;\ntypedef __uint64_t __uint_least64_t;\n\n\n\ntypedef long int __quad_t;\ntypedef unsigned long int __u_quad_t;\n\n\n\n\n\n\n\ntypedef long int __intmax_t;\ntypedef unsigned long int __uintmax_t;\n# 141 \"/usr/include/bits/types.h\" 3 4\n# 1 \"/usr/include/bits/typesizes.h\" 1 3 4\n# 142 \"/usr/include/bits/types.h\" 2 3 4\n# 1 \"/usr/include/bits/time64.h\" 1 3 4\n# 143 \"/usr/include/bits/types.h\" 2 3 4\n\n\ntypedef unsigned long int __dev_t;\ntypedef unsigned int __uid_t;\ntypedef unsigned int __gid_t;\ntypedef unsigned long int __ino_t;\ntypedef unsigned long int __ino64_t;\ntypedef unsigned int __mode_t;\ntypedef unsigned long int __nlink_t;\ntypedef long int __off_t;\ntypedef long int __off64_t;\ntypedef int __pid_t;\ntypedef struct { int __val[2]; } __fsid_t;\ntypedef long int __clock_t;\ntypedef unsigned long int __rlim_t;\ntypedef unsigned long int __rlim64_t;\ntypedef unsigned int __id_t;\ntypedef long int __time_t;\ntypedef unsigned int __useconds_t;\ntypedef long int __suseconds_t;\ntypedef long int __suseconds64_t;\n\ntypedef int __daddr_t;\ntypedef int __key_t;\n\n\ntypedef int __clockid_t;\n\n\ntypedef void * __timer_t;\n\n\ntypedef long int __blksize_t;\n\n\n\n\ntypedef long int __blkcnt_t;\ntypedef long int __blkcnt64_t;\n\n\ntypedef unsigned long int __fsblkcnt_t;\ntypedef unsigned long int __fsblkcnt64_t;\n\n\ntypedef unsigned long int __fsfilcnt_t;\ntypedef unsigned long int __fsfilcnt64_t;\n\n\ntypedef long int __fsword_t;\n\ntypedef long int __ssize_t;\n\n\ntypedef long int __syscall_slong_t;\n\ntypedef unsigned long int __syscall_ulong_t;\n\n\n\ntypedef __off64_t __loff_t;\ntypedef char *__caddr_t;\n\n\ntypedef long int __intptr_t;\n\n\ntypedef unsigned int __socklen_t;\n\n\n\n\ntypedef int __sig_atomic_t;\n# 39 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/__fpos_t.h\" 1 3 4\n\n\n\n\n# 1 \"/usr/include/bits/types/__mbstate_t.h\" 1 3 4\n# 13 \"/usr/include/bits/types/__mbstate_t.h\" 3 4\ntypedef struct\n{\n  int __count;\n  union\n  {\n    unsigned int __wch;\n    char __wchb[4];\n  } __value;\n} __mbstate_t;\n# 6 \"/usr/include/bits/types/__fpos_t.h\" 2 3 4\n\n\n\n\ntypedef struct _G_fpos_t\n{\n  __off_t __pos;\n  __mbstate_t __state;\n} __fpos_t;\n# 40 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/__fpos64_t.h\" 1 3 4\n# 10 \"/usr/include/bits/types/__fpos64_t.h\" 3 4\ntypedef struct _G_fpos64_t\n{\n  __off64_t __pos;\n  __mbstate_t __state;\n} __fpos64_t;\n# 41 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/__FILE.h\" 1 3 4\n\n\n\nstruct _IO_FILE;\ntypedef struct _IO_FILE __FILE;\n# 42 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/FILE.h\" 1 3 4\n\n\n\nstruct _IO_FILE;\n\n\ntypedef struct _IO_FILE FILE;\n# 43 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/struct_FILE.h\" 1 3 4\n# 35 \"/usr/include/bits/types/struct_FILE.h\" 3 4\nstruct _IO_FILE;\nstruct _IO_marker;\nstruct _IO_codecvt;\nstruct _IO_wide_data;\n\n\n\n\ntypedef void _IO_lock_t;\n\n\n\n\n\nstruct _IO_FILE\n{\n  int _flags;\n\n\n  char *_IO_read_ptr;\n  char *_IO_read_end;\n  char *_IO_read_base;\n  char *_IO_write_base;\n  char *_IO_write_ptr;\n  char *_IO_write_end;\n  char *_IO_buf_base;\n  char *_IO_buf_end;\n\n\n  char *_IO_save_base;\n  char *_IO_backup_base;\n  char *_IO_save_end;\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n  int _flags2;\n  __off_t _old_offset;\n\n\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  _IO_lock_t *_lock;\n\n\n\n\n\n\n\n  __off64_t _offset;\n\n  struct _IO_codecvt *_codecvt;\n  struct _IO_wide_data *_wide_data;\n  struct _IO_FILE *_freeres_list;\n  void *_freeres_buf;\n  size_t __pad5;\n  int _mode;\n\n  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n};\n# 44 \"/usr/include/stdio.h\" 2 3 4\n# 52 \"/usr/include/stdio.h\" 3 4\ntypedef __gnuc_va_list va_list;\n# 63 \"/usr/include/stdio.h\" 3 4\ntypedef __off_t off_t;\n# 77 \"/usr/include/stdio.h\" 3 4\ntypedef __ssize_t ssize_t;\n\n\n\n\n\n\ntypedef __fpos_t fpos_t;\n# 133 \"/usr/include/stdio.h\" 3 4\n# 1 \"/usr/include/bits/stdio_lim.h\" 1 3 4\n# 134 \"/usr/include/stdio.h\" 2 3 4\n\n\n\nextern FILE *stdin;\nextern FILE *stdout;\nextern FILE *stderr;\n\n\n\n\n\n\nextern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));\n\nextern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\nextern int renameat (int __oldfd, const char *__old, int __newfd,\n       const char *__new) __attribute__ ((__nothrow__ , __leaf__));\n# 173 \"/usr/include/stdio.h\" 3 4\nextern FILE *tmpfile (void) ;\n# 187 \"/usr/include/stdio.h\" 3 4\nextern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\nextern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;\n# 204 \"/usr/include/stdio.h\" 3 4\nextern char *tempnam (const char *__dir, const char *__pfx)\n     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;\n\n\n\n\n\n\n\nextern int fclose (FILE *__stream);\n\n\n\n\nextern int fflush (FILE *__stream);\n# 227 \"/usr/include/stdio.h\" 3 4\nextern int fflush_unlocked (FILE *__stream);\n# 246 \"/usr/include/stdio.h\" 3 4\nextern FILE *fopen (const char *__restrict __filename,\n      const char *__restrict __modes) ;\n\n\n\n\nextern FILE *freopen (const char *__restrict __filename,\n        const char *__restrict __modes,\n        FILE *__restrict __stream) ;\n# 279 \"/usr/include/stdio.h\" 3 4\nextern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;\n# 292 \"/usr/include/stdio.h\" 3 4\nextern FILE *fmemopen (void *__s, size_t __len, const char *__modes)\n  __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\nextern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\n\nextern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\nextern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,\n      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\n\nextern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,\n         size_t __size) __attribute__ ((__nothrow__ , __leaf__));\n\n\nextern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\n\n\n\n\nextern int fprintf (FILE *__restrict __stream,\n      const char *__restrict __format, ...);\n\n\n\n\nextern int printf (const char *__restrict __format, ...);\n\nextern int sprintf (char *__restrict __s,\n      const char *__restrict __format, ...) __attribute__ ((__nothrow__));\n\n\n\n\n\nextern int vfprintf (FILE *__restrict __s, const char *__restrict __format,\n       __gnuc_va_list __arg);\n\n\n\n\nextern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);\n\nextern int vsprintf (char *__restrict __s, const char *__restrict __format,\n       __gnuc_va_list __arg) __attribute__ ((__nothrow__));\n\n\n\nextern int snprintf (char *__restrict __s, size_t __maxlen,\n       const char *__restrict __format, ...)\n     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));\n\nextern int vsnprintf (char *__restrict __s, size_t __maxlen,\n        const char *__restrict __format, __gnuc_va_list __arg)\n     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));\n# 379 \"/usr/include/stdio.h\" 3 4\nextern int vdprintf (int __fd, const char *__restrict __fmt,\n       __gnuc_va_list __arg)\n     __attribute__ ((__format__ (__printf__, 2, 0)));\nextern int dprintf (int __fd, const char *__restrict __fmt, ...)\n     __attribute__ ((__format__ (__printf__, 2, 3)));\n\n\n\n\n\n\n\nextern int fscanf (FILE *__restrict __stream,\n     const char *__restrict __format, ...) ;\n\n\n\n\nextern int scanf (const char *__restrict __format, ...) ;\n\nextern int sscanf (const char *__restrict __s,\n     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\n\n\n# 1 \"/usr/include/bits/floatn.h\" 1 3 4\n# 119 \"/usr/include/bits/floatn.h\" 3 4\n# 1 \"/usr/include/bits/floatn-common.h\" 1 3 4\n# 24 \"/usr/include/bits/floatn-common.h\" 3 4\n# 1 \"/usr/include/bits/long-double.h\" 1 3 4\n# 25 \"/usr/include/bits/floatn-common.h\" 2 3 4\n# 120 \"/usr/include/bits/floatn.h\" 2 3 4\n# 407 \"/usr/include/stdio.h\" 2 3 4\n\n\n\nextern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ (\"\" \"__isoc99_fscanf\")\n\n                               ;\nextern int scanf (const char *__restrict __format, ...) __asm__ (\"\" \"__isoc99_scanf\")\n                              ;\nextern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ (\"\" \"__isoc99_sscanf\") __attribute__ ((__nothrow__ , __leaf__))\n\n                      ;\n# 435 \"/usr/include/stdio.h\" 3 4\nextern int vfscanf (FILE *__restrict __s, const char *__restrict __format,\n      __gnuc_va_list __arg)\n     __attribute__ ((__format__ (__scanf__, 2, 0))) ;\n\n\n\n\n\nextern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)\n     __attribute__ ((__format__ (__scanf__, 1, 0))) ;\n\n\nextern int vsscanf (const char *__restrict __s,\n      const char *__restrict __format, __gnuc_va_list __arg)\n     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));\n\n\n\n\n\nextern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc99_vfscanf\")\n\n\n\n     __attribute__ ((__format__ (__scanf__, 2, 0))) ;\nextern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc99_vscanf\")\n\n     __attribute__ ((__format__ (__scanf__, 1, 0))) ;\nextern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc99_vsscanf\") __attribute__ ((__nothrow__ , __leaf__))\n\n\n\n     __attribute__ ((__format__ (__scanf__, 2, 0)));\n# 489 \"/usr/include/stdio.h\" 3 4\nextern int fgetc (FILE *__stream);\nextern int getc (FILE *__stream);\n\n\n\n\n\nextern int getchar (void);\n\n\n\n\n\n\nextern int getc_unlocked (FILE *__stream);\nextern int getchar_unlocked (void);\n# 514 \"/usr/include/stdio.h\" 3 4\nextern int fgetc_unlocked (FILE *__stream);\n# 525 \"/usr/include/stdio.h\" 3 4\nextern int fputc (int __c, FILE *__stream);\nextern int putc (int __c, FILE *__stream);\n\n\n\n\n\nextern int putchar (int __c);\n# 541 \"/usr/include/stdio.h\" 3 4\nextern int fputc_unlocked (int __c, FILE *__stream);\n\n\n\n\n\n\n\nextern int putc_unlocked (int __c, FILE *__stream);\nextern int putchar_unlocked (int __c);\n\n\n\n\n\n\nextern int getw (FILE *__stream);\n\n\nextern int putw (int __w, FILE *__stream);\n\n\n\n\n\n\n\nextern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)\n     __attribute__ ((__access__ (__write_only__, 1, 2)));\n# 608 \"/usr/include/stdio.h\" 3 4\nextern __ssize_t __getdelim (char **__restrict __lineptr,\n                             size_t *__restrict __n, int __delimiter,\n                             FILE *__restrict __stream) ;\nextern __ssize_t getdelim (char **__restrict __lineptr,\n                           size_t *__restrict __n, int __delimiter,\n                           FILE *__restrict __stream) ;\n\n\n\n\n\n\n\nextern __ssize_t getline (char **__restrict __lineptr,\n                          size_t *__restrict __n,\n                          FILE *__restrict __stream) ;\n\n\n\n\n\n\n\nextern int fputs (const char *__restrict __s, FILE *__restrict __stream);\n\n\n\n\n\nextern int puts (const char *__s);\n\n\n\n\n\n\nextern int ungetc (int __c, FILE *__stream);\n\n\n\n\n\n\nextern size_t fread (void *__restrict __ptr, size_t __size,\n       size_t __n, FILE *__restrict __stream) ;\n\n\n\n\nextern size_t fwrite (const void *__restrict __ptr, size_t __size,\n        size_t __n, FILE *__restrict __s);\n# 678 \"/usr/include/stdio.h\" 3 4\nextern size_t fread_unlocked (void *__restrict __ptr, size_t __size,\n         size_t __n, FILE *__restrict __stream) ;\nextern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,\n          size_t __n, FILE *__restrict __stream);\n\n\n\n\n\n\n\nextern int fseek (FILE *__stream, long int __off, int __whence);\n\n\n\n\nextern long int ftell (FILE *__stream) ;\n\n\n\n\nextern void rewind (FILE *__stream);\n# 712 \"/usr/include/stdio.h\" 3 4\nextern int fseeko (FILE *__stream, __off_t __off, int __whence);\n\n\n\n\nextern __off_t ftello (FILE *__stream) ;\n# 736 \"/usr/include/stdio.h\" 3 4\nextern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);\n\n\n\n\nextern int fsetpos (FILE *__stream, const fpos_t *__pos);\n# 762 \"/usr/include/stdio.h\" 3 4\nextern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n\nextern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\nextern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\nextern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\nextern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\nextern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\n\n\n\nextern void perror (const char *__s);\n\n\n\n\nextern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\nextern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n# 799 \"/usr/include/stdio.h\" 3 4\nextern FILE *popen (const char *__command, const char *__modes) ;\n\n\n\n\n\nextern int pclose (FILE *__stream);\n\n\n\n\n\nextern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));\n# 839 \"/usr/include/stdio.h\" 3 4\nextern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\nextern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\nextern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n# 857 \"/usr/include/stdio.h\" 3 4\nextern int __uflow (FILE *);\nextern int __overflow (FILE *, int);\n# 874 \"/usr/include/stdio.h\" 3 4\n\n# 2 \"hello.c\" 2\n\n\n# 3 \"hello.c\"\nint main() {\n    printf(\"hello!\");\n}\n\n```\n3. 汇编\n```bash\n$ gcc -S hello.\n```\n查看生成内容\n\n```bash\n\n\t.file\t\"hello.c\"\n\t.text\n\t.section\t.rodata\n.LC0:\n\t.string\t\"hello!\"\n\t.text\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n.LFB0:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tleaq\t.LC0(%rip), %rax\n\tmovq\t%rax, %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tmovl\t$0, %eax\n\tpopq\t%rbp\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tmain, .-main\n\t.ident\t\"GCC: (GNU) 11.1.0\"\n\t.section\t.note.GNU-stack,\"\",@progbits\n```\n\n4. 机器码\n\n```bash\ngcc -C hello.s\n```\n* file 查看\n    ```bash\n    hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped\n    ```\n\n* objdump 查看\n  ```bash\n    hello.o:     file format elf64-x86-64\n    hello.o\n  ```\n\n* nm 查看\n  ```bash\n                     U _GLOBAL_OFFSET_TABLE_\n    0000000000000000 T main\n                     U printf\n\n  ```\n\n* readelf\n```bash\nELF Header: \n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              REL (Relocatable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x0\n  Start of program headers:          0 (bytes into file)\n  Start of section headers:          640 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           0 (bytes)\n  Number of program headers:         0\n  Size of section headers:           64 (bytes)\n  Number of section headers:         14\n  Section header string table index: 13\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       000000000000001f  0000000000000000  AX       0     0     1\n  [ 2] .rela.text        RELA             0000000000000000  000001c0\n       0000000000000030  0000000000000018   I      11     1     8\n  [ 3] .data             PROGBITS         0000000000000000  0000005f\n       0000000000000000  0000000000000000  WA       0     0     1\n  [ 4] .bss              NOBITS           0000000000000000  0000005f\n       0000000000000000  0000000000000000  WA       0     0     1\n  [ 5] .rodata           PROGBITS         0000000000000000  0000005f\n       0000000000000007  0000000000000000   A       0     0     1\n  [ 6] .comment          PROGBITS         0000000000000000  00000066\n       0000000000000013  0000000000000001  MS       0     0     1\n  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  00000079\n       0000000000000000  0000000000000000           0     0     1\n  [ 8] .note.gnu.pr[...] NOTE             0000000000000000  00000080\n       0000000000000030  0000000000000000   A       0     0     8\n  [ 9] .eh_frame         PROGBITS         0000000000000000  000000b0\n       0000000000000038  0000000000000000   A       0     0     8\n  [10] .rela.eh_frame    RELA             0000000000000000  000001f0\n       0000000000000018  0000000000000018   I      11     9     8\n  [11] .symtab           SYMTAB           0000000000000000  000000e8\n       00000000000000a8  0000000000000018          12     4     8\n  [12] .strtab           STRTAB           0000000000000000  00000190\n       000000000000002b  0000000000000000           0     0     1\n  [13] .shstrtab         STRTAB           0000000000000000  00000208\n       0000000000000074  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)\n\nThere are no section groups in this file.\n\nThere are no program headers in this file.\n\nThere is no dynamic section in this file.\n\nRelocation section '.rela.text' at offset 0x1c0 contains 2 entries:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000000007  000300000002 R_X86_64_PC32     0000000000000000 .rodata - 4\n000000000014  000600000004 R_X86_64_PLT32    0000000000000000 printf - 4\n\nRelocation section '.rela.eh_frame' at offset 0x1f0 contains 1 entry:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 7 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n     4: 0000000000000000    31 FUNC    GLOBAL DEFAULT    1 main\n     5: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf\n\nNo version information found in this file.\n\nDisplaying notes found in: .note.gnu.property\n  Owner                Data size \tDescription\n  GNU                  0x00000020\tNT_GNU_PROPERTY_TYPE_0\n      Properties: x86 ISA used: \n\tx86 feature used: x86\n\n```\n\n5. 链接\n```bash\ngcc hello.o -o hello\n```\n\n* file 查看\n\n```bash\nhello: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=92f33896a3687559674a0d0f204f68984bfd8ee3, for GNU/Linux 4.4.0, not stripped\n```\n* readelf：\n    ```bash\n    ELF Header:\n    Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n    Class:                             ELF64\n    Data:                              2's complement, little endian\n    Version:                           1 (current)\n    OS/ABI:                            UNIX - System V\n    ABI Version:                       0\n    Type:                              DYN (Shared object file)\n    Machine:                           Advanced Micro Devices X86-64\n    Version:                           0x1\n    Entry point address:               0x1040\n    Start of program headers:          64 (bytes into file)\n    Start of section headers:          14168 (bytes into file)\n    Flags:                             0x0\n    Size of this header:               64 (bytes)\n    Size of program headers:           56 (bytes)\n    Number of program headers:         13\n    Size of section headers:           64 (bytes)\n    Number of section headers:         30\n    Section header string table index: 29\n\n    Section Headers:\n    [Nr] Name              Type             Address           Offset\n        Size              EntSize          Flags  Link  Info  Align\n    [ 0]                   NULL             0000000000000000  00000000\n        0000000000000000  0000000000000000           0     0     0\n    [ 1] .interp           PROGBITS         0000000000000318  00000318\n        000000000000001c  0000000000000000   A       0     0     1\n    [ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338\n        0000000000000040  0000000000000000   A       0     0     8\n    [ 3] .note.gnu.bu[...] NOTE             0000000000000378  00000378\n        0000000000000024  0000000000000000   A       0     0     4\n    [ 4] .note.ABI-tag     NOTE             000000000000039c  0000039c\n        0000000000000020  0000000000000000   A       0     0     4\n    [ 5] .gnu.hash         GNU_HASH         00000000000003c0  000003c0\n        000000000000001c  0000000000000000   A       6     0     8\n    [ 6] .dynsym           DYNSYM           00000000000003e0  000003e0\n        00000000000000a8  0000000000000018   A       7     1     8\n    [ 7] .dynstr           STRTAB           0000000000000488  00000488\n        0000000000000084  0000000000000000   A       0     0     1\n    [ 8] .gnu.version      VERSYM           000000000000050c  0000050c\n        000000000000000e  0000000000000002   A       6     0     2\n    [ 9] .gnu.version_r    VERNEED          0000000000000520  00000520\n        0000000000000020  0000000000000000   A       7     1     8\n    [10] .rela.dyn         RELA             0000000000000540  00000540\n        00000000000000c0  0000000000000018   A       6     0     8\n    [11] .rela.plt         RELA             0000000000000600  00000600\n        0000000000000018  0000000000000018  AI       6    23     8\n    [12] .init             PROGBITS         0000000000001000  00001000\n        000000000000001b  0000000000000000  AX       0     0     4\n    [13] .plt              PROGBITS         0000000000001020  00001020\n        0000000000000020  0000000000000010  AX       0     0     16\n    [14] .text             PROGBITS         0000000000001040  00001040\n        0000000000000195  0000000000000000  AX       0     0     16\n    [15] .fini             PROGBITS         00000000000011d8  000011d8\n        000000000000000d  0000000000000000  AX       0     0     4\n    [16] .rodata           PROGBITS         0000000000002000  00002000\n        000000000000000b  0000000000000000   A       0     0     4\n    [17] .eh_frame_hdr     PROGBITS         000000000000200c  0000200c\n        0000000000000034  0000000000000000   A       0     0     4\n    [18] .eh_frame         PROGBITS         0000000000002040  00002040\n        00000000000000d8  0000000000000000   A       0     0     8\n    [19] .init_array       INIT_ARRAY       0000000000003de8  00002de8\n        0000000000000008  0000000000000008  WA       0     0     8\n    [20] .fini_array       FINI_ARRAY       0000000000003df0  00002df0\n        0000000000000008  0000000000000008  WA       0     0     8\n    [21] .dynamic          DYNAMIC          0000000000003df8  00002df8\n        00000000000001e0  0000000000000010  WA       7     0     8\n    [22] .got              PROGBITS         0000000000003fd8  00002fd8\n        0000000000000028  0000000000000008  WA       0     0     8\n    [23] .got.plt          PROGBITS         0000000000004000  00003000\n        0000000000000020  0000000000000008  WA       0     0     8\n    [24] .data             PROGBITS         0000000000004020  00003020\n        0000000000000010  0000000000000000  WA       0     0     8\n    [25] .bss              NOBITS           0000000000004030  00003030\n        0000000000000008  0000000000000000  WA       0     0     1\n    [26] .comment          PROGBITS         0000000000000000  00003030\n        0000000000000012  0000000000000001  MS       0     0     1\n    [27] .symtab           SYMTAB           0000000000000000  00003048\n        00000000000003d8  0000000000000018          28    22     8\n    [28] .strtab           STRTAB           0000000000000000  00003420\n        000000000000021b  0000000000000000           0     0     1\n    [29] .shstrtab         STRTAB           0000000000000000  0000363b\n        0000000000000116  0000000000000000           0     0     1\n    Key to Flags:\n    W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n    L (link order), O (extra OS processing required), G (group), T (TLS),\n    C (compressed), x (unknown), o (OS specific), E (exclude),\n    l (large), p (processor specific)\n\n    There are no section groups in this file.\n\n    Program Headers:\n    Type           Offset             VirtAddr           PhysAddr\n                    FileSiz            MemSiz              Flags  Align\n    PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040\n                    0x00000000000002d8 0x00000000000002d8  R      0x8\n    INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318\n                    0x000000000000001c 0x000000000000001c  R      0x1\n        [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]\n    LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000\n                    0x0000000000000618 0x0000000000000618  R      0x1000\n    LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000\n                    0x00000000000001e5 0x00000000000001e5  R E    0x1000\n    LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000\n                    0x0000000000000118 0x0000000000000118  R      0x1000\n    LOAD           0x0000000000002de8 0x0000000000003de8 0x0000000000003de8\n                    0x0000000000000248 0x0000000000000250  RW     0x1000\n    DYNAMIC        0x0000000000002df8 0x0000000000003df8 0x0000000000003df8\n                    0x00000000000001e0 0x00000000000001e0  RW     0x8\n    NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338\n                    0x0000000000000040 0x0000000000000040  R      0x8\n    NOTE           0x0000000000000378 0x0000000000000378 0x0000000000000378\n                    0x0000000000000044 0x0000000000000044  R      0x4\n    GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338\n                    0x0000000000000040 0x0000000000000040  R      0x8\n    GNU_EH_FRAME   0x000000000000200c 0x000000000000200c 0x000000000000200c\n                    0x0000000000000034 0x0000000000000034  R      0x4\n    GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                    0x0000000000000000 0x0000000000000000  RW     0x10\n    GNU_RELRO      0x0000000000002de8 0x0000000000003de8 0x0000000000003de8\n                    0x0000000000000218 0x0000000000000218  R      0x1\n\n    Section to Segment mapping:\n    Segment Sections...\n    00     \n    01     .interp \n    02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt \n    03     .init .plt .text .fini \n    04     .rodata .eh_frame_hdr .eh_frame \n    05     .init_array .fini_array .dynamic .got .got.plt .data .bss \n    06     .dynamic \n    07     .note.gnu.property \n    08     .note.gnu.build-id .note.ABI-tag \n    09     .note.gnu.property \n    10     .eh_frame_hdr \n    11     \n    12     .init_array .fini_array .dynamic .got \n\n    Dynamic section at offset 0x2df8 contains 26 entries:\n    Tag        Type                         Name/Value\n    0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n    0x000000000000000c (INIT)               0x1000\n    0x000000000000000d (FINI)               0x11d8\n    0x0000000000000019 (INIT_ARRAY)         0x3de8\n    0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\n    0x000000000000001a (FINI_ARRAY)         0x3df0\n    0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)\n    0x000000006ffffef5 (GNU_HASH)           0x3c0\n    0x0000000000000005 (STRTAB)             0x488\n    0x0000000000000006 (SYMTAB)             0x3e0\n    0x000000000000000a (STRSZ)              132 (bytes)\n    0x000000000000000b (SYMENT)             24 (bytes)\n    0x0000000000000015 (DEBUG)              0x0\n    0x0000000000000003 (PLTGOT)             0x4000\n    0x0000000000000002 (PLTRELSZ)           24 (bytes)\n    0x0000000000000014 (PLTREL)             RELA\n    0x0000000000000017 (JMPREL)             0x600\n    0x0000000000000007 (RELA)               0x540\n    0x0000000000000008 (RELASZ)             192 (bytes)\n    0x0000000000000009 (RELAENT)            24 (bytes)\n    0x000000006ffffffb (FLAGS_1)            Flags: PIE\n    0x000000006ffffffe (VERNEED)            0x520\n    0x000000006fffffff (VERNEEDNUM)         1\n    0x000000006ffffff0 (VERSYM)             0x50c\n    0x000000006ffffff9 (RELACOUNT)          3\n    0x0000000000000000 (NULL)               0x0\n\n    Relocation section '.rela.dyn' at offset 0x540 contains 8 entries:\n    Offset          Info           Type           Sym. Value    Sym. Name + Addend\n    000000003de8  000000000008 R_X86_64_RELATIVE                    1130\n    000000003df0  000000000008 R_X86_64_RELATIVE                    10e0\n    000000004028  000000000008 R_X86_64_RELATIVE                    4028\n    000000003fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTM[...] + 0\n    000000003fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n    000000003fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n    000000003ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCl[...] + 0\n    000000003ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n\n    Relocation section '.rela.plt' at offset 0x600 contains 1 entry:\n    Offset          Info           Type           Sym. Value    Sym. Name + Addend\n    000000004018  000200000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0\n\n    The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\n    Symbol table '.dynsym' contains 7 entries:\n    Num:    Value          Size Type    Bind   Vis      Ndx Name\n        0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n        1: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]\n        2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)\n        3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)\n        4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n        5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]\n        6: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND [...]@GLIBC_2.2.5 (2)\n\n    Symbol table '.symtab' contains 41 entries:\n    Num:    Value          Size Type    Bind   Vis      Ndx Name\n        0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n        1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS abi-note.c\n        2: 000000000000039c    32 OBJECT  LOCAL  DEFAULT    4 __abi_tag\n        3: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS init.c\n        4: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n        5: 0000000000001070     0 FUNC    LOCAL  DEFAULT   14 deregister_tm_clones\n        6: 00000000000010a0     0 FUNC    LOCAL  DEFAULT   14 register_tm_clones\n        7: 00000000000010e0     0 FUNC    LOCAL  DEFAULT   14 __do_global_dtors_aux\n        8: 0000000000004030     1 OBJECT  LOCAL  DEFAULT   25 completed.0\n        9: 0000000000003df0     0 OBJECT  LOCAL  DEFAULT   20 __do_global_dtor[...]\n        10: 0000000000001130     0 FUNC    LOCAL  DEFAULT   14 frame_dummy\n        11: 0000000000003de8     0 OBJECT  LOCAL  DEFAULT   19 __frame_dummy_in[...]\n        12: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c\n        13: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n        14: 0000000000002114     0 OBJECT  LOCAL  DEFAULT   18 __FRAME_END__\n        15: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n        16: 0000000000003df0     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_end\n        17: 0000000000003df8     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC\n        18: 0000000000003de8     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_start\n        19: 000000000000200c     0 NOTYPE  LOCAL  DEFAULT   17 __GNU_EH_FRAME_HDR\n        20: 0000000000004000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_\n        21: 0000000000001000     0 FUNC    LOCAL  DEFAULT   12 _init\n        22: 00000000000011d0     5 FUNC    GLOBAL DEFAULT   14 __libc_csu_fini\n        23: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]\n        24: 0000000000004020     0 NOTYPE  WEAK   DEFAULT   24 data_start\n        25: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   24 _edata\n        26: 00000000000011d8     0 FUNC    GLOBAL HIDDEN    15 _fini\n        27: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5\n        28: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_mai[...]\n        29: 0000000000004020     0 NOTYPE  GLOBAL DEFAULT   24 __data_start\n        30: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n        31: 0000000000004028     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle\n        32: 0000000000002000     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used\n        33: 0000000000001160   101 FUNC    GLOBAL DEFAULT   14 __libc_csu_init\n        34: 0000000000004038     0 NOTYPE  GLOBAL DEFAULT   25 _end\n        35: 0000000000001040    47 FUNC    GLOBAL DEFAULT   14 _start\n        36: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start\n        37: 0000000000001139    31 FUNC    GLOBAL DEFAULT   14 main\n        38: 0000000000004030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__\n        39: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]\n        40: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@G[...]\n\n    Version symbols section '.gnu.version' contains 7 entries:\n    Addr: 0x000000000000050c  Offset: 0x00050c  Link: 6 (.dynsym)\n    000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   2 (GLIBC_2.2.5)\n    004:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)\n\n    Version needs section '.gnu.version_r' contains 1 entry:\n    Addr: 0x0000000000000520  Offset: 0x000520  Link: 7 (.dynstr)\n    000000: Version: 1  File: libc.so.6  Cnt: 1\n    0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 2\n\n    Displaying notes found in: .note.gnu.property\n    Owner                Data size \tDescription\n    GNU                  0x00000030\tNT_GNU_PROPERTY_TYPE_0\n        Properties: x86 ISA needed: x86-64-baseline\n        x86 feature used: x86\n        x86 ISA used: \n\n    Displaying notes found in: .note.gnu.build-id\n    Owner                Data size \tDescription\n    GNU                  0x00000014\tNT_GNU_BUILD_ID (unique build ID bitstring)\n        Build ID: 92f33896a3687559674a0d0f204f68984bfd8ee3\n\n    Displaying notes found in: .note.ABI-tag\n    Owner                Data size \tDescription\n    GNU                  0x00000010\tNT_GNU_ABI_TAG (ABI version tag)\n        OS: Linux, ABI: 4.4.0\n\n    ```\n* nm\n    ```bash\n    000000000000039c r __abi_tag\n    0000000000004030 B __bss_start\n    0000000000004030 b completed.0\n                    w __cxa_finalize@GLIBC_2.2.5\n    0000000000004020 D __data_start\n    0000000000004020 W data_start\n    0000000000001070 t deregister_tm_clones\n    00000000000010e0 t __do_global_dtors_aux\n    0000000000003df0 d __do_global_dtors_aux_fini_array_entry\n    0000000000004028 D __dso_handle\n    0000000000003df8 d _DYNAMIC\n    0000000000004030 D _edata\n    0000000000004038 B _end\n    00000000000011d8 T _fini\n    0000000000001130 t frame_dummy\n    0000000000003de8 d __frame_dummy_init_array_entry\n    0000000000002114 r __FRAME_END__\n    0000000000004000 d _GLOBAL_OFFSET_TABLE_\n                    w __gmon_start__\n    000000000000200c r __GNU_EH_FRAME_HDR\n    0000000000001000 t _init\n    0000000000003df0 d __init_array_end\n    0000000000003de8 d __init_array_start\n    0000000000002000 R _IO_stdin_used\n                    w _ITM_deregisterTMCloneTable\n                    w _ITM_registerTMCloneTable\n    00000000000011d0 T __libc_csu_fini\n    0000000000001160 T __libc_csu_init\n                    U __libc_start_main@GLIBC_2.2.5\n    0000000000001139 T main\n                    U printf@GLIBC_2.2.5\n    00000000000010a0 t register_tm_clones\n    0000000000001040 T _start\n    0000000000004030 D __TMC_END__\n    ```\n\n## 格式简介\n\n> ELF： executable and linkable format\n\n一种用于可执行文件、目标代码、共享库和核心转储（`core dump`）的标准文件格式。\n首次发布于一个名为 `System V Release 4（SVR4）`的 `Unix` 操作系统版本中关于应用二进制接口（ABI）的规范中，并且此后不久发布于工具接口标准（Tool Interface Standard），随后很快被不同 `Unix` 发行商所接受。1999 年，这种格式被 `86open` 项目选为 `x86` 架构处理器上的 `Unix` 和 类 Unix 系统的标准二进制文件格式。\n\n按照设计，ELF 格式灵活性高、可扩展，并且跨平台。比如它支持不同的字节序和地址范围，所以它不会不兼容某一特别的 CPU 或指令架构。这也使得 ELF 格式能够被运行于众多不同平台的各种操作系统所广泛采纳。\n\n每个 ELF 文件都由一个 ELF 首部和紧跟其后的文件数据部分组成。数据部分可以包含：\n\n* 程序头表（Program header table）：\n  描述 0 个或多个内存段信息\n  > 内存段中包含了用于某个 ELF 文件运行时执行所需的信息，而片段中包含了用于链接和重定位的重要数据。\n    整个文件中的任何一个字节至多只能属于一个片段，也就是说可能存在不属于任何片段的孤立字节。\n* 分段头表（Section header table）：\n  描述 0 段或多段链接与重定位需要的数据\n* 程序头表与分段头表引用的数据，比如 `.text`, `.data`\n\n程序表中包含指向其他分段的索引， 分段表中也是如此：\n\n```text\n----------------------------\n|     ELF  header           |\n|---------------------------|\n|   Program header table    |-------|\n|---------------------------|       |\n|          .text            |<------|-------|\n|---------------------------|       |       |\n|          .rodata          |<------|-------|\n|---------------------------|       |       |\n|           ......          |<------|-------|\n|---------------------------|       |       |\n|           .data           |<------|-------|\n|---------------------------|               |\n|  Section header table     |---------------|\n|---------------------------|\n```\n\n* `Linux-IA32` 下的 ELF 存储和对应到Linux 内核中的情况\n\n```text\n  0====>-----------------------------  ---|             --------------------------------------              \n        |     ELF  header           |     |             |      Kernel Virtual           |  /| 1GB\n        |                           |     |             |                               |   |/  \n        |---------------------------|     |             |-------------------------------|<===== 0xC000 00000  \n        |   Program header table    |     |             |     User Stack  (dynamic)     |  <-- 栈 \n        |                           |     |             |                               |\n        |---------------------------|     |             |-------------------------------|<===== %esp\n        |          .init            |     | \\           |            /|\\                |\n        |---------------------------|     |  \\          |             |                 |\n        |          .text            |     |   \\         |            \\|/                |\n        |---------------------------|     |    \\        |-------------------------------|\n        |          .rodata          |     |     \\       |        dynamic libs           | <-- 共享库区域\n        |---------------------------|  ---|      |      |-------------------------------|\n        |           .data           | ---|       |      |           /|\\                 |\n        |---------------------------|    |\\      |      |            |                  |\n        |           .bss            | ---| \\     |      |            |                  |\n        |---------------------------|       \\    |      |-------------------------------|<===== brk\n        |           .symtab         |       |    |      |          heap                 | <-- 堆： 由程序主动申请释放(malloc, new)\n        |---------------------------|       |     \\     |-------------------------------|\n        |           .debug          |       |      ---->|        .data ,  .bss          | <-- 读写数据段\n        |---------------------------|        \\          |-------------------------------|             \n        |           .line           |         \\---->    |       .init, .text, .rodata   | <-- 只读代码段\n        |---------------------------|                   |-------------------------------|<===== 0x0804 8000\n        |           .data           |                   |                               |\n        |---------------------------|                   |         not used yet          |\n        |           .strtab         |                   |                               |\n        |---------------------------|                   |-------------------------------|<===== 0 \n                ELF 文件(磁盘)                               Linux 虚拟空间\n```\n\n#### sections\n\n* header\n    包括：我们字节标识信息， 文件类型(.O, exec, .so), 机器类型(IA-32, IA-64, Power-32)\n\n* `.text`\n  编译后的代码部分\n\n* `.rodata`\n  只读数据\n\n* `.data`\n  已初始化的全局变量\n\n* `.bss`\n  block started by symbol\n  为初始化的全局变量, 仅仅作为占位符, 不占据任何实际磁盘空间。\n  > 区分初始化和非初始化是为了提供空间效率\n\n  因为C语言中已经规定: 未初始化的全局变量和局部静态变量的默认值为零。\n  所以，将为初始化的变量和已经初始化的变量分开成两个段：\n  * `.data` 中存放具体的初始值, 仅占有一定的磁盘空间\n  * `.bss` 中仅说明变量将来执行时占用几个字节即可, 几乎不占用磁盘空间， 提高了执行效率\n\n* '.symtab`\n  存放函数名和全局变量(符号表)信息\n\n* `.rel.text` & `.rel.data`\n  `.text` & `.data`的重定位信息, 用于重新修改代码段中的指令的地址信 & 对被模块使用或定义的全局变量进行重定位的信息。\n  在`.o`文件里面是需要的， 而实际的可执行文件里面已经重定位过了， 所以就不存在了。\n\n* `.debug`\n  调试符号表\n\n* `strtab`\n  包含`symtab` 和 `debug` 中符号和节名\n\n#### 代码对应ELF\n\n```cpp\n#include <stdio.h>\n\nint y = 100;                   // .data\nint x;                         // .bss\n\nvoid print() {\n    printf(\"hello!\");         // .text\n}\n\n\nint main() {                 // .text\n    static int a = 1;        // .data\n    static int b;            // .bss\n    int c = 200, d;           \n    print();\n}\n\n\n```\n#### elf.h\n\n通过 `man elf` 就可以获取elf 介绍的详细信息\n\n* elf header\n\n```c\n#define EI_NIDENT 16\n\ntypedef struct {\n    unsigned char e_ident[EI_NIDENT];\n    uint16_t      e_type;\n    uint16_t      e_machine;\n    uint32_t      e_version;\n    ElfN_Addr     e_entry;\n    ElfN_Off      e_phoff;\n    ElfN_Off      e_shoff;\n    uint32_t      e_flags;\n    uint16_t      e_ehsize;\n    uint16_t      e_phentsize;\n    uint16_t      e_phnum;\n    uint16_t      e_shentsize;\n    uint16_t      e_shnum;\n    uint16_t      e_shstrndx;\n} ElfN_Ehdr;\n\n# N = 32 or 64\n```\n* Program header (Phdr)\n\n```c\n// 32\ntypedef struct {\n    uint32_t   p_type;\n    Elf32_Off  p_offset;\n    Elf32_Addr p_vaddr;\n    Elf32_Addr p_paddr;\n    uint32_t   p_filesz;\n    uint32_t   p_memsz;\n    uint32_t   p_flags;\n    uint32_t   p_align;\n} Elf32_Phdr;\n\n// 64\ntypedef struct {\n    uint32_t   p_type;\n    uint32_t   p_flags;\n    Elf64_Off  p_offset;\n    Elf64_Addr p_vaddr;\n    Elf64_Addr p_paddr;\n    uint64_t   p_filesz;\n    uint64_t   p_memsz;\n    uint64_t   p_align;\n} Elf64_Phdr;\n\n```\n\n* Section header (Shdr)\n```c\ntypedef struct {\n    uint32_t   sh_name;\n    uint32_t   sh_type;\n    uint32_t   sh_flags;\n    Elf32_Addr sh_addr;\n    Elf32_Off  sh_offset;\n    uint32_t   sh_size;\n    uint32_t   sh_link;\n    uint32_t   sh_info;\n    uint32_t   sh_addralign;\n    uint32_t   sh_entsize;\n} Elf32_Shdr;\n\ntypedef struct {\n    uint32_t   sh_name;\n    uint32_t   sh_type;\n    uint64_t   sh_flags;\n    Elf64_Addr sh_addr;\n    Elf64_Off  sh_offset;\n    uint64_t   sh_size;\n    uint32_t   sh_link;\n    uint32_t   sh_info;\n    uint64_t   sh_addralign;\n    uint64_t   sh_entsize;\n} Elf64_Shdr;\n\n```\n*  String and symbol tables\n```bash\ntypedef struct {\n    uint32_t      st_name;\n    Elf32_Addr    st_value;\n    uint32_t      st_size;\n    unsigned char st_info;\n    unsigned char st_other;\n    uint16_t      st_shndx;\n} Elf32_Sym;\n\ntypedef struct {\n    uint32_t      st_name;\n    unsigned char st_info;\n    unsigned char st_other;\n    uint16_t      st_shndx;\n    Elf64_Addr    st_value;\n    uint64_t      st_size;\n} Elf64_Sym;\n\n```\n\n### 常用的工具\n\n`GNU Binutils` 是用来处理许多格式的目标文件(包括elf文件)一整套的编程语言工具程序，包括：\n\n* readelf\n  显示elf文件\n\n* objdump\n  显示elf和object格式文件，解码elf文件中高级语言语句所对应的机器语言语句段落，汇编语言语句段落\n\n* nm\n  显示elf文件中变量名和地址 \n\n* strings\n  打印文件中的可打印字符的字符串。\n  在开发软件的时候，各种文本/ASCII 信息会被添加到其中，比如打印信息、调试信息、帮助信息、错误等。只要这些信息都存在于二进制文件中，就可以用 `strings` 命令将其转储到屏幕上。\n\n* ldd \n  打印共享对象依赖关系。\n  对动态链接的二进制文件运行该命令会显示出所有依赖库和它们的路径。\n\n\n","source":"_posts/elf简介.md","raw":"---\ntitle: elf简介\ndate: 2022-01-15 18:03:28\ntags:\n    - linux\n    - c\n    - elf\n---\n\n## 回顾\n\n程序的转换处理过程:\n\n1. C代码 hello.c:\n\n```C\n#include <stdio.h>\n\nint main() {\n    printf(\"hello!\");\n}\n```\n2. 预处理\n\n```bash\n$ gcc -E hello.c -o hello.i\n# 0 \"hello.c\"\n# 0 \"<built-in>\"\n# 0 \"<command-line>\"\n# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n# 0 \"<command-line>\" 2\n# 1 \"hello.c\"\n# 1 \"/usr/include/stdio.h\" 1 3 4\n# 27 \"/usr/include/stdio.h\" 3 4\n# 1 \"/usr/include/bits/libc-header-start.h\" 1 3 4\n# 33 \"/usr/include/bits/libc-header-start.h\" 3 4\n# 1 \"/usr/include/features.h\" 1 3 4\n# 473 \"/usr/include/features.h\" 3 4\n# 1 \"/usr/include/sys/cdefs.h\" 1 3 4\n# 462 \"/usr/include/sys/cdefs.h\" 3 4\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\n# 463 \"/usr/include/sys/cdefs.h\" 2 3 4\n# 1 \"/usr/include/bits/long-double.h\" 1 3 4\n# 464 \"/usr/include/sys/cdefs.h\" 2 3 4\n# 474 \"/usr/include/features.h\" 2 3 4\n# 497 \"/usr/include/features.h\" 3 4\n# 1 \"/usr/include/gnu/stubs.h\" 1 3 4\n# 10 \"/usr/include/gnu/stubs.h\" 3 4\n# 1 \"/usr/include/gnu/stubs-64.h\" 1 3 4\n# 11 \"/usr/include/gnu/stubs.h\" 2 3 4\n# 498 \"/usr/include/features.h\" 2 3 4\n# 34 \"/usr/include/bits/libc-header-start.h\" 2 3 4\n# 28 \"/usr/include/stdio.h\" 2 3 4\n\n\n\n\n\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h\" 1 3 4\n# 209 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h\" 3 4\n\n# 209 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h\" 3 4\ntypedef long unsigned int size_t;\n# 34 \"/usr/include/stdio.h\" 2 3 4\n\n\n# 1 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h\" 1 3 4\n# 40 \"/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h\" 3 4\ntypedef __builtin_va_list __gnuc_va_list;\n# 37 \"/usr/include/stdio.h\" 2 3 4\n\n# 1 \"/usr/include/bits/types.h\" 1 3 4\n# 27 \"/usr/include/bits/types.h\" 3 4\n# 1 \"/usr/include/bits/wordsize.h\" 1 3 4\n# 28 \"/usr/include/bits/types.h\" 2 3 4\n# 1 \"/usr/include/bits/timesize.h\" 1 3 4\n# 29 \"/usr/include/bits/types.h\" 2 3 4\n\n\ntypedef unsigned char __u_char;\ntypedef unsigned short int __u_short;\ntypedef unsigned int __u_int;\ntypedef unsigned long int __u_long;\n\n\ntypedef signed char __int8_t;\ntypedef unsigned char __uint8_t;\ntypedef signed short int __int16_t;\ntypedef unsigned short int __uint16_t;\ntypedef signed int __int32_t;\ntypedef unsigned int __uint32_t;\n\ntypedef signed long int __int64_t;\ntypedef unsigned long int __uint64_t;\n\n\n\n\n\n\ntypedef __int8_t __int_least8_t;\ntypedef __uint8_t __uint_least8_t;\ntypedef __int16_t __int_least16_t;\ntypedef __uint16_t __uint_least16_t;\ntypedef __int32_t __int_least32_t;\ntypedef __uint32_t __uint_least32_t;\ntypedef __int64_t __int_least64_t;\ntypedef __uint64_t __uint_least64_t;\n\n\n\ntypedef long int __quad_t;\ntypedef unsigned long int __u_quad_t;\n\n\n\n\n\n\n\ntypedef long int __intmax_t;\ntypedef unsigned long int __uintmax_t;\n# 141 \"/usr/include/bits/types.h\" 3 4\n# 1 \"/usr/include/bits/typesizes.h\" 1 3 4\n# 142 \"/usr/include/bits/types.h\" 2 3 4\n# 1 \"/usr/include/bits/time64.h\" 1 3 4\n# 143 \"/usr/include/bits/types.h\" 2 3 4\n\n\ntypedef unsigned long int __dev_t;\ntypedef unsigned int __uid_t;\ntypedef unsigned int __gid_t;\ntypedef unsigned long int __ino_t;\ntypedef unsigned long int __ino64_t;\ntypedef unsigned int __mode_t;\ntypedef unsigned long int __nlink_t;\ntypedef long int __off_t;\ntypedef long int __off64_t;\ntypedef int __pid_t;\ntypedef struct { int __val[2]; } __fsid_t;\ntypedef long int __clock_t;\ntypedef unsigned long int __rlim_t;\ntypedef unsigned long int __rlim64_t;\ntypedef unsigned int __id_t;\ntypedef long int __time_t;\ntypedef unsigned int __useconds_t;\ntypedef long int __suseconds_t;\ntypedef long int __suseconds64_t;\n\ntypedef int __daddr_t;\ntypedef int __key_t;\n\n\ntypedef int __clockid_t;\n\n\ntypedef void * __timer_t;\n\n\ntypedef long int __blksize_t;\n\n\n\n\ntypedef long int __blkcnt_t;\ntypedef long int __blkcnt64_t;\n\n\ntypedef unsigned long int __fsblkcnt_t;\ntypedef unsigned long int __fsblkcnt64_t;\n\n\ntypedef unsigned long int __fsfilcnt_t;\ntypedef unsigned long int __fsfilcnt64_t;\n\n\ntypedef long int __fsword_t;\n\ntypedef long int __ssize_t;\n\n\ntypedef long int __syscall_slong_t;\n\ntypedef unsigned long int __syscall_ulong_t;\n\n\n\ntypedef __off64_t __loff_t;\ntypedef char *__caddr_t;\n\n\ntypedef long int __intptr_t;\n\n\ntypedef unsigned int __socklen_t;\n\n\n\n\ntypedef int __sig_atomic_t;\n# 39 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/__fpos_t.h\" 1 3 4\n\n\n\n\n# 1 \"/usr/include/bits/types/__mbstate_t.h\" 1 3 4\n# 13 \"/usr/include/bits/types/__mbstate_t.h\" 3 4\ntypedef struct\n{\n  int __count;\n  union\n  {\n    unsigned int __wch;\n    char __wchb[4];\n  } __value;\n} __mbstate_t;\n# 6 \"/usr/include/bits/types/__fpos_t.h\" 2 3 4\n\n\n\n\ntypedef struct _G_fpos_t\n{\n  __off_t __pos;\n  __mbstate_t __state;\n} __fpos_t;\n# 40 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/__fpos64_t.h\" 1 3 4\n# 10 \"/usr/include/bits/types/__fpos64_t.h\" 3 4\ntypedef struct _G_fpos64_t\n{\n  __off64_t __pos;\n  __mbstate_t __state;\n} __fpos64_t;\n# 41 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/__FILE.h\" 1 3 4\n\n\n\nstruct _IO_FILE;\ntypedef struct _IO_FILE __FILE;\n# 42 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/FILE.h\" 1 3 4\n\n\n\nstruct _IO_FILE;\n\n\ntypedef struct _IO_FILE FILE;\n# 43 \"/usr/include/stdio.h\" 2 3 4\n# 1 \"/usr/include/bits/types/struct_FILE.h\" 1 3 4\n# 35 \"/usr/include/bits/types/struct_FILE.h\" 3 4\nstruct _IO_FILE;\nstruct _IO_marker;\nstruct _IO_codecvt;\nstruct _IO_wide_data;\n\n\n\n\ntypedef void _IO_lock_t;\n\n\n\n\n\nstruct _IO_FILE\n{\n  int _flags;\n\n\n  char *_IO_read_ptr;\n  char *_IO_read_end;\n  char *_IO_read_base;\n  char *_IO_write_base;\n  char *_IO_write_ptr;\n  char *_IO_write_end;\n  char *_IO_buf_base;\n  char *_IO_buf_end;\n\n\n  char *_IO_save_base;\n  char *_IO_backup_base;\n  char *_IO_save_end;\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n  int _flags2;\n  __off_t _old_offset;\n\n\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  _IO_lock_t *_lock;\n\n\n\n\n\n\n\n  __off64_t _offset;\n\n  struct _IO_codecvt *_codecvt;\n  struct _IO_wide_data *_wide_data;\n  struct _IO_FILE *_freeres_list;\n  void *_freeres_buf;\n  size_t __pad5;\n  int _mode;\n\n  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n};\n# 44 \"/usr/include/stdio.h\" 2 3 4\n# 52 \"/usr/include/stdio.h\" 3 4\ntypedef __gnuc_va_list va_list;\n# 63 \"/usr/include/stdio.h\" 3 4\ntypedef __off_t off_t;\n# 77 \"/usr/include/stdio.h\" 3 4\ntypedef __ssize_t ssize_t;\n\n\n\n\n\n\ntypedef __fpos_t fpos_t;\n# 133 \"/usr/include/stdio.h\" 3 4\n# 1 \"/usr/include/bits/stdio_lim.h\" 1 3 4\n# 134 \"/usr/include/stdio.h\" 2 3 4\n\n\n\nextern FILE *stdin;\nextern FILE *stdout;\nextern FILE *stderr;\n\n\n\n\n\n\nextern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));\n\nextern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\nextern int renameat (int __oldfd, const char *__old, int __newfd,\n       const char *__new) __attribute__ ((__nothrow__ , __leaf__));\n# 173 \"/usr/include/stdio.h\" 3 4\nextern FILE *tmpfile (void) ;\n# 187 \"/usr/include/stdio.h\" 3 4\nextern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\nextern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;\n# 204 \"/usr/include/stdio.h\" 3 4\nextern char *tempnam (const char *__dir, const char *__pfx)\n     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;\n\n\n\n\n\n\n\nextern int fclose (FILE *__stream);\n\n\n\n\nextern int fflush (FILE *__stream);\n# 227 \"/usr/include/stdio.h\" 3 4\nextern int fflush_unlocked (FILE *__stream);\n# 246 \"/usr/include/stdio.h\" 3 4\nextern FILE *fopen (const char *__restrict __filename,\n      const char *__restrict __modes) ;\n\n\n\n\nextern FILE *freopen (const char *__restrict __filename,\n        const char *__restrict __modes,\n        FILE *__restrict __stream) ;\n# 279 \"/usr/include/stdio.h\" 3 4\nextern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;\n# 292 \"/usr/include/stdio.h\" 3 4\nextern FILE *fmemopen (void *__s, size_t __len, const char *__modes)\n  __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\nextern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\n\nextern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\nextern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,\n      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\n\nextern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,\n         size_t __size) __attribute__ ((__nothrow__ , __leaf__));\n\n\nextern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\n\n\n\n\nextern int fprintf (FILE *__restrict __stream,\n      const char *__restrict __format, ...);\n\n\n\n\nextern int printf (const char *__restrict __format, ...);\n\nextern int sprintf (char *__restrict __s,\n      const char *__restrict __format, ...) __attribute__ ((__nothrow__));\n\n\n\n\n\nextern int vfprintf (FILE *__restrict __s, const char *__restrict __format,\n       __gnuc_va_list __arg);\n\n\n\n\nextern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);\n\nextern int vsprintf (char *__restrict __s, const char *__restrict __format,\n       __gnuc_va_list __arg) __attribute__ ((__nothrow__));\n\n\n\nextern int snprintf (char *__restrict __s, size_t __maxlen,\n       const char *__restrict __format, ...)\n     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));\n\nextern int vsnprintf (char *__restrict __s, size_t __maxlen,\n        const char *__restrict __format, __gnuc_va_list __arg)\n     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));\n# 379 \"/usr/include/stdio.h\" 3 4\nextern int vdprintf (int __fd, const char *__restrict __fmt,\n       __gnuc_va_list __arg)\n     __attribute__ ((__format__ (__printf__, 2, 0)));\nextern int dprintf (int __fd, const char *__restrict __fmt, ...)\n     __attribute__ ((__format__ (__printf__, 2, 3)));\n\n\n\n\n\n\n\nextern int fscanf (FILE *__restrict __stream,\n     const char *__restrict __format, ...) ;\n\n\n\n\nextern int scanf (const char *__restrict __format, ...) ;\n\nextern int sscanf (const char *__restrict __s,\n     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\n\n\n# 1 \"/usr/include/bits/floatn.h\" 1 3 4\n# 119 \"/usr/include/bits/floatn.h\" 3 4\n# 1 \"/usr/include/bits/floatn-common.h\" 1 3 4\n# 24 \"/usr/include/bits/floatn-common.h\" 3 4\n# 1 \"/usr/include/bits/long-double.h\" 1 3 4\n# 25 \"/usr/include/bits/floatn-common.h\" 2 3 4\n# 120 \"/usr/include/bits/floatn.h\" 2 3 4\n# 407 \"/usr/include/stdio.h\" 2 3 4\n\n\n\nextern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ (\"\" \"__isoc99_fscanf\")\n\n                               ;\nextern int scanf (const char *__restrict __format, ...) __asm__ (\"\" \"__isoc99_scanf\")\n                              ;\nextern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ (\"\" \"__isoc99_sscanf\") __attribute__ ((__nothrow__ , __leaf__))\n\n                      ;\n# 435 \"/usr/include/stdio.h\" 3 4\nextern int vfscanf (FILE *__restrict __s, const char *__restrict __format,\n      __gnuc_va_list __arg)\n     __attribute__ ((__format__ (__scanf__, 2, 0))) ;\n\n\n\n\n\nextern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)\n     __attribute__ ((__format__ (__scanf__, 1, 0))) ;\n\n\nextern int vsscanf (const char *__restrict __s,\n      const char *__restrict __format, __gnuc_va_list __arg)\n     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));\n\n\n\n\n\nextern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc99_vfscanf\")\n\n\n\n     __attribute__ ((__format__ (__scanf__, 2, 0))) ;\nextern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc99_vscanf\")\n\n     __attribute__ ((__format__ (__scanf__, 1, 0))) ;\nextern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (\"\" \"__isoc99_vsscanf\") __attribute__ ((__nothrow__ , __leaf__))\n\n\n\n     __attribute__ ((__format__ (__scanf__, 2, 0)));\n# 489 \"/usr/include/stdio.h\" 3 4\nextern int fgetc (FILE *__stream);\nextern int getc (FILE *__stream);\n\n\n\n\n\nextern int getchar (void);\n\n\n\n\n\n\nextern int getc_unlocked (FILE *__stream);\nextern int getchar_unlocked (void);\n# 514 \"/usr/include/stdio.h\" 3 4\nextern int fgetc_unlocked (FILE *__stream);\n# 525 \"/usr/include/stdio.h\" 3 4\nextern int fputc (int __c, FILE *__stream);\nextern int putc (int __c, FILE *__stream);\n\n\n\n\n\nextern int putchar (int __c);\n# 541 \"/usr/include/stdio.h\" 3 4\nextern int fputc_unlocked (int __c, FILE *__stream);\n\n\n\n\n\n\n\nextern int putc_unlocked (int __c, FILE *__stream);\nextern int putchar_unlocked (int __c);\n\n\n\n\n\n\nextern int getw (FILE *__stream);\n\n\nextern int putw (int __w, FILE *__stream);\n\n\n\n\n\n\n\nextern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)\n     __attribute__ ((__access__ (__write_only__, 1, 2)));\n# 608 \"/usr/include/stdio.h\" 3 4\nextern __ssize_t __getdelim (char **__restrict __lineptr,\n                             size_t *__restrict __n, int __delimiter,\n                             FILE *__restrict __stream) ;\nextern __ssize_t getdelim (char **__restrict __lineptr,\n                           size_t *__restrict __n, int __delimiter,\n                           FILE *__restrict __stream) ;\n\n\n\n\n\n\n\nextern __ssize_t getline (char **__restrict __lineptr,\n                          size_t *__restrict __n,\n                          FILE *__restrict __stream) ;\n\n\n\n\n\n\n\nextern int fputs (const char *__restrict __s, FILE *__restrict __stream);\n\n\n\n\n\nextern int puts (const char *__s);\n\n\n\n\n\n\nextern int ungetc (int __c, FILE *__stream);\n\n\n\n\n\n\nextern size_t fread (void *__restrict __ptr, size_t __size,\n       size_t __n, FILE *__restrict __stream) ;\n\n\n\n\nextern size_t fwrite (const void *__restrict __ptr, size_t __size,\n        size_t __n, FILE *__restrict __s);\n# 678 \"/usr/include/stdio.h\" 3 4\nextern size_t fread_unlocked (void *__restrict __ptr, size_t __size,\n         size_t __n, FILE *__restrict __stream) ;\nextern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,\n          size_t __n, FILE *__restrict __stream);\n\n\n\n\n\n\n\nextern int fseek (FILE *__stream, long int __off, int __whence);\n\n\n\n\nextern long int ftell (FILE *__stream) ;\n\n\n\n\nextern void rewind (FILE *__stream);\n# 712 \"/usr/include/stdio.h\" 3 4\nextern int fseeko (FILE *__stream, __off_t __off, int __whence);\n\n\n\n\nextern __off_t ftello (FILE *__stream) ;\n# 736 \"/usr/include/stdio.h\" 3 4\nextern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);\n\n\n\n\nextern int fsetpos (FILE *__stream, const fpos_t *__pos);\n# 762 \"/usr/include/stdio.h\" 3 4\nextern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n\nextern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\nextern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\nextern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\nextern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\nextern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\n\n\n\nextern void perror (const char *__s);\n\n\n\n\nextern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\n\n\nextern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n# 799 \"/usr/include/stdio.h\" 3 4\nextern FILE *popen (const char *__command, const char *__modes) ;\n\n\n\n\n\nextern int pclose (FILE *__stream);\n\n\n\n\n\nextern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));\n# 839 \"/usr/include/stdio.h\" 3 4\nextern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n\n\n\nextern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;\n\n\nextern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));\n# 857 \"/usr/include/stdio.h\" 3 4\nextern int __uflow (FILE *);\nextern int __overflow (FILE *, int);\n# 874 \"/usr/include/stdio.h\" 3 4\n\n# 2 \"hello.c\" 2\n\n\n# 3 \"hello.c\"\nint main() {\n    printf(\"hello!\");\n}\n\n```\n3. 汇编\n```bash\n$ gcc -S hello.\n```\n查看生成内容\n\n```bash\n\n\t.file\t\"hello.c\"\n\t.text\n\t.section\t.rodata\n.LC0:\n\t.string\t\"hello!\"\n\t.text\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n.LFB0:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tleaq\t.LC0(%rip), %rax\n\tmovq\t%rax, %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tmovl\t$0, %eax\n\tpopq\t%rbp\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tmain, .-main\n\t.ident\t\"GCC: (GNU) 11.1.0\"\n\t.section\t.note.GNU-stack,\"\",@progbits\n```\n\n4. 机器码\n\n```bash\ngcc -C hello.s\n```\n* file 查看\n    ```bash\n    hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped\n    ```\n\n* objdump 查看\n  ```bash\n    hello.o:     file format elf64-x86-64\n    hello.o\n  ```\n\n* nm 查看\n  ```bash\n                     U _GLOBAL_OFFSET_TABLE_\n    0000000000000000 T main\n                     U printf\n\n  ```\n\n* readelf\n```bash\nELF Header: \n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              REL (Relocatable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x0\n  Start of program headers:          0 (bytes into file)\n  Start of section headers:          640 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           0 (bytes)\n  Number of program headers:         0\n  Size of section headers:           64 (bytes)\n  Number of section headers:         14\n  Section header string table index: 13\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       000000000000001f  0000000000000000  AX       0     0     1\n  [ 2] .rela.text        RELA             0000000000000000  000001c0\n       0000000000000030  0000000000000018   I      11     1     8\n  [ 3] .data             PROGBITS         0000000000000000  0000005f\n       0000000000000000  0000000000000000  WA       0     0     1\n  [ 4] .bss              NOBITS           0000000000000000  0000005f\n       0000000000000000  0000000000000000  WA       0     0     1\n  [ 5] .rodata           PROGBITS         0000000000000000  0000005f\n       0000000000000007  0000000000000000   A       0     0     1\n  [ 6] .comment          PROGBITS         0000000000000000  00000066\n       0000000000000013  0000000000000001  MS       0     0     1\n  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  00000079\n       0000000000000000  0000000000000000           0     0     1\n  [ 8] .note.gnu.pr[...] NOTE             0000000000000000  00000080\n       0000000000000030  0000000000000000   A       0     0     8\n  [ 9] .eh_frame         PROGBITS         0000000000000000  000000b0\n       0000000000000038  0000000000000000   A       0     0     8\n  [10] .rela.eh_frame    RELA             0000000000000000  000001f0\n       0000000000000018  0000000000000018   I      11     9     8\n  [11] .symtab           SYMTAB           0000000000000000  000000e8\n       00000000000000a8  0000000000000018          12     4     8\n  [12] .strtab           STRTAB           0000000000000000  00000190\n       000000000000002b  0000000000000000           0     0     1\n  [13] .shstrtab         STRTAB           0000000000000000  00000208\n       0000000000000074  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)\n\nThere are no section groups in this file.\n\nThere are no program headers in this file.\n\nThere is no dynamic section in this file.\n\nRelocation section '.rela.text' at offset 0x1c0 contains 2 entries:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000000007  000300000002 R_X86_64_PC32     0000000000000000 .rodata - 4\n000000000014  000600000004 R_X86_64_PLT32    0000000000000000 printf - 4\n\nRelocation section '.rela.eh_frame' at offset 0x1f0 contains 1 entry:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 7 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n     4: 0000000000000000    31 FUNC    GLOBAL DEFAULT    1 main\n     5: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf\n\nNo version information found in this file.\n\nDisplaying notes found in: .note.gnu.property\n  Owner                Data size \tDescription\n  GNU                  0x00000020\tNT_GNU_PROPERTY_TYPE_0\n      Properties: x86 ISA used: \n\tx86 feature used: x86\n\n```\n\n5. 链接\n```bash\ngcc hello.o -o hello\n```\n\n* file 查看\n\n```bash\nhello: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=92f33896a3687559674a0d0f204f68984bfd8ee3, for GNU/Linux 4.4.0, not stripped\n```\n* readelf：\n    ```bash\n    ELF Header:\n    Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n    Class:                             ELF64\n    Data:                              2's complement, little endian\n    Version:                           1 (current)\n    OS/ABI:                            UNIX - System V\n    ABI Version:                       0\n    Type:                              DYN (Shared object file)\n    Machine:                           Advanced Micro Devices X86-64\n    Version:                           0x1\n    Entry point address:               0x1040\n    Start of program headers:          64 (bytes into file)\n    Start of section headers:          14168 (bytes into file)\n    Flags:                             0x0\n    Size of this header:               64 (bytes)\n    Size of program headers:           56 (bytes)\n    Number of program headers:         13\n    Size of section headers:           64 (bytes)\n    Number of section headers:         30\n    Section header string table index: 29\n\n    Section Headers:\n    [Nr] Name              Type             Address           Offset\n        Size              EntSize          Flags  Link  Info  Align\n    [ 0]                   NULL             0000000000000000  00000000\n        0000000000000000  0000000000000000           0     0     0\n    [ 1] .interp           PROGBITS         0000000000000318  00000318\n        000000000000001c  0000000000000000   A       0     0     1\n    [ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338\n        0000000000000040  0000000000000000   A       0     0     8\n    [ 3] .note.gnu.bu[...] NOTE             0000000000000378  00000378\n        0000000000000024  0000000000000000   A       0     0     4\n    [ 4] .note.ABI-tag     NOTE             000000000000039c  0000039c\n        0000000000000020  0000000000000000   A       0     0     4\n    [ 5] .gnu.hash         GNU_HASH         00000000000003c0  000003c0\n        000000000000001c  0000000000000000   A       6     0     8\n    [ 6] .dynsym           DYNSYM           00000000000003e0  000003e0\n        00000000000000a8  0000000000000018   A       7     1     8\n    [ 7] .dynstr           STRTAB           0000000000000488  00000488\n        0000000000000084  0000000000000000   A       0     0     1\n    [ 8] .gnu.version      VERSYM           000000000000050c  0000050c\n        000000000000000e  0000000000000002   A       6     0     2\n    [ 9] .gnu.version_r    VERNEED          0000000000000520  00000520\n        0000000000000020  0000000000000000   A       7     1     8\n    [10] .rela.dyn         RELA             0000000000000540  00000540\n        00000000000000c0  0000000000000018   A       6     0     8\n    [11] .rela.plt         RELA             0000000000000600  00000600\n        0000000000000018  0000000000000018  AI       6    23     8\n    [12] .init             PROGBITS         0000000000001000  00001000\n        000000000000001b  0000000000000000  AX       0     0     4\n    [13] .plt              PROGBITS         0000000000001020  00001020\n        0000000000000020  0000000000000010  AX       0     0     16\n    [14] .text             PROGBITS         0000000000001040  00001040\n        0000000000000195  0000000000000000  AX       0     0     16\n    [15] .fini             PROGBITS         00000000000011d8  000011d8\n        000000000000000d  0000000000000000  AX       0     0     4\n    [16] .rodata           PROGBITS         0000000000002000  00002000\n        000000000000000b  0000000000000000   A       0     0     4\n    [17] .eh_frame_hdr     PROGBITS         000000000000200c  0000200c\n        0000000000000034  0000000000000000   A       0     0     4\n    [18] .eh_frame         PROGBITS         0000000000002040  00002040\n        00000000000000d8  0000000000000000   A       0     0     8\n    [19] .init_array       INIT_ARRAY       0000000000003de8  00002de8\n        0000000000000008  0000000000000008  WA       0     0     8\n    [20] .fini_array       FINI_ARRAY       0000000000003df0  00002df0\n        0000000000000008  0000000000000008  WA       0     0     8\n    [21] .dynamic          DYNAMIC          0000000000003df8  00002df8\n        00000000000001e0  0000000000000010  WA       7     0     8\n    [22] .got              PROGBITS         0000000000003fd8  00002fd8\n        0000000000000028  0000000000000008  WA       0     0     8\n    [23] .got.plt          PROGBITS         0000000000004000  00003000\n        0000000000000020  0000000000000008  WA       0     0     8\n    [24] .data             PROGBITS         0000000000004020  00003020\n        0000000000000010  0000000000000000  WA       0     0     8\n    [25] .bss              NOBITS           0000000000004030  00003030\n        0000000000000008  0000000000000000  WA       0     0     1\n    [26] .comment          PROGBITS         0000000000000000  00003030\n        0000000000000012  0000000000000001  MS       0     0     1\n    [27] .symtab           SYMTAB           0000000000000000  00003048\n        00000000000003d8  0000000000000018          28    22     8\n    [28] .strtab           STRTAB           0000000000000000  00003420\n        000000000000021b  0000000000000000           0     0     1\n    [29] .shstrtab         STRTAB           0000000000000000  0000363b\n        0000000000000116  0000000000000000           0     0     1\n    Key to Flags:\n    W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n    L (link order), O (extra OS processing required), G (group), T (TLS),\n    C (compressed), x (unknown), o (OS specific), E (exclude),\n    l (large), p (processor specific)\n\n    There are no section groups in this file.\n\n    Program Headers:\n    Type           Offset             VirtAddr           PhysAddr\n                    FileSiz            MemSiz              Flags  Align\n    PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040\n                    0x00000000000002d8 0x00000000000002d8  R      0x8\n    INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318\n                    0x000000000000001c 0x000000000000001c  R      0x1\n        [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]\n    LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000\n                    0x0000000000000618 0x0000000000000618  R      0x1000\n    LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000\n                    0x00000000000001e5 0x00000000000001e5  R E    0x1000\n    LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000\n                    0x0000000000000118 0x0000000000000118  R      0x1000\n    LOAD           0x0000000000002de8 0x0000000000003de8 0x0000000000003de8\n                    0x0000000000000248 0x0000000000000250  RW     0x1000\n    DYNAMIC        0x0000000000002df8 0x0000000000003df8 0x0000000000003df8\n                    0x00000000000001e0 0x00000000000001e0  RW     0x8\n    NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338\n                    0x0000000000000040 0x0000000000000040  R      0x8\n    NOTE           0x0000000000000378 0x0000000000000378 0x0000000000000378\n                    0x0000000000000044 0x0000000000000044  R      0x4\n    GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338\n                    0x0000000000000040 0x0000000000000040  R      0x8\n    GNU_EH_FRAME   0x000000000000200c 0x000000000000200c 0x000000000000200c\n                    0x0000000000000034 0x0000000000000034  R      0x4\n    GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                    0x0000000000000000 0x0000000000000000  RW     0x10\n    GNU_RELRO      0x0000000000002de8 0x0000000000003de8 0x0000000000003de8\n                    0x0000000000000218 0x0000000000000218  R      0x1\n\n    Section to Segment mapping:\n    Segment Sections...\n    00     \n    01     .interp \n    02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt \n    03     .init .plt .text .fini \n    04     .rodata .eh_frame_hdr .eh_frame \n    05     .init_array .fini_array .dynamic .got .got.plt .data .bss \n    06     .dynamic \n    07     .note.gnu.property \n    08     .note.gnu.build-id .note.ABI-tag \n    09     .note.gnu.property \n    10     .eh_frame_hdr \n    11     \n    12     .init_array .fini_array .dynamic .got \n\n    Dynamic section at offset 0x2df8 contains 26 entries:\n    Tag        Type                         Name/Value\n    0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]\n    0x000000000000000c (INIT)               0x1000\n    0x000000000000000d (FINI)               0x11d8\n    0x0000000000000019 (INIT_ARRAY)         0x3de8\n    0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\n    0x000000000000001a (FINI_ARRAY)         0x3df0\n    0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)\n    0x000000006ffffef5 (GNU_HASH)           0x3c0\n    0x0000000000000005 (STRTAB)             0x488\n    0x0000000000000006 (SYMTAB)             0x3e0\n    0x000000000000000a (STRSZ)              132 (bytes)\n    0x000000000000000b (SYMENT)             24 (bytes)\n    0x0000000000000015 (DEBUG)              0x0\n    0x0000000000000003 (PLTGOT)             0x4000\n    0x0000000000000002 (PLTRELSZ)           24 (bytes)\n    0x0000000000000014 (PLTREL)             RELA\n    0x0000000000000017 (JMPREL)             0x600\n    0x0000000000000007 (RELA)               0x540\n    0x0000000000000008 (RELASZ)             192 (bytes)\n    0x0000000000000009 (RELAENT)            24 (bytes)\n    0x000000006ffffffb (FLAGS_1)            Flags: PIE\n    0x000000006ffffffe (VERNEED)            0x520\n    0x000000006fffffff (VERNEEDNUM)         1\n    0x000000006ffffff0 (VERSYM)             0x50c\n    0x000000006ffffff9 (RELACOUNT)          3\n    0x0000000000000000 (NULL)               0x0\n\n    Relocation section '.rela.dyn' at offset 0x540 contains 8 entries:\n    Offset          Info           Type           Sym. Value    Sym. Name + Addend\n    000000003de8  000000000008 R_X86_64_RELATIVE                    1130\n    000000003df0  000000000008 R_X86_64_RELATIVE                    10e0\n    000000004028  000000000008 R_X86_64_RELATIVE                    4028\n    000000003fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTM[...] + 0\n    000000003fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n    000000003fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n    000000003ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCl[...] + 0\n    000000003ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n\n    Relocation section '.rela.plt' at offset 0x600 contains 1 entry:\n    Offset          Info           Type           Sym. Value    Sym. Name + Addend\n    000000004018  000200000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0\n\n    The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\n    Symbol table '.dynsym' contains 7 entries:\n    Num:    Value          Size Type    Bind   Vis      Ndx Name\n        0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n        1: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]\n        2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)\n        3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)\n        4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n        5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]\n        6: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND [...]@GLIBC_2.2.5 (2)\n\n    Symbol table '.symtab' contains 41 entries:\n    Num:    Value          Size Type    Bind   Vis      Ndx Name\n        0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n        1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS abi-note.c\n        2: 000000000000039c    32 OBJECT  LOCAL  DEFAULT    4 __abi_tag\n        3: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS init.c\n        4: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n        5: 0000000000001070     0 FUNC    LOCAL  DEFAULT   14 deregister_tm_clones\n        6: 00000000000010a0     0 FUNC    LOCAL  DEFAULT   14 register_tm_clones\n        7: 00000000000010e0     0 FUNC    LOCAL  DEFAULT   14 __do_global_dtors_aux\n        8: 0000000000004030     1 OBJECT  LOCAL  DEFAULT   25 completed.0\n        9: 0000000000003df0     0 OBJECT  LOCAL  DEFAULT   20 __do_global_dtor[...]\n        10: 0000000000001130     0 FUNC    LOCAL  DEFAULT   14 frame_dummy\n        11: 0000000000003de8     0 OBJECT  LOCAL  DEFAULT   19 __frame_dummy_in[...]\n        12: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c\n        13: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n        14: 0000000000002114     0 OBJECT  LOCAL  DEFAULT   18 __FRAME_END__\n        15: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n        16: 0000000000003df0     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_end\n        17: 0000000000003df8     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC\n        18: 0000000000003de8     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_start\n        19: 000000000000200c     0 NOTYPE  LOCAL  DEFAULT   17 __GNU_EH_FRAME_HDR\n        20: 0000000000004000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_\n        21: 0000000000001000     0 FUNC    LOCAL  DEFAULT   12 _init\n        22: 00000000000011d0     5 FUNC    GLOBAL DEFAULT   14 __libc_csu_fini\n        23: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]\n        24: 0000000000004020     0 NOTYPE  WEAK   DEFAULT   24 data_start\n        25: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   24 _edata\n        26: 00000000000011d8     0 FUNC    GLOBAL HIDDEN    15 _fini\n        27: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5\n        28: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_mai[...]\n        29: 0000000000004020     0 NOTYPE  GLOBAL DEFAULT   24 __data_start\n        30: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n        31: 0000000000004028     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle\n        32: 0000000000002000     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used\n        33: 0000000000001160   101 FUNC    GLOBAL DEFAULT   14 __libc_csu_init\n        34: 0000000000004038     0 NOTYPE  GLOBAL DEFAULT   25 _end\n        35: 0000000000001040    47 FUNC    GLOBAL DEFAULT   14 _start\n        36: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start\n        37: 0000000000001139    31 FUNC    GLOBAL DEFAULT   14 main\n        38: 0000000000004030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__\n        39: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]\n        40: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@G[...]\n\n    Version symbols section '.gnu.version' contains 7 entries:\n    Addr: 0x000000000000050c  Offset: 0x00050c  Link: 6 (.dynsym)\n    000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   2 (GLIBC_2.2.5)\n    004:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)\n\n    Version needs section '.gnu.version_r' contains 1 entry:\n    Addr: 0x0000000000000520  Offset: 0x000520  Link: 7 (.dynstr)\n    000000: Version: 1  File: libc.so.6  Cnt: 1\n    0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 2\n\n    Displaying notes found in: .note.gnu.property\n    Owner                Data size \tDescription\n    GNU                  0x00000030\tNT_GNU_PROPERTY_TYPE_0\n        Properties: x86 ISA needed: x86-64-baseline\n        x86 feature used: x86\n        x86 ISA used: \n\n    Displaying notes found in: .note.gnu.build-id\n    Owner                Data size \tDescription\n    GNU                  0x00000014\tNT_GNU_BUILD_ID (unique build ID bitstring)\n        Build ID: 92f33896a3687559674a0d0f204f68984bfd8ee3\n\n    Displaying notes found in: .note.ABI-tag\n    Owner                Data size \tDescription\n    GNU                  0x00000010\tNT_GNU_ABI_TAG (ABI version tag)\n        OS: Linux, ABI: 4.4.0\n\n    ```\n* nm\n    ```bash\n    000000000000039c r __abi_tag\n    0000000000004030 B __bss_start\n    0000000000004030 b completed.0\n                    w __cxa_finalize@GLIBC_2.2.5\n    0000000000004020 D __data_start\n    0000000000004020 W data_start\n    0000000000001070 t deregister_tm_clones\n    00000000000010e0 t __do_global_dtors_aux\n    0000000000003df0 d __do_global_dtors_aux_fini_array_entry\n    0000000000004028 D __dso_handle\n    0000000000003df8 d _DYNAMIC\n    0000000000004030 D _edata\n    0000000000004038 B _end\n    00000000000011d8 T _fini\n    0000000000001130 t frame_dummy\n    0000000000003de8 d __frame_dummy_init_array_entry\n    0000000000002114 r __FRAME_END__\n    0000000000004000 d _GLOBAL_OFFSET_TABLE_\n                    w __gmon_start__\n    000000000000200c r __GNU_EH_FRAME_HDR\n    0000000000001000 t _init\n    0000000000003df0 d __init_array_end\n    0000000000003de8 d __init_array_start\n    0000000000002000 R _IO_stdin_used\n                    w _ITM_deregisterTMCloneTable\n                    w _ITM_registerTMCloneTable\n    00000000000011d0 T __libc_csu_fini\n    0000000000001160 T __libc_csu_init\n                    U __libc_start_main@GLIBC_2.2.5\n    0000000000001139 T main\n                    U printf@GLIBC_2.2.5\n    00000000000010a0 t register_tm_clones\n    0000000000001040 T _start\n    0000000000004030 D __TMC_END__\n    ```\n\n## 格式简介\n\n> ELF： executable and linkable format\n\n一种用于可执行文件、目标代码、共享库和核心转储（`core dump`）的标准文件格式。\n首次发布于一个名为 `System V Release 4（SVR4）`的 `Unix` 操作系统版本中关于应用二进制接口（ABI）的规范中，并且此后不久发布于工具接口标准（Tool Interface Standard），随后很快被不同 `Unix` 发行商所接受。1999 年，这种格式被 `86open` 项目选为 `x86` 架构处理器上的 `Unix` 和 类 Unix 系统的标准二进制文件格式。\n\n按照设计，ELF 格式灵活性高、可扩展，并且跨平台。比如它支持不同的字节序和地址范围，所以它不会不兼容某一特别的 CPU 或指令架构。这也使得 ELF 格式能够被运行于众多不同平台的各种操作系统所广泛采纳。\n\n每个 ELF 文件都由一个 ELF 首部和紧跟其后的文件数据部分组成。数据部分可以包含：\n\n* 程序头表（Program header table）：\n  描述 0 个或多个内存段信息\n  > 内存段中包含了用于某个 ELF 文件运行时执行所需的信息，而片段中包含了用于链接和重定位的重要数据。\n    整个文件中的任何一个字节至多只能属于一个片段，也就是说可能存在不属于任何片段的孤立字节。\n* 分段头表（Section header table）：\n  描述 0 段或多段链接与重定位需要的数据\n* 程序头表与分段头表引用的数据，比如 `.text`, `.data`\n\n程序表中包含指向其他分段的索引， 分段表中也是如此：\n\n```text\n----------------------------\n|     ELF  header           |\n|---------------------------|\n|   Program header table    |-------|\n|---------------------------|       |\n|          .text            |<------|-------|\n|---------------------------|       |       |\n|          .rodata          |<------|-------|\n|---------------------------|       |       |\n|           ......          |<------|-------|\n|---------------------------|       |       |\n|           .data           |<------|-------|\n|---------------------------|               |\n|  Section header table     |---------------|\n|---------------------------|\n```\n\n* `Linux-IA32` 下的 ELF 存储和对应到Linux 内核中的情况\n\n```text\n  0====>-----------------------------  ---|             --------------------------------------              \n        |     ELF  header           |     |             |      Kernel Virtual           |  /| 1GB\n        |                           |     |             |                               |   |/  \n        |---------------------------|     |             |-------------------------------|<===== 0xC000 00000  \n        |   Program header table    |     |             |     User Stack  (dynamic)     |  <-- 栈 \n        |                           |     |             |                               |\n        |---------------------------|     |             |-------------------------------|<===== %esp\n        |          .init            |     | \\           |            /|\\                |\n        |---------------------------|     |  \\          |             |                 |\n        |          .text            |     |   \\         |            \\|/                |\n        |---------------------------|     |    \\        |-------------------------------|\n        |          .rodata          |     |     \\       |        dynamic libs           | <-- 共享库区域\n        |---------------------------|  ---|      |      |-------------------------------|\n        |           .data           | ---|       |      |           /|\\                 |\n        |---------------------------|    |\\      |      |            |                  |\n        |           .bss            | ---| \\     |      |            |                  |\n        |---------------------------|       \\    |      |-------------------------------|<===== brk\n        |           .symtab         |       |    |      |          heap                 | <-- 堆： 由程序主动申请释放(malloc, new)\n        |---------------------------|       |     \\     |-------------------------------|\n        |           .debug          |       |      ---->|        .data ,  .bss          | <-- 读写数据段\n        |---------------------------|        \\          |-------------------------------|             \n        |           .line           |         \\---->    |       .init, .text, .rodata   | <-- 只读代码段\n        |---------------------------|                   |-------------------------------|<===== 0x0804 8000\n        |           .data           |                   |                               |\n        |---------------------------|                   |         not used yet          |\n        |           .strtab         |                   |                               |\n        |---------------------------|                   |-------------------------------|<===== 0 \n                ELF 文件(磁盘)                               Linux 虚拟空间\n```\n\n#### sections\n\n* header\n    包括：我们字节标识信息， 文件类型(.O, exec, .so), 机器类型(IA-32, IA-64, Power-32)\n\n* `.text`\n  编译后的代码部分\n\n* `.rodata`\n  只读数据\n\n* `.data`\n  已初始化的全局变量\n\n* `.bss`\n  block started by symbol\n  为初始化的全局变量, 仅仅作为占位符, 不占据任何实际磁盘空间。\n  > 区分初始化和非初始化是为了提供空间效率\n\n  因为C语言中已经规定: 未初始化的全局变量和局部静态变量的默认值为零。\n  所以，将为初始化的变量和已经初始化的变量分开成两个段：\n  * `.data` 中存放具体的初始值, 仅占有一定的磁盘空间\n  * `.bss` 中仅说明变量将来执行时占用几个字节即可, 几乎不占用磁盘空间， 提高了执行效率\n\n* '.symtab`\n  存放函数名和全局变量(符号表)信息\n\n* `.rel.text` & `.rel.data`\n  `.text` & `.data`的重定位信息, 用于重新修改代码段中的指令的地址信 & 对被模块使用或定义的全局变量进行重定位的信息。\n  在`.o`文件里面是需要的， 而实际的可执行文件里面已经重定位过了， 所以就不存在了。\n\n* `.debug`\n  调试符号表\n\n* `strtab`\n  包含`symtab` 和 `debug` 中符号和节名\n\n#### 代码对应ELF\n\n```cpp\n#include <stdio.h>\n\nint y = 100;                   // .data\nint x;                         // .bss\n\nvoid print() {\n    printf(\"hello!\");         // .text\n}\n\n\nint main() {                 // .text\n    static int a = 1;        // .data\n    static int b;            // .bss\n    int c = 200, d;           \n    print();\n}\n\n\n```\n#### elf.h\n\n通过 `man elf` 就可以获取elf 介绍的详细信息\n\n* elf header\n\n```c\n#define EI_NIDENT 16\n\ntypedef struct {\n    unsigned char e_ident[EI_NIDENT];\n    uint16_t      e_type;\n    uint16_t      e_machine;\n    uint32_t      e_version;\n    ElfN_Addr     e_entry;\n    ElfN_Off      e_phoff;\n    ElfN_Off      e_shoff;\n    uint32_t      e_flags;\n    uint16_t      e_ehsize;\n    uint16_t      e_phentsize;\n    uint16_t      e_phnum;\n    uint16_t      e_shentsize;\n    uint16_t      e_shnum;\n    uint16_t      e_shstrndx;\n} ElfN_Ehdr;\n\n# N = 32 or 64\n```\n* Program header (Phdr)\n\n```c\n// 32\ntypedef struct {\n    uint32_t   p_type;\n    Elf32_Off  p_offset;\n    Elf32_Addr p_vaddr;\n    Elf32_Addr p_paddr;\n    uint32_t   p_filesz;\n    uint32_t   p_memsz;\n    uint32_t   p_flags;\n    uint32_t   p_align;\n} Elf32_Phdr;\n\n// 64\ntypedef struct {\n    uint32_t   p_type;\n    uint32_t   p_flags;\n    Elf64_Off  p_offset;\n    Elf64_Addr p_vaddr;\n    Elf64_Addr p_paddr;\n    uint64_t   p_filesz;\n    uint64_t   p_memsz;\n    uint64_t   p_align;\n} Elf64_Phdr;\n\n```\n\n* Section header (Shdr)\n```c\ntypedef struct {\n    uint32_t   sh_name;\n    uint32_t   sh_type;\n    uint32_t   sh_flags;\n    Elf32_Addr sh_addr;\n    Elf32_Off  sh_offset;\n    uint32_t   sh_size;\n    uint32_t   sh_link;\n    uint32_t   sh_info;\n    uint32_t   sh_addralign;\n    uint32_t   sh_entsize;\n} Elf32_Shdr;\n\ntypedef struct {\n    uint32_t   sh_name;\n    uint32_t   sh_type;\n    uint64_t   sh_flags;\n    Elf64_Addr sh_addr;\n    Elf64_Off  sh_offset;\n    uint64_t   sh_size;\n    uint32_t   sh_link;\n    uint32_t   sh_info;\n    uint64_t   sh_addralign;\n    uint64_t   sh_entsize;\n} Elf64_Shdr;\n\n```\n*  String and symbol tables\n```bash\ntypedef struct {\n    uint32_t      st_name;\n    Elf32_Addr    st_value;\n    uint32_t      st_size;\n    unsigned char st_info;\n    unsigned char st_other;\n    uint16_t      st_shndx;\n} Elf32_Sym;\n\ntypedef struct {\n    uint32_t      st_name;\n    unsigned char st_info;\n    unsigned char st_other;\n    uint16_t      st_shndx;\n    Elf64_Addr    st_value;\n    uint64_t      st_size;\n} Elf64_Sym;\n\n```\n\n### 常用的工具\n\n`GNU Binutils` 是用来处理许多格式的目标文件(包括elf文件)一整套的编程语言工具程序，包括：\n\n* readelf\n  显示elf文件\n\n* objdump\n  显示elf和object格式文件，解码elf文件中高级语言语句所对应的机器语言语句段落，汇编语言语句段落\n\n* nm\n  显示elf文件中变量名和地址 \n\n* strings\n  打印文件中的可打印字符的字符串。\n  在开发软件的时候，各种文本/ASCII 信息会被添加到其中，比如打印信息、调试信息、帮助信息、错误等。只要这些信息都存在于二进制文件中，就可以用 `strings` 命令将其转储到屏幕上。\n\n* ldd \n  打印共享对象依赖关系。\n  对动态链接的二进制文件运行该命令会显示出所有依赖库和它们的路径。\n\n\n","slug":"elf简介","published":1,"updated":"2022-01-15T15:11:00.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfo0007079yast7hr36","content":"<h2 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h2><p>程序的转换处理过程:</p>\n<ol>\n<li>C代码 hello.c:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>预处理</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -E hello.c -o hello.i</span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;hello.c&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;&lt;built-in&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;&lt;command-line&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/stdc-predef.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;&lt;command-line&gt;&quot; 2</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;hello.c&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/stdio.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 27 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/libc-header-start.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 33 &quot;/usr/include/bits/libc-header-start.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/features.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 473 &quot;/usr/include/features.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/sys/cdefs.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 462 &quot;/usr/include/sys/cdefs.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/wordsize.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 463 &quot;/usr/include/sys/cdefs.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/long-double.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 464 &quot;/usr/include/sys/cdefs.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 474 &quot;/usr/include/features.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 497 &quot;/usr/include/features.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/gnu/stubs.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 10 &quot;/usr/include/gnu/stubs.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/gnu/stubs-64.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 11 &quot;/usr/include/gnu/stubs.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 498 &quot;/usr/include/features.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 34 &quot;/usr/include/bits/libc-header-start.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 28 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 209 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h&quot; 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 209 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h&quot; 3 4</span></span><br><span class=\"line\">typedef long unsigned int size_t;</span><br><span class=\"line\"><span class=\"comment\"># 34 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 40 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h&quot; 3 4</span></span><br><span class=\"line\">typedef __builtin_va_list __gnuc_va_list;</span><br><span class=\"line\"><span class=\"comment\"># 37 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 27 &quot;/usr/include/bits/types.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/wordsize.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 28 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/timesize.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 29 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned char __u_char;</span><br><span class=\"line\">typedef unsigned short int __u_short;</span><br><span class=\"line\">typedef unsigned int __u_int;</span><br><span class=\"line\">typedef unsigned long int __u_long;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef signed char __int8_t;</span><br><span class=\"line\">typedef unsigned char __uint8_t;</span><br><span class=\"line\">typedef signed short int __int16_t;</span><br><span class=\"line\">typedef unsigned short int __uint16_t;</span><br><span class=\"line\">typedef signed int __int32_t;</span><br><span class=\"line\">typedef unsigned int __uint32_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef signed long int __int64_t;</span><br><span class=\"line\">typedef unsigned long int __uint64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef __int8_t __int_least8_t;</span><br><span class=\"line\">typedef __uint8_t __uint_least8_t;</span><br><span class=\"line\">typedef __int16_t __int_least16_t;</span><br><span class=\"line\">typedef __uint16_t __uint_least16_t;</span><br><span class=\"line\">typedef __int32_t __int_least32_t;</span><br><span class=\"line\">typedef __uint32_t __uint_least32_t;</span><br><span class=\"line\">typedef __int64_t __int_least64_t;</span><br><span class=\"line\">typedef __uint64_t __uint_least64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __quad_t;</span><br><span class=\"line\">typedef unsigned long int __u_quad_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __intmax_t;</span><br><span class=\"line\">typedef unsigned long int __uintmax_t;</span><br><span class=\"line\"><span class=\"comment\"># 141 &quot;/usr/include/bits/types.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/typesizes.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 142 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/time64.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 143 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __dev_t;</span><br><span class=\"line\">typedef unsigned int __uid_t;</span><br><span class=\"line\">typedef unsigned int __gid_t;</span><br><span class=\"line\">typedef unsigned long int __ino_t;</span><br><span class=\"line\">typedef unsigned long int __ino64_t;</span><br><span class=\"line\">typedef unsigned int __mode_t;</span><br><span class=\"line\">typedef unsigned long int __nlink_t;</span><br><span class=\"line\">typedef long int __off_t;</span><br><span class=\"line\">typedef long int __off64_t;</span><br><span class=\"line\">typedef int __pid_t;</span><br><span class=\"line\">typedef struct &#123; int __val[2]; &#125; __fsid_t;</span><br><span class=\"line\">typedef long int __clock_t;</span><br><span class=\"line\">typedef unsigned long int __rlim_t;</span><br><span class=\"line\">typedef unsigned long int __rlim64_t;</span><br><span class=\"line\">typedef unsigned int __id_t;</span><br><span class=\"line\">typedef long int __time_t;</span><br><span class=\"line\">typedef unsigned int __useconds_t;</span><br><span class=\"line\">typedef long int __suseconds_t;</span><br><span class=\"line\">typedef long int __suseconds64_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef int __daddr_t;</span><br><span class=\"line\">typedef int __key_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef int __clockid_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef void * __timer_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __blksize_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __blkcnt_t;</span><br><span class=\"line\">typedef long int __blkcnt64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __fsblkcnt_t;</span><br><span class=\"line\">typedef unsigned long int __fsblkcnt64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __fsfilcnt_t;</span><br><span class=\"line\">typedef unsigned long int __fsfilcnt64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __fsword_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __ssize_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __syscall_slong_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __syscall_ulong_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef __off64_t __loff_t;</span><br><span class=\"line\">typedef char *__caddr_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __intptr_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned int __socklen_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef int __sig_atomic_t;</span><br><span class=\"line\"><span class=\"comment\"># 39 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__fpos_t.h&quot; 1 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__mbstate_t.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 13 &quot;/usr/include/bits/types/__mbstate_t.h&quot; 3 4</span></span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int __count;</span><br><span class=\"line\">  union</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    unsigned int __wch;</span><br><span class=\"line\">    char __wchb[4];</span><br><span class=\"line\">  &#125; __value;</span><br><span class=\"line\">&#125; __mbstate_t;</span><br><span class=\"line\"><span class=\"comment\"># 6 &quot;/usr/include/bits/types/__fpos_t.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct _G_fpos_t</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __off_t __pos;</span><br><span class=\"line\">  __mbstate_t __state;</span><br><span class=\"line\">&#125; __fpos_t;</span><br><span class=\"line\"><span class=\"comment\"># 40 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__fpos64_t.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 10 &quot;/usr/include/bits/types/__fpos64_t.h&quot; 3 4</span></span><br><span class=\"line\">typedef struct _G_fpos64_t</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __off64_t __pos;</span><br><span class=\"line\">  __mbstate_t __state;</span><br><span class=\"line\">&#125; __fpos64_t;</span><br><span class=\"line\"><span class=\"comment\"># 41 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__FILE.h&quot; 1 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct _IO_FILE;</span><br><span class=\"line\">typedef struct _IO_FILE __FILE;</span><br><span class=\"line\"><span class=\"comment\"># 42 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/FILE.h&quot; 1 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct _IO_FILE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct _IO_FILE FILE;</span><br><span class=\"line\"><span class=\"comment\"># 43 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/struct_FILE.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 35 &quot;/usr/include/bits/types/struct_FILE.h&quot; 3 4</span></span><br><span class=\"line\">struct _IO_FILE;</span><br><span class=\"line\">struct _IO_marker;</span><br><span class=\"line\">struct _IO_codecvt;</span><br><span class=\"line\">struct _IO_wide_data;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef void _IO_lock_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct _IO_FILE</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int _flags;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  char *_IO_read_ptr;</span><br><span class=\"line\">  char *_IO_read_end;</span><br><span class=\"line\">  char *_IO_read_base;</span><br><span class=\"line\">  char *_IO_write_base;</span><br><span class=\"line\">  char *_IO_write_ptr;</span><br><span class=\"line\">  char *_IO_write_end;</span><br><span class=\"line\">  char *_IO_buf_base;</span><br><span class=\"line\">  char *_IO_buf_end;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  char *_IO_save_base;</span><br><span class=\"line\">  char *_IO_backup_base;</span><br><span class=\"line\">  char *_IO_save_end;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct _IO_marker *_markers;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct _IO_FILE *_chain;</span><br><span class=\"line\"></span><br><span class=\"line\">  int _fileno;</span><br><span class=\"line\">  int _flags2;</span><br><span class=\"line\">  __off_t _old_offset;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  unsigned short _cur_column;</span><br><span class=\"line\">  signed char _vtable_offset;</span><br><span class=\"line\">  char _shortbuf[1];</span><br><span class=\"line\"></span><br><span class=\"line\">  _IO_lock_t *_lock;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  __off64_t _offset;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct _IO_codecvt *_codecvt;</span><br><span class=\"line\">  struct _IO_wide_data *_wide_data;</span><br><span class=\"line\">  struct _IO_FILE *_freeres_list;</span><br><span class=\"line\">  void *_freeres_buf;</span><br><span class=\"line\">  size_t __pad5;</span><br><span class=\"line\">  int _mode;</span><br><span class=\"line\"></span><br><span class=\"line\">  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\"># 44 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 52 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">typedef __gnuc_va_list va_list;</span><br><span class=\"line\"><span class=\"comment\"># 63 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">typedef __off_t off_t;</span><br><span class=\"line\"><span class=\"comment\"># 77 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">typedef __ssize_t ssize_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef __fpos_t fpos_t;</span><br><span class=\"line\"><span class=\"comment\"># 133 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/stdio_lim.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 134 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern FILE *stdin;</span><br><span class=\"line\">extern FILE *stdout;</span><br><span class=\"line\">extern FILE *stderr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\">extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int renameat (int __oldfd, const char *__old, int __newfd,</span><br><span class=\"line\">       const char *__new) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"><span class=\"comment\"># 173 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *tmpfile (void) ;</span><br><span class=\"line\"><span class=\"comment\"># 187 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"><span class=\"comment\"># 204 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern char *tempnam (const char *__dir, const char *__pfx)</span><br><span class=\"line\">     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fclose (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fflush (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 227 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fflush_unlocked (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 246 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *fopen (const char *__restrict __filename,</span><br><span class=\"line\">      const char *__restrict __modes) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern FILE *freopen (const char *__restrict __filename,</span><br><span class=\"line\">        const char *__restrict __modes,</span><br><span class=\"line\">        FILE *__restrict __stream) ;</span><br><span class=\"line\"><span class=\"comment\"># 279 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"><span class=\"comment\"># 292 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)</span><br><span class=\"line\">  __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,</span><br><span class=\"line\">      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,</span><br><span class=\"line\">         size_t __size) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fprintf (FILE *__restrict __stream,</span><br><span class=\"line\">      const char *__restrict __format, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int <span class=\"built_in\">printf</span> (const char *__restrict __format, ...);</span><br><span class=\"line\"></span><br><span class=\"line\">extern int sprintf (char *__restrict __s,</span><br><span class=\"line\">      const char *__restrict __format, ...) __attribute__ ((__nothrow__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,</span><br><span class=\"line\">       __gnuc_va_list __arg);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);</span><br><span class=\"line\"></span><br><span class=\"line\">extern int vsprintf (char *__restrict __s, const char *__restrict __format,</span><br><span class=\"line\">       __gnuc_va_list __arg) __attribute__ ((__nothrow__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int snprintf (char *__restrict __s, size_t __maxlen,</span><br><span class=\"line\">       const char *__restrict __format, ...)</span><br><span class=\"line\">     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));</span><br><span class=\"line\"></span><br><span class=\"line\">extern int vsnprintf (char *__restrict __s, size_t __maxlen,</span><br><span class=\"line\">        const char *__restrict __format, __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));</span><br><span class=\"line\"><span class=\"comment\"># 379 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int vdprintf (int __fd, const char *__restrict __fmt,</span><br><span class=\"line\">       __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__format__ (__printf__, 2, 0)));</span><br><span class=\"line\">extern int dprintf (int __fd, const char *__restrict __fmt, ...)</span><br><span class=\"line\">     __attribute__ ((__format__ (__printf__, 2, 3)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fscanf (FILE *__restrict __stream,</span><br><span class=\"line\">     const char *__restrict __format, ...) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int scanf (const char *__restrict __format, ...) ;</span><br><span class=\"line\"></span><br><span class=\"line\">extern int sscanf (const char *__restrict __s,</span><br><span class=\"line\">     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/floatn.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 119 &quot;/usr/include/bits/floatn.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/floatn-common.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 24 &quot;/usr/include/bits/floatn-common.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/long-double.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 25 &quot;/usr/include/bits/floatn-common.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 120 &quot;/usr/include/bits/floatn.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 407 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_fscanf&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                               ;</span><br><span class=\"line\">extern int scanf (const char *__restrict __format, ...) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_scanf&quot;</span>)</span><br><span class=\"line\">                              ;</span><br><span class=\"line\">extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_sscanf&quot;</span>) __attribute__ ((__nothrow__ , __leaf__))</span><br><span class=\"line\"></span><br><span class=\"line\">                      ;</span><br><span class=\"line\"><span class=\"comment\"># 435 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,</span><br><span class=\"line\">      __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 2, 0))) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 1, 0))) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vsscanf (const char *__restrict __s,</span><br><span class=\"line\">      const char *__restrict __format, __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_vfscanf&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 2, 0))) ;</span><br><span class=\"line\">extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_vscanf&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 1, 0))) ;</span><br><span class=\"line\">extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_vsscanf&quot;</span>) __attribute__ ((__nothrow__ , __leaf__))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 2, 0)));</span><br><span class=\"line\"><span class=\"comment\"># 489 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fgetc (FILE *__stream);</span><br><span class=\"line\">extern int getc (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int getchar (void);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int getc_unlocked (FILE *__stream);</span><br><span class=\"line\">extern int getchar_unlocked (void);</span><br><span class=\"line\"><span class=\"comment\"># 514 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fgetc_unlocked (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 525 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fputc (int __c, FILE *__stream);</span><br><span class=\"line\">extern int putc (int __c, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int putchar (int __c);</span><br><span class=\"line\"><span class=\"comment\"># 541 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fputc_unlocked (int __c, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int putc_unlocked (int __c, FILE *__stream);</span><br><span class=\"line\">extern int putchar_unlocked (int __c);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int getw (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int putw (int __w, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)</span><br><span class=\"line\">     __attribute__ ((__access__ (__write_only__, 1, 2)));</span><br><span class=\"line\"><span class=\"comment\"># 608 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern __ssize_t __getdelim (char **__restrict __lineptr,</span><br><span class=\"line\">                             size_t *__restrict __n, int __delimiter,</span><br><span class=\"line\">                             FILE *__restrict __stream) ;</span><br><span class=\"line\">extern __ssize_t getdelim (char **__restrict __lineptr,</span><br><span class=\"line\">                           size_t *__restrict __n, int __delimiter,</span><br><span class=\"line\">                           FILE *__restrict __stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern __ssize_t getline (char **__restrict __lineptr,</span><br><span class=\"line\">                          size_t *__restrict __n,</span><br><span class=\"line\">                          FILE *__restrict __stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fputs (const char *__restrict __s, FILE *__restrict __stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int puts (const char *__s);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int ungetc (int __c, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern size_t fread (void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">       size_t __n, FILE *__restrict __stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern size_t fwrite (const void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">        size_t __n, FILE *__restrict __s);</span><br><span class=\"line\"><span class=\"comment\"># 678 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">         size_t __n, FILE *__restrict __stream) ;</span><br><span class=\"line\">extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">          size_t __n, FILE *__restrict __stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fseek (FILE *__stream, long int __off, int __whence);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern long int ftell (FILE *__stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void rewind (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 712 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fseeko (FILE *__stream, __off_t __off, int __whence);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern __off_t ftello (FILE *__stream) ;</span><br><span class=\"line\"><span class=\"comment\"># 736 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fsetpos (FILE *__stream, const fpos_t *__pos);</span><br><span class=\"line\"><span class=\"comment\"># 762 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\">extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\">extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\">extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\">extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void perror (const char *__s);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"><span class=\"comment\"># 799 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *popen (const char *__command, const char *__modes) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int pclose (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"><span class=\"comment\"># 839 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"><span class=\"comment\"># 857 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int __uflow (FILE *);</span><br><span class=\"line\">extern int __overflow (FILE *, int);</span><br><span class=\"line\"><span class=\"comment\"># 874 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 &quot;hello.c&quot; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 &quot;hello.c&quot;</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>汇编<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -S hello.</span><br></pre></td></tr></table></figure>\n查看生成内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t.file\t<span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.section\t.rodata</span><br><span class=\"line\">.LC0:</span><br><span class=\"line\">\t.string\t<span class=\"string\">&quot;hello!&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.globl\tmain</span><br><span class=\"line\">\t.<span class=\"built_in\">type</span>\tmain, @<span class=\"keyword\">function</span></span><br><span class=\"line\">main:</span><br><span class=\"line\">.LFB0:</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">\tpushq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa_offset 16</span><br><span class=\"line\">\t.cfi_offset 6, -16</span><br><span class=\"line\">\tmovq\t%rsp, %rbp</span><br><span class=\"line\">\t.cfi_def_cfa_register 6</span><br><span class=\"line\">\tleaq\t.LC0(%rip), %rax</span><br><span class=\"line\">\tmovq\t%rax, %rdi</span><br><span class=\"line\">\tmovl\t<span class=\"variable\">$0</span>, %eax</span><br><span class=\"line\">\tcall\t<span class=\"built_in\">printf</span>@PLT</span><br><span class=\"line\">\tmovl\t<span class=\"variable\">$0</span>, %eax</span><br><span class=\"line\">\tpopq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa 7, 8</span><br><span class=\"line\">\tret</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">.LFE0:</span><br><span class=\"line\">\t.size\tmain, .-main</span><br><span class=\"line\">\t.ident\t<span class=\"string\">&quot;GCC: (GNU) 11.1.0&quot;</span></span><br><span class=\"line\">\t.section\t.note.GNU-stack,<span class=\"string\">&quot;&quot;</span>,@progbits</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>机器码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -C hello.s</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>file 查看</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br></pre></td></tr></table></figure></li>\n<li><p>objdump 查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello.o:     file format elf64-x86-64</span><br><span class=\"line\">hello.o</span><br></pre></td></tr></table></figure></li>\n<li><p>nm 查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                 U _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">0000000000000000 T main</span><br><span class=\"line\">                 U <span class=\"built_in\">printf</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>readelf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ELF Header: </span><br><span class=\"line\">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">  Class:                             ELF64</span><br><span class=\"line\">  Data:                              2<span class=\"string\">&#x27;s complement, little endian</span></span><br><span class=\"line\"><span class=\"string\">  Version:                           1 (current)</span></span><br><span class=\"line\"><span class=\"string\">  OS/ABI:                            UNIX - System V</span></span><br><span class=\"line\"><span class=\"string\">  ABI Version:                       0</span></span><br><span class=\"line\"><span class=\"string\">  Type:                              REL (Relocatable file)</span></span><br><span class=\"line\"><span class=\"string\">  Machine:                           Advanced Micro Devices X86-64</span></span><br><span class=\"line\"><span class=\"string\">  Version:                           0x1</span></span><br><span class=\"line\"><span class=\"string\">  Entry point address:               0x0</span></span><br><span class=\"line\"><span class=\"string\">  Start of program headers:          0 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">  Start of section headers:          640 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">  Flags:                             0x0</span></span><br><span class=\"line\"><span class=\"string\">  Size of this header:               64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">  Size of program headers:           0 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">  Number of program headers:         0</span></span><br><span class=\"line\"><span class=\"string\">  Size of section headers:           64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">  Number of section headers:         14</span></span><br><span class=\"line\"><span class=\"string\">  Section header string table index: 13</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Section Headers:</span></span><br><span class=\"line\"><span class=\"string\">  [Nr] Name              Type             Address           Offset</span></span><br><span class=\"line\"><span class=\"string\">       Size              EntSize          Flags  Link  Info  Align</span></span><br><span class=\"line\"><span class=\"string\">  [ 0]                   NULL             0000000000000000  00000000</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000           0     0     0</span></span><br><span class=\"line\"><span class=\"string\">  [ 1] .text             PROGBITS         0000000000000000  00000040</span></span><br><span class=\"line\"><span class=\"string\">       000000000000001f  0000000000000000  AX       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 2] .rela.text        RELA             0000000000000000  000001c0</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000030  0000000000000018   I      11     1     8</span></span><br><span class=\"line\"><span class=\"string\">  [ 3] .data             PROGBITS         0000000000000000  0000005f</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000  WA       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 4] .bss              NOBITS           0000000000000000  0000005f</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000  WA       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 5] .rodata           PROGBITS         0000000000000000  0000005f</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000007  0000000000000000   A       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 6] .comment          PROGBITS         0000000000000000  00000066</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000013  0000000000000001  MS       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  00000079</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 8] .note.gnu.pr[...] NOTE             0000000000000000  00000080</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000030  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">  [ 9] .eh_frame         PROGBITS         0000000000000000  000000b0</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000038  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">  [10] .rela.eh_frame    RELA             0000000000000000  000001f0</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000018  0000000000000018   I      11     9     8</span></span><br><span class=\"line\"><span class=\"string\">  [11] .symtab           SYMTAB           0000000000000000  000000e8</span></span><br><span class=\"line\"><span class=\"string\">       00000000000000a8  0000000000000018          12     4     8</span></span><br><span class=\"line\"><span class=\"string\">  [12] .strtab           STRTAB           0000000000000000  00000190</span></span><br><span class=\"line\"><span class=\"string\">       000000000000002b  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [13] .shstrtab         STRTAB           0000000000000000  00000208</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000074  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">Key to Flags:</span></span><br><span class=\"line\"><span class=\"string\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span></span><br><span class=\"line\"><span class=\"string\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span></span><br><span class=\"line\"><span class=\"string\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span></span><br><span class=\"line\"><span class=\"string\">  l (large), p (processor specific)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are no section groups in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are no program headers in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There is no dynamic section in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.text<span class=\"string\">&#x27; at offset 0x1c0 contains 2 entries:</span></span><br><span class=\"line\"><span class=\"string\">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000000007  000300000002 R_X86_64_PC32     0000000000000000 .rodata - 4</span></span><br><span class=\"line\"><span class=\"string\">000000000014  000600000004 R_X86_64_PLT32    0000000000000000 printf - 4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.eh_frame<span class=\"string\">&#x27; at offset 0x1f0 contains 1 entry:</span></span><br><span class=\"line\"><span class=\"string\">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Symbol table &#x27;</span>.symtab<span class=\"string\">&#x27; contains 7 entries:</span></span><br><span class=\"line\"><span class=\"string\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span></span><br><span class=\"line\"><span class=\"string\">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span></span><br><span class=\"line\"><span class=\"string\">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c</span></span><br><span class=\"line\"><span class=\"string\">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span></span><br><span class=\"line\"><span class=\"string\">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span></span><br><span class=\"line\"><span class=\"string\">     4: 0000000000000000    31 FUNC    GLOBAL DEFAULT    1 main</span></span><br><span class=\"line\"><span class=\"string\">     5: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_</span></span><br><span class=\"line\"><span class=\"string\">     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">No version information found in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.gnu.property</span></span><br><span class=\"line\"><span class=\"string\">  Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">  GNU                  0x00000020\tNT_GNU_PROPERTY_TYPE_0</span></span><br><span class=\"line\"><span class=\"string\">      Properties: x86 ISA used: </span></span><br><span class=\"line\"><span class=\"string\">\tx86 feature used: x86</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc hello.o -o hello</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>file 查看</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=92f33896a3687559674a0d0f204f68984bfd8ee3, <span class=\"keyword\">for</span> GNU/Linux 4.4.0, not stripped</span><br></pre></td></tr></table></figure>\n<ul>\n<li>readelf：  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ELF Header:</span><br><span class=\"line\">Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">Class:                             ELF64</span><br><span class=\"line\">Data:                              2<span class=\"string\">&#x27;s complement, little endian</span></span><br><span class=\"line\"><span class=\"string\">Version:                           1 (current)</span></span><br><span class=\"line\"><span class=\"string\">OS/ABI:                            UNIX - System V</span></span><br><span class=\"line\"><span class=\"string\">ABI Version:                       0</span></span><br><span class=\"line\"><span class=\"string\">Type:                              DYN (Shared object file)</span></span><br><span class=\"line\"><span class=\"string\">Machine:                           Advanced Micro Devices X86-64</span></span><br><span class=\"line\"><span class=\"string\">Version:                           0x1</span></span><br><span class=\"line\"><span class=\"string\">Entry point address:               0x1040</span></span><br><span class=\"line\"><span class=\"string\">Start of program headers:          64 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">Start of section headers:          14168 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">Flags:                             0x0</span></span><br><span class=\"line\"><span class=\"string\">Size of this header:               64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">Size of program headers:           56 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">Number of program headers:         13</span></span><br><span class=\"line\"><span class=\"string\">Size of section headers:           64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">Number of section headers:         30</span></span><br><span class=\"line\"><span class=\"string\">Section header string table index: 29</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Section Headers:</span></span><br><span class=\"line\"><span class=\"string\">[Nr] Name              Type             Address           Offset</span></span><br><span class=\"line\"><span class=\"string\">    Size              EntSize          Flags  Link  Info  Align</span></span><br><span class=\"line\"><span class=\"string\">[ 0]                   NULL             0000000000000000  00000000</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000000  0000000000000000           0     0     0</span></span><br><span class=\"line\"><span class=\"string\">[ 1] .interp           PROGBITS         0000000000000318  00000318</span></span><br><span class=\"line\"><span class=\"string\">    000000000000001c  0000000000000000   A       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000040  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[ 3] .note.gnu.bu[...] NOTE             0000000000000378  00000378</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000024  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[ 4] .note.ABI-tag     NOTE             000000000000039c  0000039c</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[ 5] .gnu.hash         GNU_HASH         00000000000003c0  000003c0</span></span><br><span class=\"line\"><span class=\"string\">    000000000000001c  0000000000000000   A       6     0     8</span></span><br><span class=\"line\"><span class=\"string\">[ 6] .dynsym           DYNSYM           00000000000003e0  000003e0</span></span><br><span class=\"line\"><span class=\"string\">    00000000000000a8  0000000000000018   A       7     1     8</span></span><br><span class=\"line\"><span class=\"string\">[ 7] .dynstr           STRTAB           0000000000000488  00000488</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000084  0000000000000000   A       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[ 8] .gnu.version      VERSYM           000000000000050c  0000050c</span></span><br><span class=\"line\"><span class=\"string\">    000000000000000e  0000000000000002   A       6     0     2</span></span><br><span class=\"line\"><span class=\"string\">[ 9] .gnu.version_r    VERNEED          0000000000000520  00000520</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000000   A       7     1     8</span></span><br><span class=\"line\"><span class=\"string\">[10] .rela.dyn         RELA             0000000000000540  00000540</span></span><br><span class=\"line\"><span class=\"string\">    00000000000000c0  0000000000000018   A       6     0     8</span></span><br><span class=\"line\"><span class=\"string\">[11] .rela.plt         RELA             0000000000000600  00000600</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000018  0000000000000018  AI       6    23     8</span></span><br><span class=\"line\"><span class=\"string\">[12] .init             PROGBITS         0000000000001000  00001000</span></span><br><span class=\"line\"><span class=\"string\">    000000000000001b  0000000000000000  AX       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[13] .plt              PROGBITS         0000000000001020  00001020</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000010  AX       0     0     16</span></span><br><span class=\"line\"><span class=\"string\">[14] .text             PROGBITS         0000000000001040  00001040</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000195  0000000000000000  AX       0     0     16</span></span><br><span class=\"line\"><span class=\"string\">[15] .fini             PROGBITS         00000000000011d8  000011d8</span></span><br><span class=\"line\"><span class=\"string\">    000000000000000d  0000000000000000  AX       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[16] .rodata           PROGBITS         0000000000002000  00002000</span></span><br><span class=\"line\"><span class=\"string\">    000000000000000b  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[17] .eh_frame_hdr     PROGBITS         000000000000200c  0000200c</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000034  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[18] .eh_frame         PROGBITS         0000000000002040  00002040</span></span><br><span class=\"line\"><span class=\"string\">    00000000000000d8  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[19] .init_array       INIT_ARRAY       0000000000003de8  00002de8</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000008  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[20] .fini_array       FINI_ARRAY       0000000000003df0  00002df0</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000008  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[21] .dynamic          DYNAMIC          0000000000003df8  00002df8</span></span><br><span class=\"line\"><span class=\"string\">    00000000000001e0  0000000000000010  WA       7     0     8</span></span><br><span class=\"line\"><span class=\"string\">[22] .got              PROGBITS         0000000000003fd8  00002fd8</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000028  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[23] .got.plt          PROGBITS         0000000000004000  00003000</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[24] .data             PROGBITS         0000000000004020  00003020</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000010  0000000000000000  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[25] .bss              NOBITS           0000000000004030  00003030</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000008  0000000000000000  WA       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[26] .comment          PROGBITS         0000000000000000  00003030</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000012  0000000000000001  MS       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[27] .symtab           SYMTAB           0000000000000000  00003048</span></span><br><span class=\"line\"><span class=\"string\">    00000000000003d8  0000000000000018          28    22     8</span></span><br><span class=\"line\"><span class=\"string\">[28] .strtab           STRTAB           0000000000000000  00003420</span></span><br><span class=\"line\"><span class=\"string\">    000000000000021b  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[29] .shstrtab         STRTAB           0000000000000000  0000363b</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000116  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">Key to Flags:</span></span><br><span class=\"line\"><span class=\"string\">W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span></span><br><span class=\"line\"><span class=\"string\">L (link order), O (extra OS processing required), G (group), T (TLS),</span></span><br><span class=\"line\"><span class=\"string\">C (compressed), x (unknown), o (OS specific), E (exclude),</span></span><br><span class=\"line\"><span class=\"string\">l (large), p (processor specific)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are no section groups in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Program Headers:</span></span><br><span class=\"line\"><span class=\"string\">Type           Offset             VirtAddr           PhysAddr</span></span><br><span class=\"line\"><span class=\"string\">                FileSiz            MemSiz              Flags  Align</span></span><br><span class=\"line\"><span class=\"string\">PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040</span></span><br><span class=\"line\"><span class=\"string\">                0x00000000000002d8 0x00000000000002d8  R      0x8</span></span><br><span class=\"line\"><span class=\"string\">INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318</span></span><br><span class=\"line\"><span class=\"string\">                0x000000000000001c 0x000000000000001c  R      0x1</span></span><br><span class=\"line\"><span class=\"string\">    [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000618 0x0000000000000618  R      0x1000</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000</span></span><br><span class=\"line\"><span class=\"string\">                0x00000000000001e5 0x00000000000001e5  R E    0x1000</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000118 0x0000000000000118  R      0x1000</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000002de8 0x0000000000003de8 0x0000000000003de8</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000248 0x0000000000000250  RW     0x1000</span></span><br><span class=\"line\"><span class=\"string\">DYNAMIC        0x0000000000002df8 0x0000000000003df8 0x0000000000003df8</span></span><br><span class=\"line\"><span class=\"string\">                0x00000000000001e0 0x00000000000001e0  RW     0x8</span></span><br><span class=\"line\"><span class=\"string\">NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000040 0x0000000000000040  R      0x8</span></span><br><span class=\"line\"><span class=\"string\">NOTE           0x0000000000000378 0x0000000000000378 0x0000000000000378</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000044 0x0000000000000044  R      0x4</span></span><br><span class=\"line\"><span class=\"string\">GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000040 0x0000000000000040  R      0x8</span></span><br><span class=\"line\"><span class=\"string\">GNU_EH_FRAME   0x000000000000200c 0x000000000000200c 0x000000000000200c</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000034 0x0000000000000034  R      0x4</span></span><br><span class=\"line\"><span class=\"string\">GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000000 0x0000000000000000  RW     0x10</span></span><br><span class=\"line\"><span class=\"string\">GNU_RELRO      0x0000000000002de8 0x0000000000003de8 0x0000000000003de8</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000218 0x0000000000000218  R      0x1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Section to Segment mapping:</span></span><br><span class=\"line\"><span class=\"string\">Segment Sections...</span></span><br><span class=\"line\"><span class=\"string\">00     </span></span><br><span class=\"line\"><span class=\"string\">01     .interp </span></span><br><span class=\"line\"><span class=\"string\">02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt </span></span><br><span class=\"line\"><span class=\"string\">03     .init .plt .text .fini </span></span><br><span class=\"line\"><span class=\"string\">04     .rodata .eh_frame_hdr .eh_frame </span></span><br><span class=\"line\"><span class=\"string\">05     .init_array .fini_array .dynamic .got .got.plt .data .bss </span></span><br><span class=\"line\"><span class=\"string\">06     .dynamic </span></span><br><span class=\"line\"><span class=\"string\">07     .note.gnu.property </span></span><br><span class=\"line\"><span class=\"string\">08     .note.gnu.build-id .note.ABI-tag </span></span><br><span class=\"line\"><span class=\"string\">09     .note.gnu.property </span></span><br><span class=\"line\"><span class=\"string\">10     .eh_frame_hdr </span></span><br><span class=\"line\"><span class=\"string\">11     </span></span><br><span class=\"line\"><span class=\"string\">12     .init_array .fini_array .dynamic .got </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Dynamic section at offset 0x2df8 contains 26 entries:</span></span><br><span class=\"line\"><span class=\"string\">Tag        Type                         Name/Value</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000c (INIT)               0x1000</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000d (FINI)               0x11d8</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000019 (INIT_ARRAY)         0x3de8</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000001a (FINI_ARRAY)         0x3df0</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffef5 (GNU_HASH)           0x3c0</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000005 (STRTAB)             0x488</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000006 (SYMTAB)             0x3e0</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000a (STRSZ)              132 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000b (SYMENT)             24 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000015 (DEBUG)              0x0</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000003 (PLTGOT)             0x4000</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000002 (PLTRELSZ)           24 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000014 (PLTREL)             RELA</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000017 (JMPREL)             0x600</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000007 (RELA)               0x540</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000008 (RELASZ)             192 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000009 (RELAENT)            24 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffffb (FLAGS_1)            Flags: PIE</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffffe (VERNEED)            0x520</span></span><br><span class=\"line\"><span class=\"string\">0x000000006fffffff (VERNEEDNUM)         1</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffff0 (VERSYM)             0x50c</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffff9 (RELACOUNT)          3</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000000 (NULL)               0x0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.dyn<span class=\"string\">&#x27; at offset 0x540 contains 8 entries:</span></span><br><span class=\"line\"><span class=\"string\">Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000003de8  000000000008 R_X86_64_RELATIVE                    1130</span></span><br><span class=\"line\"><span class=\"string\">000000003df0  000000000008 R_X86_64_RELATIVE                    10e0</span></span><br><span class=\"line\"><span class=\"string\">000000004028  000000000008 R_X86_64_RELATIVE                    4028</span></span><br><span class=\"line\"><span class=\"string\">000000003fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTM[...] + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCl[...] + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.plt<span class=\"string\">&#x27; at offset 0x600 contains 1 entry:</span></span><br><span class=\"line\"><span class=\"string\">Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000004018  000200000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Symbol table &#x27;</span>.dynsym<span class=\"string\">&#x27; contains 7 entries:</span></span><br><span class=\"line\"><span class=\"string\">Num:    Value          Size Type    Bind   Vis      Ndx Name</span></span><br><span class=\"line\"><span class=\"string\">    0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span></span><br><span class=\"line\"><span class=\"string\">    1: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]</span></span><br><span class=\"line\"><span class=\"string\">    2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\"><span class=\"string\">    3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\"><span class=\"string\">    4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span></span><br><span class=\"line\"><span class=\"string\">    5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]</span></span><br><span class=\"line\"><span class=\"string\">    6: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND [...]@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Symbol table &#x27;</span>.symtab<span class=\"string\">&#x27; contains 41 entries:</span></span><br><span class=\"line\"><span class=\"string\">Num:    Value          Size Type    Bind   Vis      Ndx Name</span></span><br><span class=\"line\"><span class=\"string\">    0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span></span><br><span class=\"line\"><span class=\"string\">    1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS abi-note.c</span></span><br><span class=\"line\"><span class=\"string\">    2: 000000000000039c    32 OBJECT  LOCAL  DEFAULT    4 __abi_tag</span></span><br><span class=\"line\"><span class=\"string\">    3: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS init.c</span></span><br><span class=\"line\"><span class=\"string\">    4: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span></span><br><span class=\"line\"><span class=\"string\">    5: 0000000000001070     0 FUNC    LOCAL  DEFAULT   14 deregister_tm_clones</span></span><br><span class=\"line\"><span class=\"string\">    6: 00000000000010a0     0 FUNC    LOCAL  DEFAULT   14 register_tm_clones</span></span><br><span class=\"line\"><span class=\"string\">    7: 00000000000010e0     0 FUNC    LOCAL  DEFAULT   14 __do_global_dtors_aux</span></span><br><span class=\"line\"><span class=\"string\">    8: 0000000000004030     1 OBJECT  LOCAL  DEFAULT   25 completed.0</span></span><br><span class=\"line\"><span class=\"string\">    9: 0000000000003df0     0 OBJECT  LOCAL  DEFAULT   20 __do_global_dtor[...]</span></span><br><span class=\"line\"><span class=\"string\">    10: 0000000000001130     0 FUNC    LOCAL  DEFAULT   14 frame_dummy</span></span><br><span class=\"line\"><span class=\"string\">    11: 0000000000003de8     0 OBJECT  LOCAL  DEFAULT   19 __frame_dummy_in[...]</span></span><br><span class=\"line\"><span class=\"string\">    12: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c</span></span><br><span class=\"line\"><span class=\"string\">    13: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span></span><br><span class=\"line\"><span class=\"string\">    14: 0000000000002114     0 OBJECT  LOCAL  DEFAULT   18 __FRAME_END__</span></span><br><span class=\"line\"><span class=\"string\">    15: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS </span></span><br><span class=\"line\"><span class=\"string\">    16: 0000000000003df0     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_end</span></span><br><span class=\"line\"><span class=\"string\">    17: 0000000000003df8     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC</span></span><br><span class=\"line\"><span class=\"string\">    18: 0000000000003de8     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_start</span></span><br><span class=\"line\"><span class=\"string\">    19: 000000000000200c     0 NOTYPE  LOCAL  DEFAULT   17 __GNU_EH_FRAME_HDR</span></span><br><span class=\"line\"><span class=\"string\">    20: 0000000000004000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_</span></span><br><span class=\"line\"><span class=\"string\">    21: 0000000000001000     0 FUNC    LOCAL  DEFAULT   12 _init</span></span><br><span class=\"line\"><span class=\"string\">    22: 00000000000011d0     5 FUNC    GLOBAL DEFAULT   14 __libc_csu_fini</span></span><br><span class=\"line\"><span class=\"string\">    23: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]</span></span><br><span class=\"line\"><span class=\"string\">    24: 0000000000004020     0 NOTYPE  WEAK   DEFAULT   24 data_start</span></span><br><span class=\"line\"><span class=\"string\">    25: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   24 _edata</span></span><br><span class=\"line\"><span class=\"string\">    26: 00000000000011d8     0 FUNC    GLOBAL HIDDEN    15 _fini</span></span><br><span class=\"line\"><span class=\"string\">    27: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5</span></span><br><span class=\"line\"><span class=\"string\">    28: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_mai[...]</span></span><br><span class=\"line\"><span class=\"string\">    29: 0000000000004020     0 NOTYPE  GLOBAL DEFAULT   24 __data_start</span></span><br><span class=\"line\"><span class=\"string\">    30: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span></span><br><span class=\"line\"><span class=\"string\">    31: 0000000000004028     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle</span></span><br><span class=\"line\"><span class=\"string\">    32: 0000000000002000     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used</span></span><br><span class=\"line\"><span class=\"string\">    33: 0000000000001160   101 FUNC    GLOBAL DEFAULT   14 __libc_csu_init</span></span><br><span class=\"line\"><span class=\"string\">    34: 0000000000004038     0 NOTYPE  GLOBAL DEFAULT   25 _end</span></span><br><span class=\"line\"><span class=\"string\">    35: 0000000000001040    47 FUNC    GLOBAL DEFAULT   14 _start</span></span><br><span class=\"line\"><span class=\"string\">    36: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start</span></span><br><span class=\"line\"><span class=\"string\">    37: 0000000000001139    31 FUNC    GLOBAL DEFAULT   14 main</span></span><br><span class=\"line\"><span class=\"string\">    38: 0000000000004030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__</span></span><br><span class=\"line\"><span class=\"string\">    39: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]</span></span><br><span class=\"line\"><span class=\"string\">    40: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@G[...]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Version symbols section &#x27;</span>.gnu.version<span class=\"string\">&#x27; contains 7 entries:</span></span><br><span class=\"line\"><span class=\"string\">Addr: 0x000000000000050c  Offset: 0x00050c  Link: 6 (.dynsym)</span></span><br><span class=\"line\"><span class=\"string\">000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   2 (GLIBC_2.2.5)</span></span><br><span class=\"line\"><span class=\"string\">004:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Version needs section &#x27;</span>.gnu.version_r<span class=\"string\">&#x27; contains 1 entry:</span></span><br><span class=\"line\"><span class=\"string\">Addr: 0x0000000000000520  Offset: 0x000520  Link: 7 (.dynstr)</span></span><br><span class=\"line\"><span class=\"string\">000000: Version: 1  File: libc.so.6  Cnt: 1</span></span><br><span class=\"line\"><span class=\"string\">0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.gnu.property</span></span><br><span class=\"line\"><span class=\"string\">Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">GNU                  0x00000030\tNT_GNU_PROPERTY_TYPE_0</span></span><br><span class=\"line\"><span class=\"string\">    Properties: x86 ISA needed: x86-64-baseline</span></span><br><span class=\"line\"><span class=\"string\">    x86 feature used: x86</span></span><br><span class=\"line\"><span class=\"string\">    x86 ISA used: </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.gnu.build-id</span></span><br><span class=\"line\"><span class=\"string\">Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">GNU                  0x00000014\tNT_GNU_BUILD_ID (unique build ID bitstring)</span></span><br><span class=\"line\"><span class=\"string\">    Build ID: 92f33896a3687559674a0d0f204f68984bfd8ee3</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.ABI-tag</span></span><br><span class=\"line\"><span class=\"string\">Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">GNU                  0x00000010\tNT_GNU_ABI_TAG (ABI version tag)</span></span><br><span class=\"line\"><span class=\"string\">    OS: Linux, ABI: 4.4.0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></li>\n<li>nm  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000000039c r __abi_tag</span><br><span class=\"line\">0000000000004030 B __bss_start</span><br><span class=\"line\">0000000000004030 b completed.0</span><br><span class=\"line\">                w __cxa_finalize@GLIBC_2.2.5</span><br><span class=\"line\">0000000000004020 D __data_start</span><br><span class=\"line\">0000000000004020 W data_start</span><br><span class=\"line\">0000000000001070 t deregister_tm_clones</span><br><span class=\"line\">00000000000010e0 t __do_global_dtors_aux</span><br><span class=\"line\">0000000000003df0 d __do_global_dtors_aux_fini_array_entry</span><br><span class=\"line\">0000000000004028 D __dso_handle</span><br><span class=\"line\">0000000000003df8 d _DYNAMIC</span><br><span class=\"line\">0000000000004030 D _edata</span><br><span class=\"line\">0000000000004038 B _end</span><br><span class=\"line\">00000000000011d8 T _fini</span><br><span class=\"line\">0000000000001130 t frame_dummy</span><br><span class=\"line\">0000000000003de8 d __frame_dummy_init_array_entry</span><br><span class=\"line\">0000000000002114 r __FRAME_END__</span><br><span class=\"line\">0000000000004000 d _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">                w __gmon_start__</span><br><span class=\"line\">000000000000200c r __GNU_EH_FRAME_HDR</span><br><span class=\"line\">0000000000001000 t _init</span><br><span class=\"line\">0000000000003df0 d __init_array_end</span><br><span class=\"line\">0000000000003de8 d __init_array_start</span><br><span class=\"line\">0000000000002000 R _IO_stdin_used</span><br><span class=\"line\">                w _ITM_deregisterTMCloneTable</span><br><span class=\"line\">                w _ITM_registerTMCloneTable</span><br><span class=\"line\">00000000000011d0 T __libc_csu_fini</span><br><span class=\"line\">0000000000001160 T __libc_csu_init</span><br><span class=\"line\">                U __libc_start_main@GLIBC_2.2.5</span><br><span class=\"line\">0000000000001139 T main</span><br><span class=\"line\">                U <span class=\"built_in\">printf</span>@GLIBC_2.2.5</span><br><span class=\"line\">00000000000010a0 t register_tm_clones</span><br><span class=\"line\">0000000000001040 T _start</span><br><span class=\"line\">0000000000004030 D __TMC_END__</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"格式简介\"><a href=\"#格式简介\" class=\"headerlink\" title=\"格式简介\"></a>格式简介</h2><blockquote>\n<p>ELF： executable and linkable format</p>\n</blockquote>\n<p>一种用于可执行文件、目标代码、共享库和核心转储（<code>core dump</code>）的标准文件格式。<br>首次发布于一个名为 <code>System V Release 4（SVR4）</code>的 <code>Unix</code> 操作系统版本中关于应用二进制接口（ABI）的规范中，并且此后不久发布于工具接口标准（Tool Interface Standard），随后很快被不同 <code>Unix</code> 发行商所接受。1999 年，这种格式被 <code>86open</code> 项目选为 <code>x86</code> 架构处理器上的 <code>Unix</code> 和 类 Unix 系统的标准二进制文件格式。</p>\n<p>按照设计，ELF 格式灵活性高、可扩展，并且跨平台。比如它支持不同的字节序和地址范围，所以它不会不兼容某一特别的 CPU 或指令架构。这也使得 ELF 格式能够被运行于众多不同平台的各种操作系统所广泛采纳。</p>\n<p>每个 ELF 文件都由一个 ELF 首部和紧跟其后的文件数据部分组成。数据部分可以包含：</p>\n<ul>\n<li>程序头表（Program header table）：<br>描述 0 个或多个内存段信息<blockquote>\n<p>内存段中包含了用于某个 ELF 文件运行时执行所需的信息，而片段中包含了用于链接和重定位的重要数据。<br>  整个文件中的任何一个字节至多只能属于一个片段，也就是说可能存在不属于任何片段的孤立字节。</p>\n</blockquote>\n</li>\n<li>分段头表（Section header table）：<br>描述 0 段或多段链接与重定位需要的数据</li>\n<li>程序头表与分段头表引用的数据，比如 <code>.text</code>, <code>.data</code></li>\n</ul>\n<p>程序表中包含指向其他分段的索引， 分段表中也是如此：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------------</span><br><span class=\"line\">|     ELF  header           |</span><br><span class=\"line\">|---------------------------|</span><br><span class=\"line\">|   Program header table    |-------|</span><br><span class=\"line\">|---------------------------|       |</span><br><span class=\"line\">|          .text            |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|       |       |</span><br><span class=\"line\">|          .rodata          |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|       |       |</span><br><span class=\"line\">|           ......          |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|       |       |</span><br><span class=\"line\">|           .data           |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|               |</span><br><span class=\"line\">|  Section header table     |---------------|</span><br><span class=\"line\">|---------------------------|</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Linux-IA32</code> 下的 ELF 存储和对应到Linux 内核中的情况</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0====&gt;-----------------------------  ---|             --------------------------------------              </span><br><span class=\"line\">      |     ELF  header           |     |             |      Kernel Virtual           |  /| 1GB</span><br><span class=\"line\">      |                           |     |             |                               |   |/  </span><br><span class=\"line\">      |---------------------------|     |             |-------------------------------|&lt;===== 0xC000 00000  </span><br><span class=\"line\">      |   Program header table    |     |             |     User Stack  (dynamic)     |  &lt;-- 栈 </span><br><span class=\"line\">      |                           |     |             |                               |</span><br><span class=\"line\">      |---------------------------|     |             |-------------------------------|&lt;===== %esp</span><br><span class=\"line\">      |          .init            |     | \\           |            /|\\                |</span><br><span class=\"line\">      |---------------------------|     |  \\          |             |                 |</span><br><span class=\"line\">      |          .text            |     |   \\         |            \\|/                |</span><br><span class=\"line\">      |---------------------------|     |    \\        |-------------------------------|</span><br><span class=\"line\">      |          .rodata          |     |     \\       |        dynamic libs           | &lt;-- 共享库区域</span><br><span class=\"line\">      |---------------------------|  ---|      |      |-------------------------------|</span><br><span class=\"line\">      |           .data           | ---|       |      |           /|\\                 |</span><br><span class=\"line\">      |---------------------------|    |\\      |      |            |                  |</span><br><span class=\"line\">      |           .bss            | ---| \\     |      |            |                  |</span><br><span class=\"line\">      |---------------------------|       \\    |      |-------------------------------|&lt;===== brk</span><br><span class=\"line\">      |           .symtab         |       |    |      |          heap                 | &lt;-- 堆： 由程序主动申请释放(malloc, new)</span><br><span class=\"line\">      |---------------------------|       |     \\     |-------------------------------|</span><br><span class=\"line\">      |           .debug          |       |      ----&gt;|        .data ,  .bss          | &lt;-- 读写数据段</span><br><span class=\"line\">      |---------------------------|        \\          |-------------------------------|             </span><br><span class=\"line\">      |           .line           |         \\----&gt;    |       .init, .text, .rodata   | &lt;-- 只读代码段</span><br><span class=\"line\">      |---------------------------|                   |-------------------------------|&lt;===== 0x0804 8000</span><br><span class=\"line\">      |           .data           |                   |                               |</span><br><span class=\"line\">      |---------------------------|                   |         not used yet          |</span><br><span class=\"line\">      |           .strtab         |                   |                               |</span><br><span class=\"line\">      |---------------------------|                   |-------------------------------|&lt;===== 0 </span><br><span class=\"line\">              ELF 文件(磁盘)                               Linux 虚拟空间</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sections\"><a href=\"#sections\" class=\"headerlink\" title=\"sections\"></a>sections</h4><ul>\n<li><p>header<br>  包括：我们字节标识信息， 文件类型(.O, exec, .so), 机器类型(IA-32, IA-64, Power-32)</p>\n</li>\n<li><p><code>.text</code><br>编译后的代码部分</p>\n</li>\n<li><p><code>.rodata</code><br>只读数据</p>\n</li>\n<li><p><code>.data</code><br>已初始化的全局变量</p>\n</li>\n<li><p><code>.bss</code><br>block started by symbol<br>为初始化的全局变量, 仅仅作为占位符, 不占据任何实际磁盘空间。</p>\n<blockquote>\n<p>区分初始化和非初始化是为了提供空间效率</p>\n</blockquote>\n<p>因为C语言中已经规定: 未初始化的全局变量和局部静态变量的默认值为零。<br>所以，将为初始化的变量和已经初始化的变量分开成两个段：</p>\n<ul>\n<li><code>.data</code> 中存放具体的初始值, 仅占有一定的磁盘空间</li>\n<li><code>.bss</code> 中仅说明变量将来执行时占用几个字节即可, 几乎不占用磁盘空间， 提高了执行效率</li>\n</ul>\n</li>\n<li><p>‘.symtab`<br>存放函数名和全局变量(符号表)信息</p>\n</li>\n<li><p><code>.rel.text</code> &amp; <code>.rel.data</code><br><code>.text</code> &amp; <code>.data</code>的重定位信息, 用于重新修改代码段中的指令的地址信 &amp; 对被模块使用或定义的全局变量进行重定位的信息。<br>在<code>.o</code>文件里面是需要的， 而实际的可执行文件里面已经重定位过了， 所以就不存在了。</p>\n</li>\n<li><p><code>.debug</code><br>调试符号表</p>\n</li>\n<li><p><code>strtab</code><br>包含<code>symtab</code> 和 <code>debug</code> 中符号和节名</p>\n</li>\n</ul>\n<h4 id=\"代码对应ELF\"><a href=\"#代码对应ELF\" class=\"headerlink\" title=\"代码对应ELF\"></a>代码对应ELF</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> y = <span class=\"number\">100</span>;                   <span class=\"comment\">// .data</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x;                         <span class=\"comment\">// .bss</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello!&quot;</span>);         <span class=\"comment\">// .text</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;                 <span class=\"comment\">// .text</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;        <span class=\"comment\">// .data</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b;            <span class=\"comment\">// .bss</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">200</span>, d;           </span><br><span class=\"line\">    <span class=\"built_in\">print</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"elf-h\"><a href=\"#elf-h\" class=\"headerlink\" title=\"elf.h\"></a>elf.h</h4><p>通过 <code>man elf</code> 就可以获取elf 介绍的详细信息</p>\n<ul>\n<li>elf header</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EI_NIDENT 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> e_ident[EI_NIDENT];</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_machine;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>      e_version;</span><br><span class=\"line\">    ElfN_Addr     e_entry;</span><br><span class=\"line\">    ElfN_Off      e_phoff;</span><br><span class=\"line\">    ElfN_Off      e_shoff;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>      e_flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_ehsize;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_phentsize;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_phnum;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_shentsize;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_shnum;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_shstrndx;</span><br><span class=\"line\">&#125; ElfN_Ehdr;</span><br><span class=\"line\"></span><br><span class=\"line\"># N = <span class=\"number\">32</span> <span class=\"keyword\">or</span> <span class=\"number\">64</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Program header (Phdr)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 32</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_type;</span><br><span class=\"line\">    Elf32_Off  p_offset;</span><br><span class=\"line\">    Elf32_Addr p_vaddr;</span><br><span class=\"line\">    Elf32_Addr p_paddr;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_filesz;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_memsz;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_align;</span><br><span class=\"line\">&#125; Elf32_Phdr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_flags;</span><br><span class=\"line\">    Elf64_Off  p_offset;</span><br><span class=\"line\">    Elf64_Addr p_vaddr;</span><br><span class=\"line\">    Elf64_Addr p_paddr;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   p_filesz;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   p_memsz;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   p_align;</span><br><span class=\"line\">&#125; Elf64_Phdr;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Section header (Shdr)<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_name;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_flags;</span><br><span class=\"line\">    Elf32_Addr sh_addr;</span><br><span class=\"line\">    Elf32_Off  sh_offset;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_size;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_link;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_info;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_addralign;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_entsize;</span><br><span class=\"line\">&#125; Elf32_Shdr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_name;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_flags;</span><br><span class=\"line\">    Elf64_Addr sh_addr;</span><br><span class=\"line\">    Elf64_Off  sh_offset;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_size;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_link;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_info;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_addralign;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_entsize;</span><br><span class=\"line\">&#125; Elf64_Shdr;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li> String and symbol tables<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    uint32_t      st_name;</span><br><span class=\"line\">    Elf32_Addr    st_value;</span><br><span class=\"line\">    uint32_t      st_size;</span><br><span class=\"line\">    unsigned char st_info;</span><br><span class=\"line\">    unsigned char st_other;</span><br><span class=\"line\">    uint16_t      st_shndx;</span><br><span class=\"line\">&#125; Elf32_Sym;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    uint32_t      st_name;</span><br><span class=\"line\">    unsigned char st_info;</span><br><span class=\"line\">    unsigned char st_other;</span><br><span class=\"line\">    uint16_t      st_shndx;</span><br><span class=\"line\">    Elf64_Addr    st_value;</span><br><span class=\"line\">    uint64_t      st_size;</span><br><span class=\"line\">&#125; Elf64_Sym;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用的工具\"><a href=\"#常用的工具\" class=\"headerlink\" title=\"常用的工具\"></a>常用的工具</h3><p><code>GNU Binutils</code> 是用来处理许多格式的目标文件(包括elf文件)一整套的编程语言工具程序，包括：</p>\n<ul>\n<li><p>readelf<br>显示elf文件</p>\n</li>\n<li><p>objdump<br>显示elf和object格式文件，解码elf文件中高级语言语句所对应的机器语言语句段落，汇编语言语句段落</p>\n</li>\n<li><p>nm<br>显示elf文件中变量名和地址 </p>\n</li>\n<li><p>strings<br>打印文件中的可打印字符的字符串。<br>在开发软件的时候，各种文本/ASCII 信息会被添加到其中，比如打印信息、调试信息、帮助信息、错误等。只要这些信息都存在于二进制文件中，就可以用 <code>strings</code> 命令将其转储到屏幕上。</p>\n</li>\n<li><p>ldd<br>打印共享对象依赖关系。<br>对动态链接的二进制文件运行该命令会显示出所有依赖库和它们的路径。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h2><p>程序的转换处理过程:</p>\n<ol>\n<li>C代码 hello.c:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>预处理</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -E hello.c -o hello.i</span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;hello.c&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;&lt;built-in&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;&lt;command-line&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/stdc-predef.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 0 &quot;&lt;command-line&gt;&quot; 2</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;hello.c&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/stdio.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 27 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/libc-header-start.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 33 &quot;/usr/include/bits/libc-header-start.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/features.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 473 &quot;/usr/include/features.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/sys/cdefs.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 462 &quot;/usr/include/sys/cdefs.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/wordsize.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 463 &quot;/usr/include/sys/cdefs.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/long-double.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 464 &quot;/usr/include/sys/cdefs.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 474 &quot;/usr/include/features.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 497 &quot;/usr/include/features.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/gnu/stubs.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 10 &quot;/usr/include/gnu/stubs.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/gnu/stubs-64.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 11 &quot;/usr/include/gnu/stubs.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 498 &quot;/usr/include/features.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 34 &quot;/usr/include/bits/libc-header-start.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 28 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 209 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h&quot; 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 209 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h&quot; 3 4</span></span><br><span class=\"line\">typedef long unsigned int size_t;</span><br><span class=\"line\"><span class=\"comment\"># 34 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 40 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h&quot; 3 4</span></span><br><span class=\"line\">typedef __builtin_va_list __gnuc_va_list;</span><br><span class=\"line\"><span class=\"comment\"># 37 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 27 &quot;/usr/include/bits/types.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/wordsize.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 28 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/timesize.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 29 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned char __u_char;</span><br><span class=\"line\">typedef unsigned short int __u_short;</span><br><span class=\"line\">typedef unsigned int __u_int;</span><br><span class=\"line\">typedef unsigned long int __u_long;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef signed char __int8_t;</span><br><span class=\"line\">typedef unsigned char __uint8_t;</span><br><span class=\"line\">typedef signed short int __int16_t;</span><br><span class=\"line\">typedef unsigned short int __uint16_t;</span><br><span class=\"line\">typedef signed int __int32_t;</span><br><span class=\"line\">typedef unsigned int __uint32_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef signed long int __int64_t;</span><br><span class=\"line\">typedef unsigned long int __uint64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef __int8_t __int_least8_t;</span><br><span class=\"line\">typedef __uint8_t __uint_least8_t;</span><br><span class=\"line\">typedef __int16_t __int_least16_t;</span><br><span class=\"line\">typedef __uint16_t __uint_least16_t;</span><br><span class=\"line\">typedef __int32_t __int_least32_t;</span><br><span class=\"line\">typedef __uint32_t __uint_least32_t;</span><br><span class=\"line\">typedef __int64_t __int_least64_t;</span><br><span class=\"line\">typedef __uint64_t __uint_least64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __quad_t;</span><br><span class=\"line\">typedef unsigned long int __u_quad_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __intmax_t;</span><br><span class=\"line\">typedef unsigned long int __uintmax_t;</span><br><span class=\"line\"><span class=\"comment\"># 141 &quot;/usr/include/bits/types.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/typesizes.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 142 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/time64.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 143 &quot;/usr/include/bits/types.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __dev_t;</span><br><span class=\"line\">typedef unsigned int __uid_t;</span><br><span class=\"line\">typedef unsigned int __gid_t;</span><br><span class=\"line\">typedef unsigned long int __ino_t;</span><br><span class=\"line\">typedef unsigned long int __ino64_t;</span><br><span class=\"line\">typedef unsigned int __mode_t;</span><br><span class=\"line\">typedef unsigned long int __nlink_t;</span><br><span class=\"line\">typedef long int __off_t;</span><br><span class=\"line\">typedef long int __off64_t;</span><br><span class=\"line\">typedef int __pid_t;</span><br><span class=\"line\">typedef struct &#123; int __val[2]; &#125; __fsid_t;</span><br><span class=\"line\">typedef long int __clock_t;</span><br><span class=\"line\">typedef unsigned long int __rlim_t;</span><br><span class=\"line\">typedef unsigned long int __rlim64_t;</span><br><span class=\"line\">typedef unsigned int __id_t;</span><br><span class=\"line\">typedef long int __time_t;</span><br><span class=\"line\">typedef unsigned int __useconds_t;</span><br><span class=\"line\">typedef long int __suseconds_t;</span><br><span class=\"line\">typedef long int __suseconds64_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef int __daddr_t;</span><br><span class=\"line\">typedef int __key_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef int __clockid_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef void * __timer_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __blksize_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __blkcnt_t;</span><br><span class=\"line\">typedef long int __blkcnt64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __fsblkcnt_t;</span><br><span class=\"line\">typedef unsigned long int __fsblkcnt64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __fsfilcnt_t;</span><br><span class=\"line\">typedef unsigned long int __fsfilcnt64_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __fsword_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __ssize_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __syscall_slong_t;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned long int __syscall_ulong_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef __off64_t __loff_t;</span><br><span class=\"line\">typedef char *__caddr_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef long int __intptr_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned int __socklen_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef int __sig_atomic_t;</span><br><span class=\"line\"><span class=\"comment\"># 39 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__fpos_t.h&quot; 1 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__mbstate_t.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 13 &quot;/usr/include/bits/types/__mbstate_t.h&quot; 3 4</span></span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int __count;</span><br><span class=\"line\">  union</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    unsigned int __wch;</span><br><span class=\"line\">    char __wchb[4];</span><br><span class=\"line\">  &#125; __value;</span><br><span class=\"line\">&#125; __mbstate_t;</span><br><span class=\"line\"><span class=\"comment\"># 6 &quot;/usr/include/bits/types/__fpos_t.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct _G_fpos_t</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __off_t __pos;</span><br><span class=\"line\">  __mbstate_t __state;</span><br><span class=\"line\">&#125; __fpos_t;</span><br><span class=\"line\"><span class=\"comment\"># 40 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__fpos64_t.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 10 &quot;/usr/include/bits/types/__fpos64_t.h&quot; 3 4</span></span><br><span class=\"line\">typedef struct _G_fpos64_t</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __off64_t __pos;</span><br><span class=\"line\">  __mbstate_t __state;</span><br><span class=\"line\">&#125; __fpos64_t;</span><br><span class=\"line\"><span class=\"comment\"># 41 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/__FILE.h&quot; 1 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct _IO_FILE;</span><br><span class=\"line\">typedef struct _IO_FILE __FILE;</span><br><span class=\"line\"><span class=\"comment\"># 42 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/FILE.h&quot; 1 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct _IO_FILE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct _IO_FILE FILE;</span><br><span class=\"line\"><span class=\"comment\"># 43 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/types/struct_FILE.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 35 &quot;/usr/include/bits/types/struct_FILE.h&quot; 3 4</span></span><br><span class=\"line\">struct _IO_FILE;</span><br><span class=\"line\">struct _IO_marker;</span><br><span class=\"line\">struct _IO_codecvt;</span><br><span class=\"line\">struct _IO_wide_data;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef void _IO_lock_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct _IO_FILE</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int _flags;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  char *_IO_read_ptr;</span><br><span class=\"line\">  char *_IO_read_end;</span><br><span class=\"line\">  char *_IO_read_base;</span><br><span class=\"line\">  char *_IO_write_base;</span><br><span class=\"line\">  char *_IO_write_ptr;</span><br><span class=\"line\">  char *_IO_write_end;</span><br><span class=\"line\">  char *_IO_buf_base;</span><br><span class=\"line\">  char *_IO_buf_end;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  char *_IO_save_base;</span><br><span class=\"line\">  char *_IO_backup_base;</span><br><span class=\"line\">  char *_IO_save_end;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct _IO_marker *_markers;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct _IO_FILE *_chain;</span><br><span class=\"line\"></span><br><span class=\"line\">  int _fileno;</span><br><span class=\"line\">  int _flags2;</span><br><span class=\"line\">  __off_t _old_offset;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  unsigned short _cur_column;</span><br><span class=\"line\">  signed char _vtable_offset;</span><br><span class=\"line\">  char _shortbuf[1];</span><br><span class=\"line\"></span><br><span class=\"line\">  _IO_lock_t *_lock;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  __off64_t _offset;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct _IO_codecvt *_codecvt;</span><br><span class=\"line\">  struct _IO_wide_data *_wide_data;</span><br><span class=\"line\">  struct _IO_FILE *_freeres_list;</span><br><span class=\"line\">  void *_freeres_buf;</span><br><span class=\"line\">  size_t __pad5;</span><br><span class=\"line\">  int _mode;</span><br><span class=\"line\"></span><br><span class=\"line\">  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\"># 44 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 52 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">typedef __gnuc_va_list va_list;</span><br><span class=\"line\"><span class=\"comment\"># 63 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">typedef __off_t off_t;</span><br><span class=\"line\"><span class=\"comment\"># 77 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">typedef __ssize_t ssize_t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">typedef __fpos_t fpos_t;</span><br><span class=\"line\"><span class=\"comment\"># 133 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/stdio_lim.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 134 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern FILE *stdin;</span><br><span class=\"line\">extern FILE *stdout;</span><br><span class=\"line\">extern FILE *stderr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\">extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int renameat (int __oldfd, const char *__old, int __newfd,</span><br><span class=\"line\">       const char *__new) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"><span class=\"comment\"># 173 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *tmpfile (void) ;</span><br><span class=\"line\"><span class=\"comment\"># 187 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"><span class=\"comment\"># 204 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern char *tempnam (const char *__dir, const char *__pfx)</span><br><span class=\"line\">     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fclose (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fflush (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 227 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fflush_unlocked (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 246 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *fopen (const char *__restrict __filename,</span><br><span class=\"line\">      const char *__restrict __modes) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern FILE *freopen (const char *__restrict __filename,</span><br><span class=\"line\">        const char *__restrict __modes,</span><br><span class=\"line\">        FILE *__restrict __stream) ;</span><br><span class=\"line\"><span class=\"comment\"># 279 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"><span class=\"comment\"># 292 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)</span><br><span class=\"line\">  __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,</span><br><span class=\"line\">      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,</span><br><span class=\"line\">         size_t __size) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fprintf (FILE *__restrict __stream,</span><br><span class=\"line\">      const char *__restrict __format, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int <span class=\"built_in\">printf</span> (const char *__restrict __format, ...);</span><br><span class=\"line\"></span><br><span class=\"line\">extern int sprintf (char *__restrict __s,</span><br><span class=\"line\">      const char *__restrict __format, ...) __attribute__ ((__nothrow__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,</span><br><span class=\"line\">       __gnuc_va_list __arg);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);</span><br><span class=\"line\"></span><br><span class=\"line\">extern int vsprintf (char *__restrict __s, const char *__restrict __format,</span><br><span class=\"line\">       __gnuc_va_list __arg) __attribute__ ((__nothrow__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int snprintf (char *__restrict __s, size_t __maxlen,</span><br><span class=\"line\">       const char *__restrict __format, ...)</span><br><span class=\"line\">     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));</span><br><span class=\"line\"></span><br><span class=\"line\">extern int vsnprintf (char *__restrict __s, size_t __maxlen,</span><br><span class=\"line\">        const char *__restrict __format, __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));</span><br><span class=\"line\"><span class=\"comment\"># 379 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int vdprintf (int __fd, const char *__restrict __fmt,</span><br><span class=\"line\">       __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__format__ (__printf__, 2, 0)));</span><br><span class=\"line\">extern int dprintf (int __fd, const char *__restrict __fmt, ...)</span><br><span class=\"line\">     __attribute__ ((__format__ (__printf__, 2, 3)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fscanf (FILE *__restrict __stream,</span><br><span class=\"line\">     const char *__restrict __format, ...) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int scanf (const char *__restrict __format, ...) ;</span><br><span class=\"line\"></span><br><span class=\"line\">extern int sscanf (const char *__restrict __s,</span><br><span class=\"line\">     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/floatn.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 119 &quot;/usr/include/bits/floatn.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/floatn-common.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 24 &quot;/usr/include/bits/floatn-common.h&quot; 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 1 &quot;/usr/include/bits/long-double.h&quot; 1 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 25 &quot;/usr/include/bits/floatn-common.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 120 &quot;/usr/include/bits/floatn.h&quot; 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># 407 &quot;/usr/include/stdio.h&quot; 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_fscanf&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                               ;</span><br><span class=\"line\">extern int scanf (const char *__restrict __format, ...) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_scanf&quot;</span>)</span><br><span class=\"line\">                              ;</span><br><span class=\"line\">extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_sscanf&quot;</span>) __attribute__ ((__nothrow__ , __leaf__))</span><br><span class=\"line\"></span><br><span class=\"line\">                      ;</span><br><span class=\"line\"><span class=\"comment\"># 435 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,</span><br><span class=\"line\">      __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 2, 0))) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 1, 0))) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vsscanf (const char *__restrict __s,</span><br><span class=\"line\">      const char *__restrict __format, __gnuc_va_list __arg)</span><br><span class=\"line\">     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_vfscanf&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 2, 0))) ;</span><br><span class=\"line\">extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_vscanf&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 1, 0))) ;</span><br><span class=\"line\">extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ (<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;__isoc99_vsscanf&quot;</span>) __attribute__ ((__nothrow__ , __leaf__))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     __attribute__ ((__format__ (__scanf__, 2, 0)));</span><br><span class=\"line\"><span class=\"comment\"># 489 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fgetc (FILE *__stream);</span><br><span class=\"line\">extern int getc (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int getchar (void);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int getc_unlocked (FILE *__stream);</span><br><span class=\"line\">extern int getchar_unlocked (void);</span><br><span class=\"line\"><span class=\"comment\"># 514 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fgetc_unlocked (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 525 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fputc (int __c, FILE *__stream);</span><br><span class=\"line\">extern int putc (int __c, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int putchar (int __c);</span><br><span class=\"line\"><span class=\"comment\"># 541 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fputc_unlocked (int __c, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int putc_unlocked (int __c, FILE *__stream);</span><br><span class=\"line\">extern int putchar_unlocked (int __c);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int getw (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int putw (int __w, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)</span><br><span class=\"line\">     __attribute__ ((__access__ (__write_only__, 1, 2)));</span><br><span class=\"line\"><span class=\"comment\"># 608 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern __ssize_t __getdelim (char **__restrict __lineptr,</span><br><span class=\"line\">                             size_t *__restrict __n, int __delimiter,</span><br><span class=\"line\">                             FILE *__restrict __stream) ;</span><br><span class=\"line\">extern __ssize_t getdelim (char **__restrict __lineptr,</span><br><span class=\"line\">                           size_t *__restrict __n, int __delimiter,</span><br><span class=\"line\">                           FILE *__restrict __stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern __ssize_t getline (char **__restrict __lineptr,</span><br><span class=\"line\">                          size_t *__restrict __n,</span><br><span class=\"line\">                          FILE *__restrict __stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fputs (const char *__restrict __s, FILE *__restrict __stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int puts (const char *__s);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int ungetc (int __c, FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern size_t fread (void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">       size_t __n, FILE *__restrict __stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern size_t fwrite (const void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">        size_t __n, FILE *__restrict __s);</span><br><span class=\"line\"><span class=\"comment\"># 678 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">         size_t __n, FILE *__restrict __stream) ;</span><br><span class=\"line\">extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,</span><br><span class=\"line\">          size_t __n, FILE *__restrict __stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fseek (FILE *__stream, long int __off, int __whence);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern long int ftell (FILE *__stream) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void rewind (FILE *__stream);</span><br><span class=\"line\"><span class=\"comment\"># 712 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fseeko (FILE *__stream, __off_t __off, int __whence);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern __off_t ftello (FILE *__stream) ;</span><br><span class=\"line\"><span class=\"comment\"># 736 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fsetpos (FILE *__stream, const fpos_t *__pos);</span><br><span class=\"line\"><span class=\"comment\"># 762 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\">extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\">extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\">extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\">extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void perror (const char *__s);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"><span class=\"comment\"># 799 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern FILE *popen (const char *__command, const char *__modes) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int pclose (FILE *__stream);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"><span class=\"comment\"># 839 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class=\"line\"><span class=\"comment\"># 857 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\">extern int __uflow (FILE *);</span><br><span class=\"line\">extern int __overflow (FILE *, int);</span><br><span class=\"line\"><span class=\"comment\"># 874 &quot;/usr/include/stdio.h&quot; 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 &quot;hello.c&quot; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 &quot;hello.c&quot;</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>汇编<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -S hello.</span><br></pre></td></tr></table></figure>\n查看生成内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t.file\t<span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.section\t.rodata</span><br><span class=\"line\">.LC0:</span><br><span class=\"line\">\t.string\t<span class=\"string\">&quot;hello!&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.globl\tmain</span><br><span class=\"line\">\t.<span class=\"built_in\">type</span>\tmain, @<span class=\"keyword\">function</span></span><br><span class=\"line\">main:</span><br><span class=\"line\">.LFB0:</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">\tpushq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa_offset 16</span><br><span class=\"line\">\t.cfi_offset 6, -16</span><br><span class=\"line\">\tmovq\t%rsp, %rbp</span><br><span class=\"line\">\t.cfi_def_cfa_register 6</span><br><span class=\"line\">\tleaq\t.LC0(%rip), %rax</span><br><span class=\"line\">\tmovq\t%rax, %rdi</span><br><span class=\"line\">\tmovl\t<span class=\"variable\">$0</span>, %eax</span><br><span class=\"line\">\tcall\t<span class=\"built_in\">printf</span>@PLT</span><br><span class=\"line\">\tmovl\t<span class=\"variable\">$0</span>, %eax</span><br><span class=\"line\">\tpopq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa 7, 8</span><br><span class=\"line\">\tret</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">.LFE0:</span><br><span class=\"line\">\t.size\tmain, .-main</span><br><span class=\"line\">\t.ident\t<span class=\"string\">&quot;GCC: (GNU) 11.1.0&quot;</span></span><br><span class=\"line\">\t.section\t.note.GNU-stack,<span class=\"string\">&quot;&quot;</span>,@progbits</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>机器码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -C hello.s</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>file 查看</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br></pre></td></tr></table></figure></li>\n<li><p>objdump 查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello.o:     file format elf64-x86-64</span><br><span class=\"line\">hello.o</span><br></pre></td></tr></table></figure></li>\n<li><p>nm 查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                 U _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">0000000000000000 T main</span><br><span class=\"line\">                 U <span class=\"built_in\">printf</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>readelf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ELF Header: </span><br><span class=\"line\">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">  Class:                             ELF64</span><br><span class=\"line\">  Data:                              2<span class=\"string\">&#x27;s complement, little endian</span></span><br><span class=\"line\"><span class=\"string\">  Version:                           1 (current)</span></span><br><span class=\"line\"><span class=\"string\">  OS/ABI:                            UNIX - System V</span></span><br><span class=\"line\"><span class=\"string\">  ABI Version:                       0</span></span><br><span class=\"line\"><span class=\"string\">  Type:                              REL (Relocatable file)</span></span><br><span class=\"line\"><span class=\"string\">  Machine:                           Advanced Micro Devices X86-64</span></span><br><span class=\"line\"><span class=\"string\">  Version:                           0x1</span></span><br><span class=\"line\"><span class=\"string\">  Entry point address:               0x0</span></span><br><span class=\"line\"><span class=\"string\">  Start of program headers:          0 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">  Start of section headers:          640 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">  Flags:                             0x0</span></span><br><span class=\"line\"><span class=\"string\">  Size of this header:               64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">  Size of program headers:           0 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">  Number of program headers:         0</span></span><br><span class=\"line\"><span class=\"string\">  Size of section headers:           64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">  Number of section headers:         14</span></span><br><span class=\"line\"><span class=\"string\">  Section header string table index: 13</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Section Headers:</span></span><br><span class=\"line\"><span class=\"string\">  [Nr] Name              Type             Address           Offset</span></span><br><span class=\"line\"><span class=\"string\">       Size              EntSize          Flags  Link  Info  Align</span></span><br><span class=\"line\"><span class=\"string\">  [ 0]                   NULL             0000000000000000  00000000</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000           0     0     0</span></span><br><span class=\"line\"><span class=\"string\">  [ 1] .text             PROGBITS         0000000000000000  00000040</span></span><br><span class=\"line\"><span class=\"string\">       000000000000001f  0000000000000000  AX       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 2] .rela.text        RELA             0000000000000000  000001c0</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000030  0000000000000018   I      11     1     8</span></span><br><span class=\"line\"><span class=\"string\">  [ 3] .data             PROGBITS         0000000000000000  0000005f</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000  WA       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 4] .bss              NOBITS           0000000000000000  0000005f</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000  WA       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 5] .rodata           PROGBITS         0000000000000000  0000005f</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000007  0000000000000000   A       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 6] .comment          PROGBITS         0000000000000000  00000066</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000013  0000000000000001  MS       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  00000079</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000000  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [ 8] .note.gnu.pr[...] NOTE             0000000000000000  00000080</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000030  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">  [ 9] .eh_frame         PROGBITS         0000000000000000  000000b0</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000038  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">  [10] .rela.eh_frame    RELA             0000000000000000  000001f0</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000018  0000000000000018   I      11     9     8</span></span><br><span class=\"line\"><span class=\"string\">  [11] .symtab           SYMTAB           0000000000000000  000000e8</span></span><br><span class=\"line\"><span class=\"string\">       00000000000000a8  0000000000000018          12     4     8</span></span><br><span class=\"line\"><span class=\"string\">  [12] .strtab           STRTAB           0000000000000000  00000190</span></span><br><span class=\"line\"><span class=\"string\">       000000000000002b  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">  [13] .shstrtab         STRTAB           0000000000000000  00000208</span></span><br><span class=\"line\"><span class=\"string\">       0000000000000074  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">Key to Flags:</span></span><br><span class=\"line\"><span class=\"string\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span></span><br><span class=\"line\"><span class=\"string\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span></span><br><span class=\"line\"><span class=\"string\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span></span><br><span class=\"line\"><span class=\"string\">  l (large), p (processor specific)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are no section groups in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are no program headers in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There is no dynamic section in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.text<span class=\"string\">&#x27; at offset 0x1c0 contains 2 entries:</span></span><br><span class=\"line\"><span class=\"string\">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000000007  000300000002 R_X86_64_PC32     0000000000000000 .rodata - 4</span></span><br><span class=\"line\"><span class=\"string\">000000000014  000600000004 R_X86_64_PLT32    0000000000000000 printf - 4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.eh_frame<span class=\"string\">&#x27; at offset 0x1f0 contains 1 entry:</span></span><br><span class=\"line\"><span class=\"string\">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Symbol table &#x27;</span>.symtab<span class=\"string\">&#x27; contains 7 entries:</span></span><br><span class=\"line\"><span class=\"string\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span></span><br><span class=\"line\"><span class=\"string\">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span></span><br><span class=\"line\"><span class=\"string\">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c</span></span><br><span class=\"line\"><span class=\"string\">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span></span><br><span class=\"line\"><span class=\"string\">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span></span><br><span class=\"line\"><span class=\"string\">     4: 0000000000000000    31 FUNC    GLOBAL DEFAULT    1 main</span></span><br><span class=\"line\"><span class=\"string\">     5: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_</span></span><br><span class=\"line\"><span class=\"string\">     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">No version information found in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.gnu.property</span></span><br><span class=\"line\"><span class=\"string\">  Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">  GNU                  0x00000020\tNT_GNU_PROPERTY_TYPE_0</span></span><br><span class=\"line\"><span class=\"string\">      Properties: x86 ISA used: </span></span><br><span class=\"line\"><span class=\"string\">\tx86 feature used: x86</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>链接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc hello.o -o hello</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>file 查看</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=92f33896a3687559674a0d0f204f68984bfd8ee3, <span class=\"keyword\">for</span> GNU/Linux 4.4.0, not stripped</span><br></pre></td></tr></table></figure>\n<ul>\n<li>readelf：  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ELF Header:</span><br><span class=\"line\">Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">Class:                             ELF64</span><br><span class=\"line\">Data:                              2<span class=\"string\">&#x27;s complement, little endian</span></span><br><span class=\"line\"><span class=\"string\">Version:                           1 (current)</span></span><br><span class=\"line\"><span class=\"string\">OS/ABI:                            UNIX - System V</span></span><br><span class=\"line\"><span class=\"string\">ABI Version:                       0</span></span><br><span class=\"line\"><span class=\"string\">Type:                              DYN (Shared object file)</span></span><br><span class=\"line\"><span class=\"string\">Machine:                           Advanced Micro Devices X86-64</span></span><br><span class=\"line\"><span class=\"string\">Version:                           0x1</span></span><br><span class=\"line\"><span class=\"string\">Entry point address:               0x1040</span></span><br><span class=\"line\"><span class=\"string\">Start of program headers:          64 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">Start of section headers:          14168 (bytes into file)</span></span><br><span class=\"line\"><span class=\"string\">Flags:                             0x0</span></span><br><span class=\"line\"><span class=\"string\">Size of this header:               64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">Size of program headers:           56 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">Number of program headers:         13</span></span><br><span class=\"line\"><span class=\"string\">Size of section headers:           64 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">Number of section headers:         30</span></span><br><span class=\"line\"><span class=\"string\">Section header string table index: 29</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Section Headers:</span></span><br><span class=\"line\"><span class=\"string\">[Nr] Name              Type             Address           Offset</span></span><br><span class=\"line\"><span class=\"string\">    Size              EntSize          Flags  Link  Info  Align</span></span><br><span class=\"line\"><span class=\"string\">[ 0]                   NULL             0000000000000000  00000000</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000000  0000000000000000           0     0     0</span></span><br><span class=\"line\"><span class=\"string\">[ 1] .interp           PROGBITS         0000000000000318  00000318</span></span><br><span class=\"line\"><span class=\"string\">    000000000000001c  0000000000000000   A       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000040  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[ 3] .note.gnu.bu[...] NOTE             0000000000000378  00000378</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000024  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[ 4] .note.ABI-tag     NOTE             000000000000039c  0000039c</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[ 5] .gnu.hash         GNU_HASH         00000000000003c0  000003c0</span></span><br><span class=\"line\"><span class=\"string\">    000000000000001c  0000000000000000   A       6     0     8</span></span><br><span class=\"line\"><span class=\"string\">[ 6] .dynsym           DYNSYM           00000000000003e0  000003e0</span></span><br><span class=\"line\"><span class=\"string\">    00000000000000a8  0000000000000018   A       7     1     8</span></span><br><span class=\"line\"><span class=\"string\">[ 7] .dynstr           STRTAB           0000000000000488  00000488</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000084  0000000000000000   A       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[ 8] .gnu.version      VERSYM           000000000000050c  0000050c</span></span><br><span class=\"line\"><span class=\"string\">    000000000000000e  0000000000000002   A       6     0     2</span></span><br><span class=\"line\"><span class=\"string\">[ 9] .gnu.version_r    VERNEED          0000000000000520  00000520</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000000   A       7     1     8</span></span><br><span class=\"line\"><span class=\"string\">[10] .rela.dyn         RELA             0000000000000540  00000540</span></span><br><span class=\"line\"><span class=\"string\">    00000000000000c0  0000000000000018   A       6     0     8</span></span><br><span class=\"line\"><span class=\"string\">[11] .rela.plt         RELA             0000000000000600  00000600</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000018  0000000000000018  AI       6    23     8</span></span><br><span class=\"line\"><span class=\"string\">[12] .init             PROGBITS         0000000000001000  00001000</span></span><br><span class=\"line\"><span class=\"string\">    000000000000001b  0000000000000000  AX       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[13] .plt              PROGBITS         0000000000001020  00001020</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000010  AX       0     0     16</span></span><br><span class=\"line\"><span class=\"string\">[14] .text             PROGBITS         0000000000001040  00001040</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000195  0000000000000000  AX       0     0     16</span></span><br><span class=\"line\"><span class=\"string\">[15] .fini             PROGBITS         00000000000011d8  000011d8</span></span><br><span class=\"line\"><span class=\"string\">    000000000000000d  0000000000000000  AX       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[16] .rodata           PROGBITS         0000000000002000  00002000</span></span><br><span class=\"line\"><span class=\"string\">    000000000000000b  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[17] .eh_frame_hdr     PROGBITS         000000000000200c  0000200c</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000034  0000000000000000   A       0     0     4</span></span><br><span class=\"line\"><span class=\"string\">[18] .eh_frame         PROGBITS         0000000000002040  00002040</span></span><br><span class=\"line\"><span class=\"string\">    00000000000000d8  0000000000000000   A       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[19] .init_array       INIT_ARRAY       0000000000003de8  00002de8</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000008  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[20] .fini_array       FINI_ARRAY       0000000000003df0  00002df0</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000008  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[21] .dynamic          DYNAMIC          0000000000003df8  00002df8</span></span><br><span class=\"line\"><span class=\"string\">    00000000000001e0  0000000000000010  WA       7     0     8</span></span><br><span class=\"line\"><span class=\"string\">[22] .got              PROGBITS         0000000000003fd8  00002fd8</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000028  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[23] .got.plt          PROGBITS         0000000000004000  00003000</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000020  0000000000000008  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[24] .data             PROGBITS         0000000000004020  00003020</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000010  0000000000000000  WA       0     0     8</span></span><br><span class=\"line\"><span class=\"string\">[25] .bss              NOBITS           0000000000004030  00003030</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000008  0000000000000000  WA       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[26] .comment          PROGBITS         0000000000000000  00003030</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000012  0000000000000001  MS       0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[27] .symtab           SYMTAB           0000000000000000  00003048</span></span><br><span class=\"line\"><span class=\"string\">    00000000000003d8  0000000000000018          28    22     8</span></span><br><span class=\"line\"><span class=\"string\">[28] .strtab           STRTAB           0000000000000000  00003420</span></span><br><span class=\"line\"><span class=\"string\">    000000000000021b  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">[29] .shstrtab         STRTAB           0000000000000000  0000363b</span></span><br><span class=\"line\"><span class=\"string\">    0000000000000116  0000000000000000           0     0     1</span></span><br><span class=\"line\"><span class=\"string\">Key to Flags:</span></span><br><span class=\"line\"><span class=\"string\">W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span></span><br><span class=\"line\"><span class=\"string\">L (link order), O (extra OS processing required), G (group), T (TLS),</span></span><br><span class=\"line\"><span class=\"string\">C (compressed), x (unknown), o (OS specific), E (exclude),</span></span><br><span class=\"line\"><span class=\"string\">l (large), p (processor specific)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are no section groups in this file.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Program Headers:</span></span><br><span class=\"line\"><span class=\"string\">Type           Offset             VirtAddr           PhysAddr</span></span><br><span class=\"line\"><span class=\"string\">                FileSiz            MemSiz              Flags  Align</span></span><br><span class=\"line\"><span class=\"string\">PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040</span></span><br><span class=\"line\"><span class=\"string\">                0x00000000000002d8 0x00000000000002d8  R      0x8</span></span><br><span class=\"line\"><span class=\"string\">INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318</span></span><br><span class=\"line\"><span class=\"string\">                0x000000000000001c 0x000000000000001c  R      0x1</span></span><br><span class=\"line\"><span class=\"string\">    [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000618 0x0000000000000618  R      0x1000</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000</span></span><br><span class=\"line\"><span class=\"string\">                0x00000000000001e5 0x00000000000001e5  R E    0x1000</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000118 0x0000000000000118  R      0x1000</span></span><br><span class=\"line\"><span class=\"string\">LOAD           0x0000000000002de8 0x0000000000003de8 0x0000000000003de8</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000248 0x0000000000000250  RW     0x1000</span></span><br><span class=\"line\"><span class=\"string\">DYNAMIC        0x0000000000002df8 0x0000000000003df8 0x0000000000003df8</span></span><br><span class=\"line\"><span class=\"string\">                0x00000000000001e0 0x00000000000001e0  RW     0x8</span></span><br><span class=\"line\"><span class=\"string\">NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000040 0x0000000000000040  R      0x8</span></span><br><span class=\"line\"><span class=\"string\">NOTE           0x0000000000000378 0x0000000000000378 0x0000000000000378</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000044 0x0000000000000044  R      0x4</span></span><br><span class=\"line\"><span class=\"string\">GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000040 0x0000000000000040  R      0x8</span></span><br><span class=\"line\"><span class=\"string\">GNU_EH_FRAME   0x000000000000200c 0x000000000000200c 0x000000000000200c</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000034 0x0000000000000034  R      0x4</span></span><br><span class=\"line\"><span class=\"string\">GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000000 0x0000000000000000  RW     0x10</span></span><br><span class=\"line\"><span class=\"string\">GNU_RELRO      0x0000000000002de8 0x0000000000003de8 0x0000000000003de8</span></span><br><span class=\"line\"><span class=\"string\">                0x0000000000000218 0x0000000000000218  R      0x1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Section to Segment mapping:</span></span><br><span class=\"line\"><span class=\"string\">Segment Sections...</span></span><br><span class=\"line\"><span class=\"string\">00     </span></span><br><span class=\"line\"><span class=\"string\">01     .interp </span></span><br><span class=\"line\"><span class=\"string\">02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt </span></span><br><span class=\"line\"><span class=\"string\">03     .init .plt .text .fini </span></span><br><span class=\"line\"><span class=\"string\">04     .rodata .eh_frame_hdr .eh_frame </span></span><br><span class=\"line\"><span class=\"string\">05     .init_array .fini_array .dynamic .got .got.plt .data .bss </span></span><br><span class=\"line\"><span class=\"string\">06     .dynamic </span></span><br><span class=\"line\"><span class=\"string\">07     .note.gnu.property </span></span><br><span class=\"line\"><span class=\"string\">08     .note.gnu.build-id .note.ABI-tag </span></span><br><span class=\"line\"><span class=\"string\">09     .note.gnu.property </span></span><br><span class=\"line\"><span class=\"string\">10     .eh_frame_hdr </span></span><br><span class=\"line\"><span class=\"string\">11     </span></span><br><span class=\"line\"><span class=\"string\">12     .init_array .fini_array .dynamic .got </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Dynamic section at offset 0x2df8 contains 26 entries:</span></span><br><span class=\"line\"><span class=\"string\">Tag        Type                         Name/Value</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000c (INIT)               0x1000</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000d (FINI)               0x11d8</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000019 (INIT_ARRAY)         0x3de8</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000001a (FINI_ARRAY)         0x3df0</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffef5 (GNU_HASH)           0x3c0</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000005 (STRTAB)             0x488</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000006 (SYMTAB)             0x3e0</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000a (STRSZ)              132 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000000000000b (SYMENT)             24 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000015 (DEBUG)              0x0</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000003 (PLTGOT)             0x4000</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000002 (PLTRELSZ)           24 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000014 (PLTREL)             RELA</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000017 (JMPREL)             0x600</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000007 (RELA)               0x540</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000008 (RELASZ)             192 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000009 (RELAENT)            24 (bytes)</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffffb (FLAGS_1)            Flags: PIE</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffffe (VERNEED)            0x520</span></span><br><span class=\"line\"><span class=\"string\">0x000000006fffffff (VERNEEDNUM)         1</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffff0 (VERSYM)             0x50c</span></span><br><span class=\"line\"><span class=\"string\">0x000000006ffffff9 (RELACOUNT)          3</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000000000 (NULL)               0x0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.dyn<span class=\"string\">&#x27; at offset 0x540 contains 8 entries:</span></span><br><span class=\"line\"><span class=\"string\">Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000003de8  000000000008 R_X86_64_RELATIVE                    1130</span></span><br><span class=\"line\"><span class=\"string\">000000003df0  000000000008 R_X86_64_RELATIVE                    10e0</span></span><br><span class=\"line\"><span class=\"string\">000000004028  000000000008 R_X86_64_RELATIVE                    4028</span></span><br><span class=\"line\"><span class=\"string\">000000003fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTM[...] + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCl[...] + 0</span></span><br><span class=\"line\"><span class=\"string\">000000003ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Relocation section &#x27;</span>.rela.plt<span class=\"string\">&#x27; at offset 0x600 contains 1 entry:</span></span><br><span class=\"line\"><span class=\"string\">Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span><br><span class=\"line\"><span class=\"string\">000000004018  000200000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Symbol table &#x27;</span>.dynsym<span class=\"string\">&#x27; contains 7 entries:</span></span><br><span class=\"line\"><span class=\"string\">Num:    Value          Size Type    Bind   Vis      Ndx Name</span></span><br><span class=\"line\"><span class=\"string\">    0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span></span><br><span class=\"line\"><span class=\"string\">    1: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]</span></span><br><span class=\"line\"><span class=\"string\">    2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\"><span class=\"string\">    3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND [...]@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\"><span class=\"string\">    4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span></span><br><span class=\"line\"><span class=\"string\">    5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]</span></span><br><span class=\"line\"><span class=\"string\">    6: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND [...]@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Symbol table &#x27;</span>.symtab<span class=\"string\">&#x27; contains 41 entries:</span></span><br><span class=\"line\"><span class=\"string\">Num:    Value          Size Type    Bind   Vis      Ndx Name</span></span><br><span class=\"line\"><span class=\"string\">    0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span></span><br><span class=\"line\"><span class=\"string\">    1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS abi-note.c</span></span><br><span class=\"line\"><span class=\"string\">    2: 000000000000039c    32 OBJECT  LOCAL  DEFAULT    4 __abi_tag</span></span><br><span class=\"line\"><span class=\"string\">    3: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS init.c</span></span><br><span class=\"line\"><span class=\"string\">    4: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span></span><br><span class=\"line\"><span class=\"string\">    5: 0000000000001070     0 FUNC    LOCAL  DEFAULT   14 deregister_tm_clones</span></span><br><span class=\"line\"><span class=\"string\">    6: 00000000000010a0     0 FUNC    LOCAL  DEFAULT   14 register_tm_clones</span></span><br><span class=\"line\"><span class=\"string\">    7: 00000000000010e0     0 FUNC    LOCAL  DEFAULT   14 __do_global_dtors_aux</span></span><br><span class=\"line\"><span class=\"string\">    8: 0000000000004030     1 OBJECT  LOCAL  DEFAULT   25 completed.0</span></span><br><span class=\"line\"><span class=\"string\">    9: 0000000000003df0     0 OBJECT  LOCAL  DEFAULT   20 __do_global_dtor[...]</span></span><br><span class=\"line\"><span class=\"string\">    10: 0000000000001130     0 FUNC    LOCAL  DEFAULT   14 frame_dummy</span></span><br><span class=\"line\"><span class=\"string\">    11: 0000000000003de8     0 OBJECT  LOCAL  DEFAULT   19 __frame_dummy_in[...]</span></span><br><span class=\"line\"><span class=\"string\">    12: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c</span></span><br><span class=\"line\"><span class=\"string\">    13: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span></span><br><span class=\"line\"><span class=\"string\">    14: 0000000000002114     0 OBJECT  LOCAL  DEFAULT   18 __FRAME_END__</span></span><br><span class=\"line\"><span class=\"string\">    15: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS </span></span><br><span class=\"line\"><span class=\"string\">    16: 0000000000003df0     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_end</span></span><br><span class=\"line\"><span class=\"string\">    17: 0000000000003df8     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC</span></span><br><span class=\"line\"><span class=\"string\">    18: 0000000000003de8     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_start</span></span><br><span class=\"line\"><span class=\"string\">    19: 000000000000200c     0 NOTYPE  LOCAL  DEFAULT   17 __GNU_EH_FRAME_HDR</span></span><br><span class=\"line\"><span class=\"string\">    20: 0000000000004000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_</span></span><br><span class=\"line\"><span class=\"string\">    21: 0000000000001000     0 FUNC    LOCAL  DEFAULT   12 _init</span></span><br><span class=\"line\"><span class=\"string\">    22: 00000000000011d0     5 FUNC    GLOBAL DEFAULT   14 __libc_csu_fini</span></span><br><span class=\"line\"><span class=\"string\">    23: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]</span></span><br><span class=\"line\"><span class=\"string\">    24: 0000000000004020     0 NOTYPE  WEAK   DEFAULT   24 data_start</span></span><br><span class=\"line\"><span class=\"string\">    25: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   24 _edata</span></span><br><span class=\"line\"><span class=\"string\">    26: 00000000000011d8     0 FUNC    GLOBAL HIDDEN    15 _fini</span></span><br><span class=\"line\"><span class=\"string\">    27: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5</span></span><br><span class=\"line\"><span class=\"string\">    28: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_mai[...]</span></span><br><span class=\"line\"><span class=\"string\">    29: 0000000000004020     0 NOTYPE  GLOBAL DEFAULT   24 __data_start</span></span><br><span class=\"line\"><span class=\"string\">    30: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span></span><br><span class=\"line\"><span class=\"string\">    31: 0000000000004028     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle</span></span><br><span class=\"line\"><span class=\"string\">    32: 0000000000002000     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used</span></span><br><span class=\"line\"><span class=\"string\">    33: 0000000000001160   101 FUNC    GLOBAL DEFAULT   14 __libc_csu_init</span></span><br><span class=\"line\"><span class=\"string\">    34: 0000000000004038     0 NOTYPE  GLOBAL DEFAULT   25 _end</span></span><br><span class=\"line\"><span class=\"string\">    35: 0000000000001040    47 FUNC    GLOBAL DEFAULT   14 _start</span></span><br><span class=\"line\"><span class=\"string\">    36: 0000000000004030     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start</span></span><br><span class=\"line\"><span class=\"string\">    37: 0000000000001139    31 FUNC    GLOBAL DEFAULT   14 main</span></span><br><span class=\"line\"><span class=\"string\">    38: 0000000000004030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__</span></span><br><span class=\"line\"><span class=\"string\">    39: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]</span></span><br><span class=\"line\"><span class=\"string\">    40: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@G[...]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Version symbols section &#x27;</span>.gnu.version<span class=\"string\">&#x27; contains 7 entries:</span></span><br><span class=\"line\"><span class=\"string\">Addr: 0x000000000000050c  Offset: 0x00050c  Link: 6 (.dynsym)</span></span><br><span class=\"line\"><span class=\"string\">000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)   2 (GLIBC_2.2.5)</span></span><br><span class=\"line\"><span class=\"string\">004:   0 (*local*)       0 (*local*)       2 (GLIBC_2.2.5)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Version needs section &#x27;</span>.gnu.version_r<span class=\"string\">&#x27; contains 1 entry:</span></span><br><span class=\"line\"><span class=\"string\">Addr: 0x0000000000000520  Offset: 0x000520  Link: 7 (.dynstr)</span></span><br><span class=\"line\"><span class=\"string\">000000: Version: 1  File: libc.so.6  Cnt: 1</span></span><br><span class=\"line\"><span class=\"string\">0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.gnu.property</span></span><br><span class=\"line\"><span class=\"string\">Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">GNU                  0x00000030\tNT_GNU_PROPERTY_TYPE_0</span></span><br><span class=\"line\"><span class=\"string\">    Properties: x86 ISA needed: x86-64-baseline</span></span><br><span class=\"line\"><span class=\"string\">    x86 feature used: x86</span></span><br><span class=\"line\"><span class=\"string\">    x86 ISA used: </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.gnu.build-id</span></span><br><span class=\"line\"><span class=\"string\">Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">GNU                  0x00000014\tNT_GNU_BUILD_ID (unique build ID bitstring)</span></span><br><span class=\"line\"><span class=\"string\">    Build ID: 92f33896a3687559674a0d0f204f68984bfd8ee3</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Displaying notes found in: .note.ABI-tag</span></span><br><span class=\"line\"><span class=\"string\">Owner                Data size \tDescription</span></span><br><span class=\"line\"><span class=\"string\">GNU                  0x00000010\tNT_GNU_ABI_TAG (ABI version tag)</span></span><br><span class=\"line\"><span class=\"string\">    OS: Linux, ABI: 4.4.0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></li>\n<li>nm  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000000039c r __abi_tag</span><br><span class=\"line\">0000000000004030 B __bss_start</span><br><span class=\"line\">0000000000004030 b completed.0</span><br><span class=\"line\">                w __cxa_finalize@GLIBC_2.2.5</span><br><span class=\"line\">0000000000004020 D __data_start</span><br><span class=\"line\">0000000000004020 W data_start</span><br><span class=\"line\">0000000000001070 t deregister_tm_clones</span><br><span class=\"line\">00000000000010e0 t __do_global_dtors_aux</span><br><span class=\"line\">0000000000003df0 d __do_global_dtors_aux_fini_array_entry</span><br><span class=\"line\">0000000000004028 D __dso_handle</span><br><span class=\"line\">0000000000003df8 d _DYNAMIC</span><br><span class=\"line\">0000000000004030 D _edata</span><br><span class=\"line\">0000000000004038 B _end</span><br><span class=\"line\">00000000000011d8 T _fini</span><br><span class=\"line\">0000000000001130 t frame_dummy</span><br><span class=\"line\">0000000000003de8 d __frame_dummy_init_array_entry</span><br><span class=\"line\">0000000000002114 r __FRAME_END__</span><br><span class=\"line\">0000000000004000 d _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">                w __gmon_start__</span><br><span class=\"line\">000000000000200c r __GNU_EH_FRAME_HDR</span><br><span class=\"line\">0000000000001000 t _init</span><br><span class=\"line\">0000000000003df0 d __init_array_end</span><br><span class=\"line\">0000000000003de8 d __init_array_start</span><br><span class=\"line\">0000000000002000 R _IO_stdin_used</span><br><span class=\"line\">                w _ITM_deregisterTMCloneTable</span><br><span class=\"line\">                w _ITM_registerTMCloneTable</span><br><span class=\"line\">00000000000011d0 T __libc_csu_fini</span><br><span class=\"line\">0000000000001160 T __libc_csu_init</span><br><span class=\"line\">                U __libc_start_main@GLIBC_2.2.5</span><br><span class=\"line\">0000000000001139 T main</span><br><span class=\"line\">                U <span class=\"built_in\">printf</span>@GLIBC_2.2.5</span><br><span class=\"line\">00000000000010a0 t register_tm_clones</span><br><span class=\"line\">0000000000001040 T _start</span><br><span class=\"line\">0000000000004030 D __TMC_END__</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"格式简介\"><a href=\"#格式简介\" class=\"headerlink\" title=\"格式简介\"></a>格式简介</h2><blockquote>\n<p>ELF： executable and linkable format</p>\n</blockquote>\n<p>一种用于可执行文件、目标代码、共享库和核心转储（<code>core dump</code>）的标准文件格式。<br>首次发布于一个名为 <code>System V Release 4（SVR4）</code>的 <code>Unix</code> 操作系统版本中关于应用二进制接口（ABI）的规范中，并且此后不久发布于工具接口标准（Tool Interface Standard），随后很快被不同 <code>Unix</code> 发行商所接受。1999 年，这种格式被 <code>86open</code> 项目选为 <code>x86</code> 架构处理器上的 <code>Unix</code> 和 类 Unix 系统的标准二进制文件格式。</p>\n<p>按照设计，ELF 格式灵活性高、可扩展，并且跨平台。比如它支持不同的字节序和地址范围，所以它不会不兼容某一特别的 CPU 或指令架构。这也使得 ELF 格式能够被运行于众多不同平台的各种操作系统所广泛采纳。</p>\n<p>每个 ELF 文件都由一个 ELF 首部和紧跟其后的文件数据部分组成。数据部分可以包含：</p>\n<ul>\n<li>程序头表（Program header table）：<br>描述 0 个或多个内存段信息<blockquote>\n<p>内存段中包含了用于某个 ELF 文件运行时执行所需的信息，而片段中包含了用于链接和重定位的重要数据。<br>  整个文件中的任何一个字节至多只能属于一个片段，也就是说可能存在不属于任何片段的孤立字节。</p>\n</blockquote>\n</li>\n<li>分段头表（Section header table）：<br>描述 0 段或多段链接与重定位需要的数据</li>\n<li>程序头表与分段头表引用的数据，比如 <code>.text</code>, <code>.data</code></li>\n</ul>\n<p>程序表中包含指向其他分段的索引， 分段表中也是如此：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------------</span><br><span class=\"line\">|     ELF  header           |</span><br><span class=\"line\">|---------------------------|</span><br><span class=\"line\">|   Program header table    |-------|</span><br><span class=\"line\">|---------------------------|       |</span><br><span class=\"line\">|          .text            |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|       |       |</span><br><span class=\"line\">|          .rodata          |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|       |       |</span><br><span class=\"line\">|           ......          |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|       |       |</span><br><span class=\"line\">|           .data           |&lt;------|-------|</span><br><span class=\"line\">|---------------------------|               |</span><br><span class=\"line\">|  Section header table     |---------------|</span><br><span class=\"line\">|---------------------------|</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Linux-IA32</code> 下的 ELF 存储和对应到Linux 内核中的情况</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0====&gt;-----------------------------  ---|             --------------------------------------              </span><br><span class=\"line\">      |     ELF  header           |     |             |      Kernel Virtual           |  /| 1GB</span><br><span class=\"line\">      |                           |     |             |                               |   |/  </span><br><span class=\"line\">      |---------------------------|     |             |-------------------------------|&lt;===== 0xC000 00000  </span><br><span class=\"line\">      |   Program header table    |     |             |     User Stack  (dynamic)     |  &lt;-- 栈 </span><br><span class=\"line\">      |                           |     |             |                               |</span><br><span class=\"line\">      |---------------------------|     |             |-------------------------------|&lt;===== %esp</span><br><span class=\"line\">      |          .init            |     | \\           |            /|\\                |</span><br><span class=\"line\">      |---------------------------|     |  \\          |             |                 |</span><br><span class=\"line\">      |          .text            |     |   \\         |            \\|/                |</span><br><span class=\"line\">      |---------------------------|     |    \\        |-------------------------------|</span><br><span class=\"line\">      |          .rodata          |     |     \\       |        dynamic libs           | &lt;-- 共享库区域</span><br><span class=\"line\">      |---------------------------|  ---|      |      |-------------------------------|</span><br><span class=\"line\">      |           .data           | ---|       |      |           /|\\                 |</span><br><span class=\"line\">      |---------------------------|    |\\      |      |            |                  |</span><br><span class=\"line\">      |           .bss            | ---| \\     |      |            |                  |</span><br><span class=\"line\">      |---------------------------|       \\    |      |-------------------------------|&lt;===== brk</span><br><span class=\"line\">      |           .symtab         |       |    |      |          heap                 | &lt;-- 堆： 由程序主动申请释放(malloc, new)</span><br><span class=\"line\">      |---------------------------|       |     \\     |-------------------------------|</span><br><span class=\"line\">      |           .debug          |       |      ----&gt;|        .data ,  .bss          | &lt;-- 读写数据段</span><br><span class=\"line\">      |---------------------------|        \\          |-------------------------------|             </span><br><span class=\"line\">      |           .line           |         \\----&gt;    |       .init, .text, .rodata   | &lt;-- 只读代码段</span><br><span class=\"line\">      |---------------------------|                   |-------------------------------|&lt;===== 0x0804 8000</span><br><span class=\"line\">      |           .data           |                   |                               |</span><br><span class=\"line\">      |---------------------------|                   |         not used yet          |</span><br><span class=\"line\">      |           .strtab         |                   |                               |</span><br><span class=\"line\">      |---------------------------|                   |-------------------------------|&lt;===== 0 </span><br><span class=\"line\">              ELF 文件(磁盘)                               Linux 虚拟空间</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sections\"><a href=\"#sections\" class=\"headerlink\" title=\"sections\"></a>sections</h4><ul>\n<li><p>header<br>  包括：我们字节标识信息， 文件类型(.O, exec, .so), 机器类型(IA-32, IA-64, Power-32)</p>\n</li>\n<li><p><code>.text</code><br>编译后的代码部分</p>\n</li>\n<li><p><code>.rodata</code><br>只读数据</p>\n</li>\n<li><p><code>.data</code><br>已初始化的全局变量</p>\n</li>\n<li><p><code>.bss</code><br>block started by symbol<br>为初始化的全局变量, 仅仅作为占位符, 不占据任何实际磁盘空间。</p>\n<blockquote>\n<p>区分初始化和非初始化是为了提供空间效率</p>\n</blockquote>\n<p>因为C语言中已经规定: 未初始化的全局变量和局部静态变量的默认值为零。<br>所以，将为初始化的变量和已经初始化的变量分开成两个段：</p>\n<ul>\n<li><code>.data</code> 中存放具体的初始值, 仅占有一定的磁盘空间</li>\n<li><code>.bss</code> 中仅说明变量将来执行时占用几个字节即可, 几乎不占用磁盘空间， 提高了执行效率</li>\n</ul>\n</li>\n<li><p>‘.symtab`<br>存放函数名和全局变量(符号表)信息</p>\n</li>\n<li><p><code>.rel.text</code> &amp; <code>.rel.data</code><br><code>.text</code> &amp; <code>.data</code>的重定位信息, 用于重新修改代码段中的指令的地址信 &amp; 对被模块使用或定义的全局变量进行重定位的信息。<br>在<code>.o</code>文件里面是需要的， 而实际的可执行文件里面已经重定位过了， 所以就不存在了。</p>\n</li>\n<li><p><code>.debug</code><br>调试符号表</p>\n</li>\n<li><p><code>strtab</code><br>包含<code>symtab</code> 和 <code>debug</code> 中符号和节名</p>\n</li>\n</ul>\n<h4 id=\"代码对应ELF\"><a href=\"#代码对应ELF\" class=\"headerlink\" title=\"代码对应ELF\"></a>代码对应ELF</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> y = <span class=\"number\">100</span>;                   <span class=\"comment\">// .data</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x;                         <span class=\"comment\">// .bss</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello!&quot;</span>);         <span class=\"comment\">// .text</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;                 <span class=\"comment\">// .text</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;        <span class=\"comment\">// .data</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b;            <span class=\"comment\">// .bss</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">200</span>, d;           </span><br><span class=\"line\">    <span class=\"built_in\">print</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"elf-h\"><a href=\"#elf-h\" class=\"headerlink\" title=\"elf.h\"></a>elf.h</h4><p>通过 <code>man elf</code> 就可以获取elf 介绍的详细信息</p>\n<ul>\n<li>elf header</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EI_NIDENT 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> e_ident[EI_NIDENT];</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_machine;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>      e_version;</span><br><span class=\"line\">    ElfN_Addr     e_entry;</span><br><span class=\"line\">    ElfN_Off      e_phoff;</span><br><span class=\"line\">    ElfN_Off      e_shoff;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>      e_flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_ehsize;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_phentsize;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_phnum;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_shentsize;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_shnum;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span>      e_shstrndx;</span><br><span class=\"line\">&#125; ElfN_Ehdr;</span><br><span class=\"line\"></span><br><span class=\"line\"># N = <span class=\"number\">32</span> <span class=\"keyword\">or</span> <span class=\"number\">64</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Program header (Phdr)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 32</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_type;</span><br><span class=\"line\">    Elf32_Off  p_offset;</span><br><span class=\"line\">    Elf32_Addr p_vaddr;</span><br><span class=\"line\">    Elf32_Addr p_paddr;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_filesz;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_memsz;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_align;</span><br><span class=\"line\">&#125; Elf32_Phdr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   p_flags;</span><br><span class=\"line\">    Elf64_Off  p_offset;</span><br><span class=\"line\">    Elf64_Addr p_vaddr;</span><br><span class=\"line\">    Elf64_Addr p_paddr;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   p_filesz;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   p_memsz;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   p_align;</span><br><span class=\"line\">&#125; Elf64_Phdr;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Section header (Shdr)<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_name;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_flags;</span><br><span class=\"line\">    Elf32_Addr sh_addr;</span><br><span class=\"line\">    Elf32_Off  sh_offset;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_size;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_link;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_info;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_addralign;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_entsize;</span><br><span class=\"line\">&#125; Elf32_Shdr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_name;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_type;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_flags;</span><br><span class=\"line\">    Elf64_Addr sh_addr;</span><br><span class=\"line\">    Elf64_Off  sh_offset;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_size;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_link;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>   sh_info;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_addralign;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>   sh_entsize;</span><br><span class=\"line\">&#125; Elf64_Shdr;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li> String and symbol tables<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    uint32_t      st_name;</span><br><span class=\"line\">    Elf32_Addr    st_value;</span><br><span class=\"line\">    uint32_t      st_size;</span><br><span class=\"line\">    unsigned char st_info;</span><br><span class=\"line\">    unsigned char st_other;</span><br><span class=\"line\">    uint16_t      st_shndx;</span><br><span class=\"line\">&#125; Elf32_Sym;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    uint32_t      st_name;</span><br><span class=\"line\">    unsigned char st_info;</span><br><span class=\"line\">    unsigned char st_other;</span><br><span class=\"line\">    uint16_t      st_shndx;</span><br><span class=\"line\">    Elf64_Addr    st_value;</span><br><span class=\"line\">    uint64_t      st_size;</span><br><span class=\"line\">&#125; Elf64_Sym;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常用的工具\"><a href=\"#常用的工具\" class=\"headerlink\" title=\"常用的工具\"></a>常用的工具</h3><p><code>GNU Binutils</code> 是用来处理许多格式的目标文件(包括elf文件)一整套的编程语言工具程序，包括：</p>\n<ul>\n<li><p>readelf<br>显示elf文件</p>\n</li>\n<li><p>objdump<br>显示elf和object格式文件，解码elf文件中高级语言语句所对应的机器语言语句段落，汇编语言语句段落</p>\n</li>\n<li><p>nm<br>显示elf文件中变量名和地址 </p>\n</li>\n<li><p>strings<br>打印文件中的可打印字符的字符串。<br>在开发软件的时候，各种文本/ASCII 信息会被添加到其中，比如打印信息、调试信息、帮助信息、错误等。只要这些信息都存在于二进制文件中，就可以用 <code>strings</code> 命令将其转储到屏幕上。</p>\n</li>\n<li><p>ldd<br>打印共享对象依赖关系。<br>对动态链接的二进制文件运行该命令会显示出所有依赖库和它们的路径。</p>\n</li>\n</ul>\n"},{"title":"linux_ipc","date":"2022-03-21T15:41:11.000Z","_content":"# 进程间通信： IPC\n\n> key: processes , communication\n\n* 进程是一个独立的资源分配单元:\n    - 不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源,进程不是孤立的，\n    - 不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。\n\n* 进程间通信的目的：\n    - 数据传输：一个进程需要将它的数据发送给另一个进程。\n    - 通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。\n    - 资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。\n    - 进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。\n\n* 具体方式\n    - 同一主机：\n        - Unix\n            - 匿名管道\n            - 具名管道\n        - POSIX / System V\n            - 消息队列\n            - 共享内存\n            - 信号量\n    - 网络：\n        - sokcet\n\n## 管道\n\n`ls | ws -l`： \nshell 创建了2个进程来分别执行 `ls` 和 `wc`:\n\n```bash\n---------------             -----------------                 -----------------\n|    stdout   |             |  管道          |                 | stdin         |\n| ls          |   ------>   | 字节流， 单向   |  ------>        |            wc |\n|       fd  1 |             |               |                 | fd 0          |\n---------------             -----------------                 -----------------\n                      管道写入端            管道读取端  \n      \n```\n\n特点：\n* 内存中维护的缓冲器\n    - 大小有限\n    - 不同OS实现不用\n* 具有文件的读.写操作，没有文件的实体(具名管道有文件实体)\n* 一个管道是一个字节流，没有消息边界的概念，可以读取任意大小的数据\n* 读取顺序和写入顺序完全一致\n* 单向传递，半双工\n* 一次性操作: 读取完之后就释放对应的内存\n* 匿名管道仅在具有共同公共祖先的进程之间使用\n* 数据结构: 环形队列(逻辑上)\n\n### 具名管道\n由于匿名管道，只能用于亲缘关系之间的进程通信，具名管道(FIFO)， 解决了这个局限。\n\n* 具有文件实体， 但是实际数据在内核缓冲区中\n* 通过名字，可以进程间通信\n\n#### 有名管道的注意事项：\n1. 一个为只读而打开一个管道的进程会阻塞，直到另外一个进程为只写打开管道\n2. 一个为只写而打开一个管道的进程会阻塞，直到另外一个进程为只读打开管道\n\n读管道：\n- 管道中有数据，read返回实际读到的字节数\n- 管道中无数据：\n\t- 管道写端被全部关闭，read返回0，（相当于读到文件末尾）\n\t- 写端没有全部被关闭，read阻塞等待\n\n写管道：\n- 管道读端被全部关闭，进行异常终止（收到一个SIGPIPE信号）\n- 管道读端没有全部关闭：\n\t- 管道已经满了，write会阻塞\n\t- 管道没有满，write将数据写入，并返回实际写入的字节数。\n\n### Linux 实现\npipe 属于 Linux 文件系统中的一种类型：\n\n```c\nstatic struct file_system_type pipe_fs_type = {\n\t.name\t\t= \"pipefs\",\n\t.init_fs_context = pipefs_init_fs_context,\n\t.kill_sb\t= kill_anon_super,\n};\n```\n\n在`sysctl`中的属性如下：\n```c\n\nstatic struct ctl_table fs_pipe_sysctls[] = {\n\t{\n\t\t.procname\t= \"pipe-max-size\",\n\t\t.data\t\t= &pipe_max_size, \n\t\t.maxlen\t\t= sizeof(pipe_max_size),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_dopipe_max_size,\n\t},\n\t{\n\t\t.procname\t= \"pipe-user-pages-hard\",\n\t\t.data\t\t= &pipe_user_pages_hard,\n\t\t.maxlen\t\t= sizeof(pipe_user_pages_hard),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_doulongvec_minmax,\n\t},\n\t{\n\t\t.procname\t= \"pipe-user-pages-soft\",\n\t\t.data\t\t= &pipe_user_pages_soft,\n\t\t.maxlen\t\t= sizeof(pipe_user_pages_soft),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_doulongvec_minmax,\n\t},\n\t{ }\n};\n```\n\n* pipe-max-size\n    - 1048576\n    - `/proc/sys/fs/pipe-max-size`\n\n在 Linux 的实现中，每一个管道至少需要有2段buffer, 一个里面要读取的数据，一个留个即将写入的数据;\n\n实际数据结构：\n\n```c\nstruct pipe_buffer {\n\tstruct page *page;\n\tunsigned int offset, len;\n\tconst struct pipe_buf_operations *ops;\n\tunsigned int flags;\n\tunsigned long private;\n};\n```\n\n### 管道的读写特点：\n\n使用管道时，需要注意以下几种特殊的情况（假设都是阻塞I/O操作）:  \n1. 所有的指向管道写端的文件描述符都关闭了（管道写端引用计数为0），有进程从管道的读端\n读数据，那么管道中剩余的数据被读取以后，再次read会返回0，就像读到文件末尾一样。\n\n2. 如果有指向管道写端的文件描述符没有关闭（管道的写端引用计数大于0），而持有管道写端的进程\n也没有往管道中写数据，这个时候有进程从管道中读取数据，那么管道中剩余的数据被读取后，\n再次read会阻塞，直到管道中有数据可以读了才读取数据并返回。\n\n3. 如果所有指向管道读端的文件描述符都关闭了（管道的读端引用计数为0），这个时候有进程\n向管道中写数据，那么该进程会收到一个信号SIGPIPE, 通常会导致进程异常终止。\n\n4. 如果有指向管道读端的文件描述符没有关闭（管道的读端引用计数大于0），而持有管道读端的进程\n也没有从管道中读数据，这时有进程向管道中写数据，那么在管道被写满的时候再次write会阻塞，\n直到管道中有空位置才能再次写入数据并返回。\n\n\n总结：\n- 读管道：\n    - 有数据，read返回实际读到的字节数。\n    - 无数据：\n        写端被全部关闭，read返回0（相当于读到文件的末尾）\n        写端没有完全关闭，read阻塞等待\n\n- 写管道：\n    - 全部被关闭，进程异常终止（进程收到SIGPIPE信号）\n    - 没有全部关闭：\n        管道已满，write阻塞\n        管道没有满，write将数据写入，并返回实际写入的字节数\n\n## 内存映射 Memory-Mapped\n\n将磁盘文件的数据映射到内存， 用户通过修改内存就能修改磁盘文件\n\n使用内存映射实现进程间通信：\n\n1. 有关系的进程（父子进程）\n    - 还没有子进程的时候\n        - 通过唯一的父进程，先创建内存映射区\n    - 有了内存映射区以后，创建子进程\n    - 父子进程共享创建的内存映射区\n\t- 匿名映射(没有文件实体)\n\n2. 没有关系的进程间通信\n    - 准备一个大小不是0的磁盘文件\n    - 进程1 通过磁盘文件创建内存映射区\n        - 得到一个操作这块内存的指针\n    - 进程2 通过磁盘文件创建内存映射区\n        - 得到一个操作这块内存的指针\n    - 使用内存映射区通信\n\n> 注意：内存映射区通信，是非阻塞。\n\n### Linux 调用函数\n\n```c\nvoid *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);\n```\n\n- 功能：\n将一个文件或者设备的数据映射到内存中\n\n- 参数：\n\t- void *addr: NULL, 由内核指定\n\n\t- length : 要映射的数据的长度，这个值不能为0。建议使用文件的长度。\n\t\t获取文件的长度：\n\t\t- stat() \n\t\t- lseek()\n\n\t- prot : 对申请的内存映射区的操作权限\n\t\t- PROT_EXEC ：可执行的权限\n\t\t- PROT_READ ：读权限\n\t\t- PROT_WRITE ：写权限\n\t\t- PROT_NONE ：没有权限\n\n\t\t要操作映射内存，必须要有读的权限。\n\t\tPROT_READ、PROT_READ|PROT_WRITE\n\n\t- flags :\n\t\t- MAP_SHARED : 映射区的数据会自动和磁盘文件进行同步，进程间通信，必须要设置这个选项\n\t\t- MAP_PRIVATE ：不同步，内存映射区的数据改变了，对原来的文件不会修改，会重新创建一个新的\n\n\t- fd: 需要映射的那个文件的文件描述符\n\t\t- 通过open得到，open的是一个磁盘文件\n\t\t- 注意：文件的大小不能为0，open指定的权限不能和prot参数有冲突。\n\t\t\tprot: PROT_READ                open:只读/读写 \n\t\t\tprot: PROT_READ | PROT_WRITE   open:读写\n\n\t- offset：偏移量，一般不用。必须指定的是4k的整数倍，0表示不便宜。\n\n- 返回值：返回创建的内存的首地址  \n\t失败返回 `MAP_FAILED`，`(void *) -1`\n\n```c\nint munmap(void *addr, size_t length);\n```\n- 功能：释放内存映射\n- 参数：\n\t- addr : 要释放的内存的首地址\n\t- length : 要释放的内存的大小，要和mmap函数中的length参数的值一样。\n\n### Q&A\n\n1. 如果对mmap的返回值(ptr)做++操作(ptr++), munmap是否能够成功?  \n```c\nvoid * ptr = mmap(...);\nptr++;  //可以对其进行++操作\nmunmap(ptr, len);   // 错误,要保存地址\n```\n\n2. 如果open时 `O_RDONLY`, mmap时prot参数指定 `PROT_READ | PROT_WRITE` 会怎样?\n\n\t错误，返回MAP_FAILED\n\topen()函数中的权限建议和prot参数的权限保持一致。\n\n3. 如果文件偏移量为1000会怎样?\n\n\t偏移量必须是4K的整数倍，返回MAP_FAILED\n\n4. mmap什么情况下会调用失败?\n    - 第二个参数：length = 0\n    - 第三个参数：prot\n        - 只指定了写权限\n        - prot `PROT_READ | PROT_WRITE`  \n          第5个参数fd 通过open函数时指定的` O_RDONLY / O_WRONLY`\n\n5. 可以open的时候O_CREAT一个新文件来创建映射区吗?\n    - 可以的，但是创建的文件的大小如果为0的话，肯定不行\n    - 可以对新的文件进行扩展\n        - lseek()\n        - truncate()\n\n6. mmap后关闭文件描述符，对mmap映射有没有影响？\n\t```c\n\tint fd = open(\"XXX\");\n\tmmap(,,,,fd,0);\n\tclose(fd); \n\t```\n\t映射区还存在，创建映射区的fd被关闭，没有任何影响。\n\n7. 对ptr越界操作会怎样？\n\t```c\n\tvoid * ptr = mmap(NULL, 100,,,,,);\n\t```\n\t4K;  \n\t越界操作操作的是非法的内存 -> 段错误\n\n\n## 信号\n\nLinux 进程间通信的最古老的方式之一，是事件发生时对进程的通知机制，有时也称之为软件中断，\n它是在软件层次上对中断机制的一种模拟，是一种异步通信的方式。\n\n信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断，转而处理某一个突发事件。\n\n发往进程的诸多信号，通常都是源于内核。引发内核为进程产生信号的各类事件如下：\n\n- 对于前台进程，用户可以通过输入特殊的终端字符来给它发送信号。比如输入Ctrl+C \n通常会给进程发送一个中断信号。\n\n- 硬件发生异常，即硬件检测到一个错误条件并通知内核，随即再由内核发送相应信号给\n相关进程。比如执行一条异常的机器语言指令，诸如被 0 除，或者引用了无法访问的\n内存区域。\n\n- 系统状态变化，比如 alarm 定时器到期将引起 SIGALRM 信号，进程执行的 CPU \n时间超限，或者该进程的某个子进程退出。\n\n- 运行 kill 命令或调用 kill 函数。\n\n使用信号的两个主要目的是：\n\n- 让进程知道已经发生了一个特定的事情。\n\n- 强迫进程执行它自己代码中的信号处理程序。\n\n- 信号的特点：\n\t- 简单\n\t- 不能携带大量信息\n\t- 满足某个特定条件才发送\n\t- 优先级比较高\n\n- 查看系统定义的信号列表：kill –l\n\n### 信号的 5 种默认处理动作\n- 查看信号的详细信息：man 7 signal\n\n- 信号的 5 中默认处理动作\n\t- Term 终止进程\n\t- Ign 当前进程忽略掉这个信号\n\t- Core 终止进程，并生成一个Core文件\n\t- Stop 暂停当前进程\n\t- Cont 继续执行当前被暂停的进程\n\n- 信号的几种状态：\n\t- 产生\n\t- 未决\n\t- 递达\n\n- SIGKILL 和 SIGSTOP 信号不能被捕捉、阻塞或者忽略，只能执行默认动作。\n\n### 信号相关的函数\n- int kill(pid_t pid, int sig);\n- int raise(int sig);\n- void abort(void);\n- unsigned int alarm(unsigned int seconds);\n- int setitimer(int which, const struct itimerval *new_val, struct itimerval *old_value);\n- sighandler_t signal(int signum, sighandler_t handler);\n- int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\n### 信号集\n- 许多信号相关的系统调用都需要能表示一组不同的信号，多个信号可使用一个称之为\n信号集的数据结构来表示，其系统数据类型为 sigset_t。 \n\n- 在 PCB 中有两个非常重要的信号集。一个称之为 “阻塞信号集” ，另一个称之为“未决信号集” 。\n这两个信号集都是内核使用位图机制来实现的。但操作系统不允许我们直接对这两个信号集进行位操作。\n而需自定义另外一个集合，借助信号集操作函数来对 PCB 中的这两个信号集进行修改。\n\n- 信号的 “未决” 是一种状态，指的是从信号的产生到信号被处理前的这一段时间。\n\n- 信号的 “阻塞” 是一个开关动作，指的是阻止信号被处理，但不是阻止信号产生。\n\n- 信号的阻塞就是让系统暂时保留信号留待以后发送。由于另外有办法让系统忽略信号，\n所以一般情况下信号的阻塞只是暂时的，只是为了防止信号打断敏感的操作。\n\n#### 相关函数\n\n- int sigemptyset(sigset_t *set);\n- int sigfillset(sigset_t *set);\n- int sigaddset(sigset_t *set, int signum);\n- int sigdelset(sigset_t *set, int signum);\n- int sigismember(const sigset_t *set, int signum);\n- int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n- int sigpending(sigset_t *set);\n\n### MAN 7 signal\n\n```bash\n Signal numbering for standard signals\n       The numeric value for each signal is given in the table below.  As shown in the table, many\n       signals  have different numeric values on different architectures.  The first numeric value\n       in each table row shows the signal number on x86, ARM, and most  other  architectures;  the\n       second  value is for Alpha and SPARC; the third is for MIPS; and the last is for PARISC.  A\n       dash (-) denotes that a signal is absent on the corresponding architecture.\n\n       Signal        x86/ARM     Alpha/   MIPS   PARISC   Notes\n                   most others   SPARC\n       ─────────────────────────────────────────────────────────────────\n       SIGHUP           1           1       1       1\n       SIGINT           2           2       2       2\n       SIGQUIT          3           3       3       3\n       SIGILL           4           4       4       4\n       SIGTRAP          5           5       5       5\n       SIGABRT          6           6       6       6\n       SIGIOT           6           6       6       6\n       SIGBUS           7          10      10      10\n       SIGEMT           -           7       7      -\n       SIGFPE           8           8       8       8\n       SIGKILL          9           9       9       9\n       SIGUSR1         10          30      16      16\n       SIGSEGV         11          11      11      11\n       SIGUSR2         12          31      17      17\n       SIGPIPE         13          13      13      13\n       SIGALRM         14          14      14      14\n       SIGTERM         15          15      15      15\n       SIGSTKFLT       16          -       -        7\n       SIGCHLD         17          20      18      18\n       SIGCLD           -          -       18      -\n       SIGCONT         18          19      25      26\n       SIGSTOP         19          17      23      24\n       SIGTSTP         20          18      24      25\n       SIGTTIN         21          21      26      27\n       SIGTTOU         22          22      27      28\n       SIGURG          23          16      21      29\n       SIGXCPU         24          24      30      12\n       SIGXFSZ         25          25      31      30\n       SIGVTALRM       26          26      28      20\n       SIGPROF         27          27      29      21\n       SIGWINCH        28          28      20      23\n       SIGIO           29          23      22      22\n       SIGPOLL                                            Same as SIGIO\n       SIGPWR          30         29/-     19      19\n       SIGINFO          -         29/-     -       -\n       SIGLOST          -         -/29     -       -\n       SIGSYS          31          12      12      31\n       SIGUNUSED       31          -       -       31\n\n Note the following:\n\n       *  Where defined, SIGUNUSED is synonymous with SIGSYS.  Since glibc 2.26, SIGUNUSED  is  no\n          longer defined on any architecture.\n\n       *  Signal 29 is SIGINFO/SIGPWR (synonyms for the same value) on Alpha but SIGLOST on SPARC.\n\n\n```\n","source":"_posts/linux-ipc.md","raw":"---\ntitle: linux_ipc\ndate: 2022-03-21 23:41:11\ntags: Linux, C\n---\n# 进程间通信： IPC\n\n> key: processes , communication\n\n* 进程是一个独立的资源分配单元:\n    - 不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源,进程不是孤立的，\n    - 不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。\n\n* 进程间通信的目的：\n    - 数据传输：一个进程需要将它的数据发送给另一个进程。\n    - 通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。\n    - 资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。\n    - 进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。\n\n* 具体方式\n    - 同一主机：\n        - Unix\n            - 匿名管道\n            - 具名管道\n        - POSIX / System V\n            - 消息队列\n            - 共享内存\n            - 信号量\n    - 网络：\n        - sokcet\n\n## 管道\n\n`ls | ws -l`： \nshell 创建了2个进程来分别执行 `ls` 和 `wc`:\n\n```bash\n---------------             -----------------                 -----------------\n|    stdout   |             |  管道          |                 | stdin         |\n| ls          |   ------>   | 字节流， 单向   |  ------>        |            wc |\n|       fd  1 |             |               |                 | fd 0          |\n---------------             -----------------                 -----------------\n                      管道写入端            管道读取端  \n      \n```\n\n特点：\n* 内存中维护的缓冲器\n    - 大小有限\n    - 不同OS实现不用\n* 具有文件的读.写操作，没有文件的实体(具名管道有文件实体)\n* 一个管道是一个字节流，没有消息边界的概念，可以读取任意大小的数据\n* 读取顺序和写入顺序完全一致\n* 单向传递，半双工\n* 一次性操作: 读取完之后就释放对应的内存\n* 匿名管道仅在具有共同公共祖先的进程之间使用\n* 数据结构: 环形队列(逻辑上)\n\n### 具名管道\n由于匿名管道，只能用于亲缘关系之间的进程通信，具名管道(FIFO)， 解决了这个局限。\n\n* 具有文件实体， 但是实际数据在内核缓冲区中\n* 通过名字，可以进程间通信\n\n#### 有名管道的注意事项：\n1. 一个为只读而打开一个管道的进程会阻塞，直到另外一个进程为只写打开管道\n2. 一个为只写而打开一个管道的进程会阻塞，直到另外一个进程为只读打开管道\n\n读管道：\n- 管道中有数据，read返回实际读到的字节数\n- 管道中无数据：\n\t- 管道写端被全部关闭，read返回0，（相当于读到文件末尾）\n\t- 写端没有全部被关闭，read阻塞等待\n\n写管道：\n- 管道读端被全部关闭，进行异常终止（收到一个SIGPIPE信号）\n- 管道读端没有全部关闭：\n\t- 管道已经满了，write会阻塞\n\t- 管道没有满，write将数据写入，并返回实际写入的字节数。\n\n### Linux 实现\npipe 属于 Linux 文件系统中的一种类型：\n\n```c\nstatic struct file_system_type pipe_fs_type = {\n\t.name\t\t= \"pipefs\",\n\t.init_fs_context = pipefs_init_fs_context,\n\t.kill_sb\t= kill_anon_super,\n};\n```\n\n在`sysctl`中的属性如下：\n```c\n\nstatic struct ctl_table fs_pipe_sysctls[] = {\n\t{\n\t\t.procname\t= \"pipe-max-size\",\n\t\t.data\t\t= &pipe_max_size, \n\t\t.maxlen\t\t= sizeof(pipe_max_size),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_dopipe_max_size,\n\t},\n\t{\n\t\t.procname\t= \"pipe-user-pages-hard\",\n\t\t.data\t\t= &pipe_user_pages_hard,\n\t\t.maxlen\t\t= sizeof(pipe_user_pages_hard),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_doulongvec_minmax,\n\t},\n\t{\n\t\t.procname\t= \"pipe-user-pages-soft\",\n\t\t.data\t\t= &pipe_user_pages_soft,\n\t\t.maxlen\t\t= sizeof(pipe_user_pages_soft),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_doulongvec_minmax,\n\t},\n\t{ }\n};\n```\n\n* pipe-max-size\n    - 1048576\n    - `/proc/sys/fs/pipe-max-size`\n\n在 Linux 的实现中，每一个管道至少需要有2段buffer, 一个里面要读取的数据，一个留个即将写入的数据;\n\n实际数据结构：\n\n```c\nstruct pipe_buffer {\n\tstruct page *page;\n\tunsigned int offset, len;\n\tconst struct pipe_buf_operations *ops;\n\tunsigned int flags;\n\tunsigned long private;\n};\n```\n\n### 管道的读写特点：\n\n使用管道时，需要注意以下几种特殊的情况（假设都是阻塞I/O操作）:  \n1. 所有的指向管道写端的文件描述符都关闭了（管道写端引用计数为0），有进程从管道的读端\n读数据，那么管道中剩余的数据被读取以后，再次read会返回0，就像读到文件末尾一样。\n\n2. 如果有指向管道写端的文件描述符没有关闭（管道的写端引用计数大于0），而持有管道写端的进程\n也没有往管道中写数据，这个时候有进程从管道中读取数据，那么管道中剩余的数据被读取后，\n再次read会阻塞，直到管道中有数据可以读了才读取数据并返回。\n\n3. 如果所有指向管道读端的文件描述符都关闭了（管道的读端引用计数为0），这个时候有进程\n向管道中写数据，那么该进程会收到一个信号SIGPIPE, 通常会导致进程异常终止。\n\n4. 如果有指向管道读端的文件描述符没有关闭（管道的读端引用计数大于0），而持有管道读端的进程\n也没有从管道中读数据，这时有进程向管道中写数据，那么在管道被写满的时候再次write会阻塞，\n直到管道中有空位置才能再次写入数据并返回。\n\n\n总结：\n- 读管道：\n    - 有数据，read返回实际读到的字节数。\n    - 无数据：\n        写端被全部关闭，read返回0（相当于读到文件的末尾）\n        写端没有完全关闭，read阻塞等待\n\n- 写管道：\n    - 全部被关闭，进程异常终止（进程收到SIGPIPE信号）\n    - 没有全部关闭：\n        管道已满，write阻塞\n        管道没有满，write将数据写入，并返回实际写入的字节数\n\n## 内存映射 Memory-Mapped\n\n将磁盘文件的数据映射到内存， 用户通过修改内存就能修改磁盘文件\n\n使用内存映射实现进程间通信：\n\n1. 有关系的进程（父子进程）\n    - 还没有子进程的时候\n        - 通过唯一的父进程，先创建内存映射区\n    - 有了内存映射区以后，创建子进程\n    - 父子进程共享创建的内存映射区\n\t- 匿名映射(没有文件实体)\n\n2. 没有关系的进程间通信\n    - 准备一个大小不是0的磁盘文件\n    - 进程1 通过磁盘文件创建内存映射区\n        - 得到一个操作这块内存的指针\n    - 进程2 通过磁盘文件创建内存映射区\n        - 得到一个操作这块内存的指针\n    - 使用内存映射区通信\n\n> 注意：内存映射区通信，是非阻塞。\n\n### Linux 调用函数\n\n```c\nvoid *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);\n```\n\n- 功能：\n将一个文件或者设备的数据映射到内存中\n\n- 参数：\n\t- void *addr: NULL, 由内核指定\n\n\t- length : 要映射的数据的长度，这个值不能为0。建议使用文件的长度。\n\t\t获取文件的长度：\n\t\t- stat() \n\t\t- lseek()\n\n\t- prot : 对申请的内存映射区的操作权限\n\t\t- PROT_EXEC ：可执行的权限\n\t\t- PROT_READ ：读权限\n\t\t- PROT_WRITE ：写权限\n\t\t- PROT_NONE ：没有权限\n\n\t\t要操作映射内存，必须要有读的权限。\n\t\tPROT_READ、PROT_READ|PROT_WRITE\n\n\t- flags :\n\t\t- MAP_SHARED : 映射区的数据会自动和磁盘文件进行同步，进程间通信，必须要设置这个选项\n\t\t- MAP_PRIVATE ：不同步，内存映射区的数据改变了，对原来的文件不会修改，会重新创建一个新的\n\n\t- fd: 需要映射的那个文件的文件描述符\n\t\t- 通过open得到，open的是一个磁盘文件\n\t\t- 注意：文件的大小不能为0，open指定的权限不能和prot参数有冲突。\n\t\t\tprot: PROT_READ                open:只读/读写 \n\t\t\tprot: PROT_READ | PROT_WRITE   open:读写\n\n\t- offset：偏移量，一般不用。必须指定的是4k的整数倍，0表示不便宜。\n\n- 返回值：返回创建的内存的首地址  \n\t失败返回 `MAP_FAILED`，`(void *) -1`\n\n```c\nint munmap(void *addr, size_t length);\n```\n- 功能：释放内存映射\n- 参数：\n\t- addr : 要释放的内存的首地址\n\t- length : 要释放的内存的大小，要和mmap函数中的length参数的值一样。\n\n### Q&A\n\n1. 如果对mmap的返回值(ptr)做++操作(ptr++), munmap是否能够成功?  \n```c\nvoid * ptr = mmap(...);\nptr++;  //可以对其进行++操作\nmunmap(ptr, len);   // 错误,要保存地址\n```\n\n2. 如果open时 `O_RDONLY`, mmap时prot参数指定 `PROT_READ | PROT_WRITE` 会怎样?\n\n\t错误，返回MAP_FAILED\n\topen()函数中的权限建议和prot参数的权限保持一致。\n\n3. 如果文件偏移量为1000会怎样?\n\n\t偏移量必须是4K的整数倍，返回MAP_FAILED\n\n4. mmap什么情况下会调用失败?\n    - 第二个参数：length = 0\n    - 第三个参数：prot\n        - 只指定了写权限\n        - prot `PROT_READ | PROT_WRITE`  \n          第5个参数fd 通过open函数时指定的` O_RDONLY / O_WRONLY`\n\n5. 可以open的时候O_CREAT一个新文件来创建映射区吗?\n    - 可以的，但是创建的文件的大小如果为0的话，肯定不行\n    - 可以对新的文件进行扩展\n        - lseek()\n        - truncate()\n\n6. mmap后关闭文件描述符，对mmap映射有没有影响？\n\t```c\n\tint fd = open(\"XXX\");\n\tmmap(,,,,fd,0);\n\tclose(fd); \n\t```\n\t映射区还存在，创建映射区的fd被关闭，没有任何影响。\n\n7. 对ptr越界操作会怎样？\n\t```c\n\tvoid * ptr = mmap(NULL, 100,,,,,);\n\t```\n\t4K;  \n\t越界操作操作的是非法的内存 -> 段错误\n\n\n## 信号\n\nLinux 进程间通信的最古老的方式之一，是事件发生时对进程的通知机制，有时也称之为软件中断，\n它是在软件层次上对中断机制的一种模拟，是一种异步通信的方式。\n\n信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断，转而处理某一个突发事件。\n\n发往进程的诸多信号，通常都是源于内核。引发内核为进程产生信号的各类事件如下：\n\n- 对于前台进程，用户可以通过输入特殊的终端字符来给它发送信号。比如输入Ctrl+C \n通常会给进程发送一个中断信号。\n\n- 硬件发生异常，即硬件检测到一个错误条件并通知内核，随即再由内核发送相应信号给\n相关进程。比如执行一条异常的机器语言指令，诸如被 0 除，或者引用了无法访问的\n内存区域。\n\n- 系统状态变化，比如 alarm 定时器到期将引起 SIGALRM 信号，进程执行的 CPU \n时间超限，或者该进程的某个子进程退出。\n\n- 运行 kill 命令或调用 kill 函数。\n\n使用信号的两个主要目的是：\n\n- 让进程知道已经发生了一个特定的事情。\n\n- 强迫进程执行它自己代码中的信号处理程序。\n\n- 信号的特点：\n\t- 简单\n\t- 不能携带大量信息\n\t- 满足某个特定条件才发送\n\t- 优先级比较高\n\n- 查看系统定义的信号列表：kill –l\n\n### 信号的 5 种默认处理动作\n- 查看信号的详细信息：man 7 signal\n\n- 信号的 5 中默认处理动作\n\t- Term 终止进程\n\t- Ign 当前进程忽略掉这个信号\n\t- Core 终止进程，并生成一个Core文件\n\t- Stop 暂停当前进程\n\t- Cont 继续执行当前被暂停的进程\n\n- 信号的几种状态：\n\t- 产生\n\t- 未决\n\t- 递达\n\n- SIGKILL 和 SIGSTOP 信号不能被捕捉、阻塞或者忽略，只能执行默认动作。\n\n### 信号相关的函数\n- int kill(pid_t pid, int sig);\n- int raise(int sig);\n- void abort(void);\n- unsigned int alarm(unsigned int seconds);\n- int setitimer(int which, const struct itimerval *new_val, struct itimerval *old_value);\n- sighandler_t signal(int signum, sighandler_t handler);\n- int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\n### 信号集\n- 许多信号相关的系统调用都需要能表示一组不同的信号，多个信号可使用一个称之为\n信号集的数据结构来表示，其系统数据类型为 sigset_t。 \n\n- 在 PCB 中有两个非常重要的信号集。一个称之为 “阻塞信号集” ，另一个称之为“未决信号集” 。\n这两个信号集都是内核使用位图机制来实现的。但操作系统不允许我们直接对这两个信号集进行位操作。\n而需自定义另外一个集合，借助信号集操作函数来对 PCB 中的这两个信号集进行修改。\n\n- 信号的 “未决” 是一种状态，指的是从信号的产生到信号被处理前的这一段时间。\n\n- 信号的 “阻塞” 是一个开关动作，指的是阻止信号被处理，但不是阻止信号产生。\n\n- 信号的阻塞就是让系统暂时保留信号留待以后发送。由于另外有办法让系统忽略信号，\n所以一般情况下信号的阻塞只是暂时的，只是为了防止信号打断敏感的操作。\n\n#### 相关函数\n\n- int sigemptyset(sigset_t *set);\n- int sigfillset(sigset_t *set);\n- int sigaddset(sigset_t *set, int signum);\n- int sigdelset(sigset_t *set, int signum);\n- int sigismember(const sigset_t *set, int signum);\n- int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n- int sigpending(sigset_t *set);\n\n### MAN 7 signal\n\n```bash\n Signal numbering for standard signals\n       The numeric value for each signal is given in the table below.  As shown in the table, many\n       signals  have different numeric values on different architectures.  The first numeric value\n       in each table row shows the signal number on x86, ARM, and most  other  architectures;  the\n       second  value is for Alpha and SPARC; the third is for MIPS; and the last is for PARISC.  A\n       dash (-) denotes that a signal is absent on the corresponding architecture.\n\n       Signal        x86/ARM     Alpha/   MIPS   PARISC   Notes\n                   most others   SPARC\n       ─────────────────────────────────────────────────────────────────\n       SIGHUP           1           1       1       1\n       SIGINT           2           2       2       2\n       SIGQUIT          3           3       3       3\n       SIGILL           4           4       4       4\n       SIGTRAP          5           5       5       5\n       SIGABRT          6           6       6       6\n       SIGIOT           6           6       6       6\n       SIGBUS           7          10      10      10\n       SIGEMT           -           7       7      -\n       SIGFPE           8           8       8       8\n       SIGKILL          9           9       9       9\n       SIGUSR1         10          30      16      16\n       SIGSEGV         11          11      11      11\n       SIGUSR2         12          31      17      17\n       SIGPIPE         13          13      13      13\n       SIGALRM         14          14      14      14\n       SIGTERM         15          15      15      15\n       SIGSTKFLT       16          -       -        7\n       SIGCHLD         17          20      18      18\n       SIGCLD           -          -       18      -\n       SIGCONT         18          19      25      26\n       SIGSTOP         19          17      23      24\n       SIGTSTP         20          18      24      25\n       SIGTTIN         21          21      26      27\n       SIGTTOU         22          22      27      28\n       SIGURG          23          16      21      29\n       SIGXCPU         24          24      30      12\n       SIGXFSZ         25          25      31      30\n       SIGVTALRM       26          26      28      20\n       SIGPROF         27          27      29      21\n       SIGWINCH        28          28      20      23\n       SIGIO           29          23      22      22\n       SIGPOLL                                            Same as SIGIO\n       SIGPWR          30         29/-     19      19\n       SIGINFO          -         29/-     -       -\n       SIGLOST          -         -/29     -       -\n       SIGSYS          31          12      12      31\n       SIGUNUSED       31          -       -       31\n\n Note the following:\n\n       *  Where defined, SIGUNUSED is synonymous with SIGSYS.  Since glibc 2.26, SIGUNUSED  is  no\n          longer defined on any architecture.\n\n       *  Signal 29 is SIGINFO/SIGPWR (synonyms for the same value) on Alpha but SIGLOST on SPARC.\n\n\n```\n","slug":"linux-ipc","published":1,"updated":"2022-03-21T15:42:01.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfp0009079y58ru8v3y","content":"<h1 id=\"进程间通信：-IPC\"><a href=\"#进程间通信：-IPC\" class=\"headerlink\" title=\"进程间通信： IPC\"></a>进程间通信： IPC</h1><blockquote>\n<p>key: processes , communication</p>\n</blockquote>\n<ul>\n<li><p>进程是一个独立的资源分配单元:</p>\n<ul>\n<li>不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源,进程不是孤立的，</li>\n<li>不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。</li>\n</ul>\n</li>\n<li><p>进程间通信的目的：</p>\n<ul>\n<li>数据传输：一个进程需要将它的数据发送给另一个进程。</li>\n<li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。</li>\n<li>资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。</li>\n<li>进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。</li>\n</ul>\n</li>\n<li><p>具体方式</p>\n<ul>\n<li>同一主机：<ul>\n<li>Unix<ul>\n<li>匿名管道</li>\n<li>具名管道</li>\n</ul>\n</li>\n<li>POSIX / System V<ul>\n<li>消息队列</li>\n<li>共享内存</li>\n<li>信号量</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网络：<ul>\n<li>sokcet</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h2><p><code>ls | ws -l</code>：<br>shell 创建了2个进程来分别执行 <code>ls</code> 和 <code>wc</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------             -----------------                 -----------------</span><br><span class=\"line\">|    stdout   |             |  管道          |                 | stdin         |</span><br><span class=\"line\">| ls          |   ------&gt;   | 字节流， 单向   |  ------&gt;        |            wc |</span><br><span class=\"line\">|       fd  1 |             |               |                 | fd 0          |</span><br><span class=\"line\">---------------             -----------------                 -----------------</span><br><span class=\"line\">                      管道写入端            管道读取端  </span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<ul>\n<li>内存中维护的缓冲器<ul>\n<li>大小有限</li>\n<li>不同OS实现不用</li>\n</ul>\n</li>\n<li>具有文件的读.写操作，没有文件的实体(具名管道有文件实体)</li>\n<li>一个管道是一个字节流，没有消息边界的概念，可以读取任意大小的数据</li>\n<li>读取顺序和写入顺序完全一致</li>\n<li>单向传递，半双工</li>\n<li>一次性操作: 读取完之后就释放对应的内存</li>\n<li>匿名管道仅在具有共同公共祖先的进程之间使用</li>\n<li>数据结构: 环形队列(逻辑上)</li>\n</ul>\n<h3 id=\"具名管道\"><a href=\"#具名管道\" class=\"headerlink\" title=\"具名管道\"></a>具名管道</h3><p>由于匿名管道，只能用于亲缘关系之间的进程通信，具名管道(FIFO)， 解决了这个局限。</p>\n<ul>\n<li>具有文件实体， 但是实际数据在内核缓冲区中</li>\n<li>通过名字，可以进程间通信</li>\n</ul>\n<h4 id=\"有名管道的注意事项：\"><a href=\"#有名管道的注意事项：\" class=\"headerlink\" title=\"有名管道的注意事项：\"></a>有名管道的注意事项：</h4><ol>\n<li>一个为只读而打开一个管道的进程会阻塞，直到另外一个进程为只写打开管道</li>\n<li>一个为只写而打开一个管道的进程会阻塞，直到另外一个进程为只读打开管道</li>\n</ol>\n<p>读管道：</p>\n<ul>\n<li>管道中有数据，read返回实际读到的字节数</li>\n<li>管道中无数据：<ul>\n<li>管道写端被全部关闭，read返回0，（相当于读到文件末尾）</li>\n<li>写端没有全部被关闭，read阻塞等待</li>\n</ul>\n</li>\n</ul>\n<p>写管道：</p>\n<ul>\n<li>管道读端被全部关闭，进行异常终止（收到一个SIGPIPE信号）</li>\n<li>管道读端没有全部关闭：<ul>\n<li>管道已经满了，write会阻塞</li>\n<li>管道没有满，write将数据写入，并返回实际写入的字节数。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Linux-实现\"><a href=\"#Linux-实现\" class=\"headerlink\" title=\"Linux 实现\"></a>Linux 实现</h3><p>pipe 属于 Linux 文件系统中的一种类型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_system_type</span> <span class=\"title\">pipe_fs_type</span> =</span> &#123;</span><br><span class=\"line\">\t.name\t\t= <span class=\"string\">&quot;pipefs&quot;</span>,</span><br><span class=\"line\">\t.init_fs_context = pipefs_init_fs_context,</span><br><span class=\"line\">\t.kill_sb\t= kill_anon_super,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>sysctl</code>中的属性如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ctl_table</span> <span class=\"title\">fs_pipe_sysctls</span>[] =</span> &#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.procname\t= <span class=\"string\">&quot;pipe-max-size&quot;</span>,</span><br><span class=\"line\">\t\t.data\t\t= &amp;pipe_max_size, </span><br><span class=\"line\">\t\t.maxlen\t\t= <span class=\"keyword\">sizeof</span>(pipe_max_size),</span><br><span class=\"line\">\t\t.mode\t\t= <span class=\"number\">0644</span>,</span><br><span class=\"line\">\t\t.proc_handler\t= proc_dopipe_max_size,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.procname\t= <span class=\"string\">&quot;pipe-user-pages-hard&quot;</span>,</span><br><span class=\"line\">\t\t.data\t\t= &amp;pipe_user_pages_hard,</span><br><span class=\"line\">\t\t.maxlen\t\t= <span class=\"keyword\">sizeof</span>(pipe_user_pages_hard),</span><br><span class=\"line\">\t\t.mode\t\t= <span class=\"number\">0644</span>,</span><br><span class=\"line\">\t\t.proc_handler\t= proc_doulongvec_minmax,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.procname\t= <span class=\"string\">&quot;pipe-user-pages-soft&quot;</span>,</span><br><span class=\"line\">\t\t.data\t\t= &amp;pipe_user_pages_soft,</span><br><span class=\"line\">\t\t.maxlen\t\t= <span class=\"keyword\">sizeof</span>(pipe_user_pages_soft),</span><br><span class=\"line\">\t\t.mode\t\t= <span class=\"number\">0644</span>,</span><br><span class=\"line\">\t\t.proc_handler\t= proc_doulongvec_minmax,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pipe-max-size<ul>\n<li>1048576</li>\n<li><code>/proc/sys/fs/pipe-max-size</code></li>\n</ul>\n</li>\n</ul>\n<p>在 Linux 的实现中，每一个管道至少需要有2段buffer, 一个里面要读取的数据，一个留个即将写入的数据;</p>\n<p>实际数据结构：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">page</span> *<span class=\"title\">page</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> offset, len;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buf_operations</span> *<span class=\"title\">ops</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> flags;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">private</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管道的读写特点：\"><a href=\"#管道的读写特点：\" class=\"headerlink\" title=\"管道的读写特点：\"></a>管道的读写特点：</h3><p>使用管道时，需要注意以下几种特殊的情况（假设都是阻塞I/O操作）:  </p>\n<ol>\n<li><p>所有的指向管道写端的文件描述符都关闭了（管道写端引用计数为0），有进程从管道的读端<br>读数据，那么管道中剩余的数据被读取以后，再次read会返回0，就像读到文件末尾一样。</p>\n</li>\n<li><p>如果有指向管道写端的文件描述符没有关闭（管道的写端引用计数大于0），而持有管道写端的进程<br>也没有往管道中写数据，这个时候有进程从管道中读取数据，那么管道中剩余的数据被读取后，<br>再次read会阻塞，直到管道中有数据可以读了才读取数据并返回。</p>\n</li>\n<li><p>如果所有指向管道读端的文件描述符都关闭了（管道的读端引用计数为0），这个时候有进程<br>向管道中写数据，那么该进程会收到一个信号SIGPIPE, 通常会导致进程异常终止。</p>\n</li>\n<li><p>如果有指向管道读端的文件描述符没有关闭（管道的读端引用计数大于0），而持有管道读端的进程<br>也没有从管道中读数据，这时有进程向管道中写数据，那么在管道被写满的时候再次write会阻塞，<br>直到管道中有空位置才能再次写入数据并返回。</p>\n</li>\n</ol>\n<p>总结：</p>\n<ul>\n<li><p>读管道：</p>\n<ul>\n<li>有数据，read返回实际读到的字节数。</li>\n<li>无数据：<br>  写端被全部关闭，read返回0（相当于读到文件的末尾）<br>  写端没有完全关闭，read阻塞等待</li>\n</ul>\n</li>\n<li><p>写管道：</p>\n<ul>\n<li>全部被关闭，进程异常终止（进程收到SIGPIPE信号）</li>\n<li>没有全部关闭：<br>  管道已满，write阻塞<br>  管道没有满，write将数据写入，并返回实际写入的字节数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存映射-Memory-Mapped\"><a href=\"#内存映射-Memory-Mapped\" class=\"headerlink\" title=\"内存映射 Memory-Mapped\"></a>内存映射 Memory-Mapped</h2><p>将磁盘文件的数据映射到内存， 用户通过修改内存就能修改磁盘文件</p>\n<p>使用内存映射实现进程间通信：</p>\n<ol>\n<li><p>有关系的进程（父子进程）</p>\n<ul>\n<li>还没有子进程的时候<ul>\n<li>通过唯一的父进程，先创建内存映射区</li>\n</ul>\n</li>\n<li>有了内存映射区以后，创建子进程</li>\n<li>父子进程共享创建的内存映射区</li>\n<li>匿名映射(没有文件实体)</li>\n</ul>\n</li>\n<li><p>没有关系的进程间通信</p>\n<ul>\n<li>准备一个大小不是0的磁盘文件</li>\n<li>进程1 通过磁盘文件创建内存映射区<ul>\n<li>得到一个操作这块内存的指针</li>\n</ul>\n</li>\n<li>进程2 通过磁盘文件创建内存映射区<ul>\n<li>得到一个操作这块内存的指针</li>\n</ul>\n</li>\n<li>使用内存映射区通信</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>注意：内存映射区通信，是非阻塞。</p>\n</blockquote>\n<h3 id=\"Linux-调用函数\"><a href=\"#Linux-调用函数\" class=\"headerlink\" title=\"Linux 调用函数\"></a>Linux 调用函数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> length, <span class=\"keyword\">int</span> prot, <span class=\"keyword\">int</span> flags,<span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> offset)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>功能：<br>将一个文件或者设备的数据映射到内存中</p>\n</li>\n<li><p>参数：</p>\n<ul>\n<li><p>void *addr: NULL, 由内核指定</p>\n</li>\n<li><p>length : 要映射的数据的长度，这个值不能为0。建议使用文件的长度。<br>  获取文件的长度：</p>\n<ul>\n<li>stat() </li>\n<li>lseek()</li>\n</ul>\n</li>\n<li><p>prot : 对申请的内存映射区的操作权限</p>\n<ul>\n<li>PROT_EXEC ：可执行的权限</li>\n<li>PROT_READ ：读权限</li>\n<li>PROT_WRITE ：写权限</li>\n<li>PROT_NONE ：没有权限</li>\n</ul>\n<p>  要操作映射内存，必须要有读的权限。<br>  PROT_READ、PROT_READ|PROT_WRITE</p>\n</li>\n<li><p>flags :</p>\n<ul>\n<li>MAP_SHARED : 映射区的数据会自动和磁盘文件进行同步，进程间通信，必须要设置这个选项</li>\n<li>MAP_PRIVATE ：不同步，内存映射区的数据改变了，对原来的文件不会修改，会重新创建一个新的</li>\n</ul>\n</li>\n<li><p>fd: 需要映射的那个文件的文件描述符</p>\n<ul>\n<li>通过open得到，open的是一个磁盘文件</li>\n<li>注意：文件的大小不能为0，open指定的权限不能和prot参数有冲突。<br>  prot: PROT_READ                open:只读/读写<br>  prot: PROT_READ | PROT_WRITE   open:读写</li>\n</ul>\n</li>\n<li><p>offset：偏移量，一般不用。必须指定的是4k的整数倍，0表示不便宜。</p>\n</li>\n</ul>\n</li>\n<li><p>返回值：返回创建的内存的首地址<br>  失败返回 <code>MAP_FAILED</code>，<code>(void *) -1</code></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">munmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>功能：释放内存映射</li>\n<li>参数：<ul>\n<li>addr : 要释放的内存的首地址</li>\n<li>length : 要释放的内存的大小，要和mmap函数中的length参数的值一样。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h3><ol>\n<li><p>如果对mmap的返回值(ptr)做++操作(ptr++), munmap是否能够成功?  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> * ptr = mmap(...);</span><br><span class=\"line\">ptr++;  <span class=\"comment\">//可以对其进行++操作</span></span><br><span class=\"line\">munmap(ptr, len);   <span class=\"comment\">// 错误,要保存地址</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果open时 <code>O_RDONLY</code>, mmap时prot参数指定 <code>PROT_READ | PROT_WRITE</code> 会怎样?</p>\n<p> 错误，返回MAP_FAILED<br> open()函数中的权限建议和prot参数的权限保持一致。</p>\n</li>\n<li><p>如果文件偏移量为1000会怎样?</p>\n<p> 偏移量必须是4K的整数倍，返回MAP_FAILED</p>\n</li>\n<li><p>mmap什么情况下会调用失败?</p>\n<ul>\n<li>第二个参数：length = 0</li>\n<li>第三个参数：prot<ul>\n<li>只指定了写权限</li>\n<li>prot <code>PROT_READ | PROT_WRITE</code><br>第5个参数fd 通过open函数时指定的<code> O_RDONLY / O_WRONLY</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可以open的时候O_CREAT一个新文件来创建映射区吗?</p>\n<ul>\n<li>可以的，但是创建的文件的大小如果为0的话，肯定不行</li>\n<li>可以对新的文件进行扩展<ul>\n<li>lseek()</li>\n<li>truncate()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>mmap后关闭文件描述符，对mmap映射有没有影响？</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> fd = open(<span class=\"string\">&quot;XXX&quot;</span>);</span><br><span class=\"line\">mmap(,,,,fd,<span class=\"number\">0</span>);</span><br><span class=\"line\">close(fd); </span><br></pre></td></tr></table></figure>\n<p> 映射区还存在，创建映射区的fd被关闭，没有任何影响。</p>\n</li>\n<li><p>对ptr越界操作会怎样？</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> * ptr = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">100</span>,,,,,);</span><br></pre></td></tr></table></figure>\n<p> 4K;<br> 越界操作操作的是非法的内存 -&gt; 段错误</p>\n</li>\n</ol>\n<h2 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h2><p>Linux 进程间通信的最古老的方式之一，是事件发生时对进程的通知机制，有时也称之为软件中断，<br>它是在软件层次上对中断机制的一种模拟，是一种异步通信的方式。</p>\n<p>信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断，转而处理某一个突发事件。</p>\n<p>发往进程的诸多信号，通常都是源于内核。引发内核为进程产生信号的各类事件如下：</p>\n<ul>\n<li><p>对于前台进程，用户可以通过输入特殊的终端字符来给它发送信号。比如输入Ctrl+C<br>通常会给进程发送一个中断信号。</p>\n</li>\n<li><p>硬件发生异常，即硬件检测到一个错误条件并通知内核，随即再由内核发送相应信号给<br>相关进程。比如执行一条异常的机器语言指令，诸如被 0 除，或者引用了无法访问的<br>内存区域。</p>\n</li>\n<li><p>系统状态变化，比如 alarm 定时器到期将引起 SIGALRM 信号，进程执行的 CPU<br>时间超限，或者该进程的某个子进程退出。</p>\n</li>\n<li><p>运行 kill 命令或调用 kill 函数。</p>\n</li>\n</ul>\n<p>使用信号的两个主要目的是：</p>\n<ul>\n<li><p>让进程知道已经发生了一个特定的事情。</p>\n</li>\n<li><p>强迫进程执行它自己代码中的信号处理程序。</p>\n</li>\n<li><p>信号的特点：</p>\n<ul>\n<li>简单</li>\n<li>不能携带大量信息</li>\n<li>满足某个特定条件才发送</li>\n<li>优先级比较高</li>\n</ul>\n</li>\n<li><p>查看系统定义的信号列表：kill –l</p>\n</li>\n</ul>\n<h3 id=\"信号的-5-种默认处理动作\"><a href=\"#信号的-5-种默认处理动作\" class=\"headerlink\" title=\"信号的 5 种默认处理动作\"></a>信号的 5 种默认处理动作</h3><ul>\n<li><p>查看信号的详细信息：man 7 signal</p>\n</li>\n<li><p>信号的 5 中默认处理动作</p>\n<ul>\n<li>Term 终止进程</li>\n<li>Ign 当前进程忽略掉这个信号</li>\n<li>Core 终止进程，并生成一个Core文件</li>\n<li>Stop 暂停当前进程</li>\n<li>Cont 继续执行当前被暂停的进程</li>\n</ul>\n</li>\n<li><p>信号的几种状态：</p>\n<ul>\n<li>产生</li>\n<li>未决</li>\n<li>递达</li>\n</ul>\n</li>\n<li><p>SIGKILL 和 SIGSTOP 信号不能被捕捉、阻塞或者忽略，只能执行默认动作。</p>\n</li>\n</ul>\n<h3 id=\"信号相关的函数\"><a href=\"#信号相关的函数\" class=\"headerlink\" title=\"信号相关的函数\"></a>信号相关的函数</h3><ul>\n<li>int kill(pid_t pid, int sig);</li>\n<li>int raise(int sig);</li>\n<li>void abort(void);</li>\n<li>unsigned int alarm(unsigned int seconds);</li>\n<li>int setitimer(int which, const struct itimerval *new_val, struct itimerval *old_value);</li>\n<li>sighandler_t signal(int signum, sighandler_t handler);</li>\n<li>int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);</li>\n</ul>\n<h3 id=\"信号集\"><a href=\"#信号集\" class=\"headerlink\" title=\"信号集\"></a>信号集</h3><ul>\n<li><p>许多信号相关的系统调用都需要能表示一组不同的信号，多个信号可使用一个称之为<br>信号集的数据结构来表示，其系统数据类型为 sigset_t。 </p>\n</li>\n<li><p>在 PCB 中有两个非常重要的信号集。一个称之为 “阻塞信号集” ，另一个称之为“未决信号集” 。<br>这两个信号集都是内核使用位图机制来实现的。但操作系统不允许我们直接对这两个信号集进行位操作。<br>而需自定义另外一个集合，借助信号集操作函数来对 PCB 中的这两个信号集进行修改。</p>\n</li>\n<li><p>信号的 “未决” 是一种状态，指的是从信号的产生到信号被处理前的这一段时间。</p>\n</li>\n<li><p>信号的 “阻塞” 是一个开关动作，指的是阻止信号被处理，但不是阻止信号产生。</p>\n</li>\n<li><p>信号的阻塞就是让系统暂时保留信号留待以后发送。由于另外有办法让系统忽略信号，<br>所以一般情况下信号的阻塞只是暂时的，只是为了防止信号打断敏感的操作。</p>\n</li>\n</ul>\n<h4 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h4><ul>\n<li>int sigemptyset(sigset_t *set);</li>\n<li>int sigfillset(sigset_t *set);</li>\n<li>int sigaddset(sigset_t *set, int signum);</li>\n<li>int sigdelset(sigset_t *set, int signum);</li>\n<li>int sigismember(const sigset_t *set, int signum);</li>\n<li>int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);</li>\n<li>int sigpending(sigset_t *set);</li>\n</ul>\n<h3 id=\"MAN-7-signal\"><a href=\"#MAN-7-signal\" class=\"headerlink\" title=\"MAN 7 signal\"></a>MAN 7 signal</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signal numbering <span class=\"keyword\">for</span> standard signals</span><br><span class=\"line\">      The numeric value <span class=\"keyword\">for</span> each signal is given <span class=\"keyword\">in</span> the table below.  As shown <span class=\"keyword\">in</span> the table, many</span><br><span class=\"line\">      signals  have different numeric values on different architectures.  The first numeric value</span><br><span class=\"line\">      <span class=\"keyword\">in</span> each table row shows the signal number on x86, ARM, and most  other  architectures;  the</span><br><span class=\"line\">      second  value is <span class=\"keyword\">for</span> Alpha and SPARC; the third is <span class=\"keyword\">for</span> MIPS; and the last is <span class=\"keyword\">for</span> PARISC.  A</span><br><span class=\"line\">      dash (-) denotes that a signal is absent on the corresponding architecture.</span><br><span class=\"line\"></span><br><span class=\"line\">      Signal        x86/ARM     Alpha/   MIPS   PARISC   Notes</span><br><span class=\"line\">                  most others   SPARC</span><br><span class=\"line\">      ─────────────────────────────────────────────────────────────────</span><br><span class=\"line\">      SIGHUP           1           1       1       1</span><br><span class=\"line\">      SIGINT           2           2       2       2</span><br><span class=\"line\">      SIGQUIT          3           3       3       3</span><br><span class=\"line\">      SIGILL           4           4       4       4</span><br><span class=\"line\">      SIGTRAP          5           5       5       5</span><br><span class=\"line\">      SIGABRT          6           6       6       6</span><br><span class=\"line\">      SIGIOT           6           6       6       6</span><br><span class=\"line\">      SIGBUS           7          10      10      10</span><br><span class=\"line\">      SIGEMT           -           7       7      -</span><br><span class=\"line\">      SIGFPE           8           8       8       8</span><br><span class=\"line\">      SIGKILL          9           9       9       9</span><br><span class=\"line\">      SIGUSR1         10          30      16      16</span><br><span class=\"line\">      SIGSEGV         11          11      11      11</span><br><span class=\"line\">      SIGUSR2         12          31      17      17</span><br><span class=\"line\">      SIGPIPE         13          13      13      13</span><br><span class=\"line\">      SIGALRM         14          14      14      14</span><br><span class=\"line\">      SIGTERM         15          15      15      15</span><br><span class=\"line\">      SIGSTKFLT       16          -       -        7</span><br><span class=\"line\">      SIGCHLD         17          20      18      18</span><br><span class=\"line\">      SIGCLD           -          -       18      -</span><br><span class=\"line\">      SIGCONT         18          19      25      26</span><br><span class=\"line\">      SIGSTOP         19          17      23      24</span><br><span class=\"line\">      SIGTSTP         20          18      24      25</span><br><span class=\"line\">      SIGTTIN         21          21      26      27</span><br><span class=\"line\">      SIGTTOU         22          22      27      28</span><br><span class=\"line\">      SIGURG          23          16      21      29</span><br><span class=\"line\">      SIGXCPU         24          24      30      12</span><br><span class=\"line\">      SIGXFSZ         25          25      31      30</span><br><span class=\"line\">      SIGVTALRM       26          26      28      20</span><br><span class=\"line\">      SIGPROF         27          27      29      21</span><br><span class=\"line\">      SIGWINCH        28          28      20      23</span><br><span class=\"line\">      SIGIO           29          23      22      22</span><br><span class=\"line\">      SIGPOLL                                            Same as SIGIO</span><br><span class=\"line\">      SIGPWR          30         29/-     19      19</span><br><span class=\"line\">      SIGINFO          -         29/-     -       -</span><br><span class=\"line\">      SIGLOST          -         -/29     -       -</span><br><span class=\"line\">      SIGSYS          31          12      12      31</span><br><span class=\"line\">      SIGUNUSED       31          -       -       31</span><br><span class=\"line\"></span><br><span class=\"line\">Note the following:</span><br><span class=\"line\"></span><br><span class=\"line\">      *  Where defined, SIGUNUSED is synonymous with SIGSYS.  Since glibc 2.26, SIGUNUSED  is  no</span><br><span class=\"line\">         longer defined on any architecture.</span><br><span class=\"line\"></span><br><span class=\"line\">      *  Signal 29 is SIGINFO/SIGPWR (synonyms <span class=\"keyword\">for</span> the same value) on Alpha but SIGLOST on SPARC.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"进程间通信：-IPC\"><a href=\"#进程间通信：-IPC\" class=\"headerlink\" title=\"进程间通信： IPC\"></a>进程间通信： IPC</h1><blockquote>\n<p>key: processes , communication</p>\n</blockquote>\n<ul>\n<li><p>进程是一个独立的资源分配单元:</p>\n<ul>\n<li>不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源,进程不是孤立的，</li>\n<li>不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。</li>\n</ul>\n</li>\n<li><p>进程间通信的目的：</p>\n<ul>\n<li>数据传输：一个进程需要将它的数据发送给另一个进程。</li>\n<li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。</li>\n<li>资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。</li>\n<li>进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。</li>\n</ul>\n</li>\n<li><p>具体方式</p>\n<ul>\n<li>同一主机：<ul>\n<li>Unix<ul>\n<li>匿名管道</li>\n<li>具名管道</li>\n</ul>\n</li>\n<li>POSIX / System V<ul>\n<li>消息队列</li>\n<li>共享内存</li>\n<li>信号量</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网络：<ul>\n<li>sokcet</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h2><p><code>ls | ws -l</code>：<br>shell 创建了2个进程来分别执行 <code>ls</code> 和 <code>wc</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------             -----------------                 -----------------</span><br><span class=\"line\">|    stdout   |             |  管道          |                 | stdin         |</span><br><span class=\"line\">| ls          |   ------&gt;   | 字节流， 单向   |  ------&gt;        |            wc |</span><br><span class=\"line\">|       fd  1 |             |               |                 | fd 0          |</span><br><span class=\"line\">---------------             -----------------                 -----------------</span><br><span class=\"line\">                      管道写入端            管道读取端  </span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<ul>\n<li>内存中维护的缓冲器<ul>\n<li>大小有限</li>\n<li>不同OS实现不用</li>\n</ul>\n</li>\n<li>具有文件的读.写操作，没有文件的实体(具名管道有文件实体)</li>\n<li>一个管道是一个字节流，没有消息边界的概念，可以读取任意大小的数据</li>\n<li>读取顺序和写入顺序完全一致</li>\n<li>单向传递，半双工</li>\n<li>一次性操作: 读取完之后就释放对应的内存</li>\n<li>匿名管道仅在具有共同公共祖先的进程之间使用</li>\n<li>数据结构: 环形队列(逻辑上)</li>\n</ul>\n<h3 id=\"具名管道\"><a href=\"#具名管道\" class=\"headerlink\" title=\"具名管道\"></a>具名管道</h3><p>由于匿名管道，只能用于亲缘关系之间的进程通信，具名管道(FIFO)， 解决了这个局限。</p>\n<ul>\n<li>具有文件实体， 但是实际数据在内核缓冲区中</li>\n<li>通过名字，可以进程间通信</li>\n</ul>\n<h4 id=\"有名管道的注意事项：\"><a href=\"#有名管道的注意事项：\" class=\"headerlink\" title=\"有名管道的注意事项：\"></a>有名管道的注意事项：</h4><ol>\n<li>一个为只读而打开一个管道的进程会阻塞，直到另外一个进程为只写打开管道</li>\n<li>一个为只写而打开一个管道的进程会阻塞，直到另外一个进程为只读打开管道</li>\n</ol>\n<p>读管道：</p>\n<ul>\n<li>管道中有数据，read返回实际读到的字节数</li>\n<li>管道中无数据：<ul>\n<li>管道写端被全部关闭，read返回0，（相当于读到文件末尾）</li>\n<li>写端没有全部被关闭，read阻塞等待</li>\n</ul>\n</li>\n</ul>\n<p>写管道：</p>\n<ul>\n<li>管道读端被全部关闭，进行异常终止（收到一个SIGPIPE信号）</li>\n<li>管道读端没有全部关闭：<ul>\n<li>管道已经满了，write会阻塞</li>\n<li>管道没有满，write将数据写入，并返回实际写入的字节数。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Linux-实现\"><a href=\"#Linux-实现\" class=\"headerlink\" title=\"Linux 实现\"></a>Linux 实现</h3><p>pipe 属于 Linux 文件系统中的一种类型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_system_type</span> <span class=\"title\">pipe_fs_type</span> =</span> &#123;</span><br><span class=\"line\">\t.name\t\t= <span class=\"string\">&quot;pipefs&quot;</span>,</span><br><span class=\"line\">\t.init_fs_context = pipefs_init_fs_context,</span><br><span class=\"line\">\t.kill_sb\t= kill_anon_super,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>sysctl</code>中的属性如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ctl_table</span> <span class=\"title\">fs_pipe_sysctls</span>[] =</span> &#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.procname\t= <span class=\"string\">&quot;pipe-max-size&quot;</span>,</span><br><span class=\"line\">\t\t.data\t\t= &amp;pipe_max_size, </span><br><span class=\"line\">\t\t.maxlen\t\t= <span class=\"keyword\">sizeof</span>(pipe_max_size),</span><br><span class=\"line\">\t\t.mode\t\t= <span class=\"number\">0644</span>,</span><br><span class=\"line\">\t\t.proc_handler\t= proc_dopipe_max_size,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.procname\t= <span class=\"string\">&quot;pipe-user-pages-hard&quot;</span>,</span><br><span class=\"line\">\t\t.data\t\t= &amp;pipe_user_pages_hard,</span><br><span class=\"line\">\t\t.maxlen\t\t= <span class=\"keyword\">sizeof</span>(pipe_user_pages_hard),</span><br><span class=\"line\">\t\t.mode\t\t= <span class=\"number\">0644</span>,</span><br><span class=\"line\">\t\t.proc_handler\t= proc_doulongvec_minmax,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.procname\t= <span class=\"string\">&quot;pipe-user-pages-soft&quot;</span>,</span><br><span class=\"line\">\t\t.data\t\t= &amp;pipe_user_pages_soft,</span><br><span class=\"line\">\t\t.maxlen\t\t= <span class=\"keyword\">sizeof</span>(pipe_user_pages_soft),</span><br><span class=\"line\">\t\t.mode\t\t= <span class=\"number\">0644</span>,</span><br><span class=\"line\">\t\t.proc_handler\t= proc_doulongvec_minmax,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pipe-max-size<ul>\n<li>1048576</li>\n<li><code>/proc/sys/fs/pipe-max-size</code></li>\n</ul>\n</li>\n</ul>\n<p>在 Linux 的实现中，每一个管道至少需要有2段buffer, 一个里面要读取的数据，一个留个即将写入的数据;</p>\n<p>实际数据结构：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">page</span> *<span class=\"title\">page</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> offset, len;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buf_operations</span> *<span class=\"title\">ops</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> flags;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">private</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管道的读写特点：\"><a href=\"#管道的读写特点：\" class=\"headerlink\" title=\"管道的读写特点：\"></a>管道的读写特点：</h3><p>使用管道时，需要注意以下几种特殊的情况（假设都是阻塞I/O操作）:  </p>\n<ol>\n<li><p>所有的指向管道写端的文件描述符都关闭了（管道写端引用计数为0），有进程从管道的读端<br>读数据，那么管道中剩余的数据被读取以后，再次read会返回0，就像读到文件末尾一样。</p>\n</li>\n<li><p>如果有指向管道写端的文件描述符没有关闭（管道的写端引用计数大于0），而持有管道写端的进程<br>也没有往管道中写数据，这个时候有进程从管道中读取数据，那么管道中剩余的数据被读取后，<br>再次read会阻塞，直到管道中有数据可以读了才读取数据并返回。</p>\n</li>\n<li><p>如果所有指向管道读端的文件描述符都关闭了（管道的读端引用计数为0），这个时候有进程<br>向管道中写数据，那么该进程会收到一个信号SIGPIPE, 通常会导致进程异常终止。</p>\n</li>\n<li><p>如果有指向管道读端的文件描述符没有关闭（管道的读端引用计数大于0），而持有管道读端的进程<br>也没有从管道中读数据，这时有进程向管道中写数据，那么在管道被写满的时候再次write会阻塞，<br>直到管道中有空位置才能再次写入数据并返回。</p>\n</li>\n</ol>\n<p>总结：</p>\n<ul>\n<li><p>读管道：</p>\n<ul>\n<li>有数据，read返回实际读到的字节数。</li>\n<li>无数据：<br>  写端被全部关闭，read返回0（相当于读到文件的末尾）<br>  写端没有完全关闭，read阻塞等待</li>\n</ul>\n</li>\n<li><p>写管道：</p>\n<ul>\n<li>全部被关闭，进程异常终止（进程收到SIGPIPE信号）</li>\n<li>没有全部关闭：<br>  管道已满，write阻塞<br>  管道没有满，write将数据写入，并返回实际写入的字节数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存映射-Memory-Mapped\"><a href=\"#内存映射-Memory-Mapped\" class=\"headerlink\" title=\"内存映射 Memory-Mapped\"></a>内存映射 Memory-Mapped</h2><p>将磁盘文件的数据映射到内存， 用户通过修改内存就能修改磁盘文件</p>\n<p>使用内存映射实现进程间通信：</p>\n<ol>\n<li><p>有关系的进程（父子进程）</p>\n<ul>\n<li>还没有子进程的时候<ul>\n<li>通过唯一的父进程，先创建内存映射区</li>\n</ul>\n</li>\n<li>有了内存映射区以后，创建子进程</li>\n<li>父子进程共享创建的内存映射区</li>\n<li>匿名映射(没有文件实体)</li>\n</ul>\n</li>\n<li><p>没有关系的进程间通信</p>\n<ul>\n<li>准备一个大小不是0的磁盘文件</li>\n<li>进程1 通过磁盘文件创建内存映射区<ul>\n<li>得到一个操作这块内存的指针</li>\n</ul>\n</li>\n<li>进程2 通过磁盘文件创建内存映射区<ul>\n<li>得到一个操作这块内存的指针</li>\n</ul>\n</li>\n<li>使用内存映射区通信</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>注意：内存映射区通信，是非阻塞。</p>\n</blockquote>\n<h3 id=\"Linux-调用函数\"><a href=\"#Linux-调用函数\" class=\"headerlink\" title=\"Linux 调用函数\"></a>Linux 调用函数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> length, <span class=\"keyword\">int</span> prot, <span class=\"keyword\">int</span> flags,<span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> offset)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>功能：<br>将一个文件或者设备的数据映射到内存中</p>\n</li>\n<li><p>参数：</p>\n<ul>\n<li><p>void *addr: NULL, 由内核指定</p>\n</li>\n<li><p>length : 要映射的数据的长度，这个值不能为0。建议使用文件的长度。<br>  获取文件的长度：</p>\n<ul>\n<li>stat() </li>\n<li>lseek()</li>\n</ul>\n</li>\n<li><p>prot : 对申请的内存映射区的操作权限</p>\n<ul>\n<li>PROT_EXEC ：可执行的权限</li>\n<li>PROT_READ ：读权限</li>\n<li>PROT_WRITE ：写权限</li>\n<li>PROT_NONE ：没有权限</li>\n</ul>\n<p>  要操作映射内存，必须要有读的权限。<br>  PROT_READ、PROT_READ|PROT_WRITE</p>\n</li>\n<li><p>flags :</p>\n<ul>\n<li>MAP_SHARED : 映射区的数据会自动和磁盘文件进行同步，进程间通信，必须要设置这个选项</li>\n<li>MAP_PRIVATE ：不同步，内存映射区的数据改变了，对原来的文件不会修改，会重新创建一个新的</li>\n</ul>\n</li>\n<li><p>fd: 需要映射的那个文件的文件描述符</p>\n<ul>\n<li>通过open得到，open的是一个磁盘文件</li>\n<li>注意：文件的大小不能为0，open指定的权限不能和prot参数有冲突。<br>  prot: PROT_READ                open:只读/读写<br>  prot: PROT_READ | PROT_WRITE   open:读写</li>\n</ul>\n</li>\n<li><p>offset：偏移量，一般不用。必须指定的是4k的整数倍，0表示不便宜。</p>\n</li>\n</ul>\n</li>\n<li><p>返回值：返回创建的内存的首地址<br>  失败返回 <code>MAP_FAILED</code>，<code>(void *) -1</code></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">munmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>功能：释放内存映射</li>\n<li>参数：<ul>\n<li>addr : 要释放的内存的首地址</li>\n<li>length : 要释放的内存的大小，要和mmap函数中的length参数的值一样。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h3><ol>\n<li><p>如果对mmap的返回值(ptr)做++操作(ptr++), munmap是否能够成功?  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> * ptr = mmap(...);</span><br><span class=\"line\">ptr++;  <span class=\"comment\">//可以对其进行++操作</span></span><br><span class=\"line\">munmap(ptr, len);   <span class=\"comment\">// 错误,要保存地址</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果open时 <code>O_RDONLY</code>, mmap时prot参数指定 <code>PROT_READ | PROT_WRITE</code> 会怎样?</p>\n<p> 错误，返回MAP_FAILED<br> open()函数中的权限建议和prot参数的权限保持一致。</p>\n</li>\n<li><p>如果文件偏移量为1000会怎样?</p>\n<p> 偏移量必须是4K的整数倍，返回MAP_FAILED</p>\n</li>\n<li><p>mmap什么情况下会调用失败?</p>\n<ul>\n<li>第二个参数：length = 0</li>\n<li>第三个参数：prot<ul>\n<li>只指定了写权限</li>\n<li>prot <code>PROT_READ | PROT_WRITE</code><br>第5个参数fd 通过open函数时指定的<code> O_RDONLY / O_WRONLY</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可以open的时候O_CREAT一个新文件来创建映射区吗?</p>\n<ul>\n<li>可以的，但是创建的文件的大小如果为0的话，肯定不行</li>\n<li>可以对新的文件进行扩展<ul>\n<li>lseek()</li>\n<li>truncate()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>mmap后关闭文件描述符，对mmap映射有没有影响？</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> fd = open(<span class=\"string\">&quot;XXX&quot;</span>);</span><br><span class=\"line\">mmap(,,,,fd,<span class=\"number\">0</span>);</span><br><span class=\"line\">close(fd); </span><br></pre></td></tr></table></figure>\n<p> 映射区还存在，创建映射区的fd被关闭，没有任何影响。</p>\n</li>\n<li><p>对ptr越界操作会怎样？</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> * ptr = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">100</span>,,,,,);</span><br></pre></td></tr></table></figure>\n<p> 4K;<br> 越界操作操作的是非法的内存 -&gt; 段错误</p>\n</li>\n</ol>\n<h2 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h2><p>Linux 进程间通信的最古老的方式之一，是事件发生时对进程的通知机制，有时也称之为软件中断，<br>它是在软件层次上对中断机制的一种模拟，是一种异步通信的方式。</p>\n<p>信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断，转而处理某一个突发事件。</p>\n<p>发往进程的诸多信号，通常都是源于内核。引发内核为进程产生信号的各类事件如下：</p>\n<ul>\n<li><p>对于前台进程，用户可以通过输入特殊的终端字符来给它发送信号。比如输入Ctrl+C<br>通常会给进程发送一个中断信号。</p>\n</li>\n<li><p>硬件发生异常，即硬件检测到一个错误条件并通知内核，随即再由内核发送相应信号给<br>相关进程。比如执行一条异常的机器语言指令，诸如被 0 除，或者引用了无法访问的<br>内存区域。</p>\n</li>\n<li><p>系统状态变化，比如 alarm 定时器到期将引起 SIGALRM 信号，进程执行的 CPU<br>时间超限，或者该进程的某个子进程退出。</p>\n</li>\n<li><p>运行 kill 命令或调用 kill 函数。</p>\n</li>\n</ul>\n<p>使用信号的两个主要目的是：</p>\n<ul>\n<li><p>让进程知道已经发生了一个特定的事情。</p>\n</li>\n<li><p>强迫进程执行它自己代码中的信号处理程序。</p>\n</li>\n<li><p>信号的特点：</p>\n<ul>\n<li>简单</li>\n<li>不能携带大量信息</li>\n<li>满足某个特定条件才发送</li>\n<li>优先级比较高</li>\n</ul>\n</li>\n<li><p>查看系统定义的信号列表：kill –l</p>\n</li>\n</ul>\n<h3 id=\"信号的-5-种默认处理动作\"><a href=\"#信号的-5-种默认处理动作\" class=\"headerlink\" title=\"信号的 5 种默认处理动作\"></a>信号的 5 种默认处理动作</h3><ul>\n<li><p>查看信号的详细信息：man 7 signal</p>\n</li>\n<li><p>信号的 5 中默认处理动作</p>\n<ul>\n<li>Term 终止进程</li>\n<li>Ign 当前进程忽略掉这个信号</li>\n<li>Core 终止进程，并生成一个Core文件</li>\n<li>Stop 暂停当前进程</li>\n<li>Cont 继续执行当前被暂停的进程</li>\n</ul>\n</li>\n<li><p>信号的几种状态：</p>\n<ul>\n<li>产生</li>\n<li>未决</li>\n<li>递达</li>\n</ul>\n</li>\n<li><p>SIGKILL 和 SIGSTOP 信号不能被捕捉、阻塞或者忽略，只能执行默认动作。</p>\n</li>\n</ul>\n<h3 id=\"信号相关的函数\"><a href=\"#信号相关的函数\" class=\"headerlink\" title=\"信号相关的函数\"></a>信号相关的函数</h3><ul>\n<li>int kill(pid_t pid, int sig);</li>\n<li>int raise(int sig);</li>\n<li>void abort(void);</li>\n<li>unsigned int alarm(unsigned int seconds);</li>\n<li>int setitimer(int which, const struct itimerval *new_val, struct itimerval *old_value);</li>\n<li>sighandler_t signal(int signum, sighandler_t handler);</li>\n<li>int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);</li>\n</ul>\n<h3 id=\"信号集\"><a href=\"#信号集\" class=\"headerlink\" title=\"信号集\"></a>信号集</h3><ul>\n<li><p>许多信号相关的系统调用都需要能表示一组不同的信号，多个信号可使用一个称之为<br>信号集的数据结构来表示，其系统数据类型为 sigset_t。 </p>\n</li>\n<li><p>在 PCB 中有两个非常重要的信号集。一个称之为 “阻塞信号集” ，另一个称之为“未决信号集” 。<br>这两个信号集都是内核使用位图机制来实现的。但操作系统不允许我们直接对这两个信号集进行位操作。<br>而需自定义另外一个集合，借助信号集操作函数来对 PCB 中的这两个信号集进行修改。</p>\n</li>\n<li><p>信号的 “未决” 是一种状态，指的是从信号的产生到信号被处理前的这一段时间。</p>\n</li>\n<li><p>信号的 “阻塞” 是一个开关动作，指的是阻止信号被处理，但不是阻止信号产生。</p>\n</li>\n<li><p>信号的阻塞就是让系统暂时保留信号留待以后发送。由于另外有办法让系统忽略信号，<br>所以一般情况下信号的阻塞只是暂时的，只是为了防止信号打断敏感的操作。</p>\n</li>\n</ul>\n<h4 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h4><ul>\n<li>int sigemptyset(sigset_t *set);</li>\n<li>int sigfillset(sigset_t *set);</li>\n<li>int sigaddset(sigset_t *set, int signum);</li>\n<li>int sigdelset(sigset_t *set, int signum);</li>\n<li>int sigismember(const sigset_t *set, int signum);</li>\n<li>int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);</li>\n<li>int sigpending(sigset_t *set);</li>\n</ul>\n<h3 id=\"MAN-7-signal\"><a href=\"#MAN-7-signal\" class=\"headerlink\" title=\"MAN 7 signal\"></a>MAN 7 signal</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signal numbering <span class=\"keyword\">for</span> standard signals</span><br><span class=\"line\">      The numeric value <span class=\"keyword\">for</span> each signal is given <span class=\"keyword\">in</span> the table below.  As shown <span class=\"keyword\">in</span> the table, many</span><br><span class=\"line\">      signals  have different numeric values on different architectures.  The first numeric value</span><br><span class=\"line\">      <span class=\"keyword\">in</span> each table row shows the signal number on x86, ARM, and most  other  architectures;  the</span><br><span class=\"line\">      second  value is <span class=\"keyword\">for</span> Alpha and SPARC; the third is <span class=\"keyword\">for</span> MIPS; and the last is <span class=\"keyword\">for</span> PARISC.  A</span><br><span class=\"line\">      dash (-) denotes that a signal is absent on the corresponding architecture.</span><br><span class=\"line\"></span><br><span class=\"line\">      Signal        x86/ARM     Alpha/   MIPS   PARISC   Notes</span><br><span class=\"line\">                  most others   SPARC</span><br><span class=\"line\">      ─────────────────────────────────────────────────────────────────</span><br><span class=\"line\">      SIGHUP           1           1       1       1</span><br><span class=\"line\">      SIGINT           2           2       2       2</span><br><span class=\"line\">      SIGQUIT          3           3       3       3</span><br><span class=\"line\">      SIGILL           4           4       4       4</span><br><span class=\"line\">      SIGTRAP          5           5       5       5</span><br><span class=\"line\">      SIGABRT          6           6       6       6</span><br><span class=\"line\">      SIGIOT           6           6       6       6</span><br><span class=\"line\">      SIGBUS           7          10      10      10</span><br><span class=\"line\">      SIGEMT           -           7       7      -</span><br><span class=\"line\">      SIGFPE           8           8       8       8</span><br><span class=\"line\">      SIGKILL          9           9       9       9</span><br><span class=\"line\">      SIGUSR1         10          30      16      16</span><br><span class=\"line\">      SIGSEGV         11          11      11      11</span><br><span class=\"line\">      SIGUSR2         12          31      17      17</span><br><span class=\"line\">      SIGPIPE         13          13      13      13</span><br><span class=\"line\">      SIGALRM         14          14      14      14</span><br><span class=\"line\">      SIGTERM         15          15      15      15</span><br><span class=\"line\">      SIGSTKFLT       16          -       -        7</span><br><span class=\"line\">      SIGCHLD         17          20      18      18</span><br><span class=\"line\">      SIGCLD           -          -       18      -</span><br><span class=\"line\">      SIGCONT         18          19      25      26</span><br><span class=\"line\">      SIGSTOP         19          17      23      24</span><br><span class=\"line\">      SIGTSTP         20          18      24      25</span><br><span class=\"line\">      SIGTTIN         21          21      26      27</span><br><span class=\"line\">      SIGTTOU         22          22      27      28</span><br><span class=\"line\">      SIGURG          23          16      21      29</span><br><span class=\"line\">      SIGXCPU         24          24      30      12</span><br><span class=\"line\">      SIGXFSZ         25          25      31      30</span><br><span class=\"line\">      SIGVTALRM       26          26      28      20</span><br><span class=\"line\">      SIGPROF         27          27      29      21</span><br><span class=\"line\">      SIGWINCH        28          28      20      23</span><br><span class=\"line\">      SIGIO           29          23      22      22</span><br><span class=\"line\">      SIGPOLL                                            Same as SIGIO</span><br><span class=\"line\">      SIGPWR          30         29/-     19      19</span><br><span class=\"line\">      SIGINFO          -         29/-     -       -</span><br><span class=\"line\">      SIGLOST          -         -/29     -       -</span><br><span class=\"line\">      SIGSYS          31          12      12      31</span><br><span class=\"line\">      SIGUNUSED       31          -       -       31</span><br><span class=\"line\"></span><br><span class=\"line\">Note the following:</span><br><span class=\"line\"></span><br><span class=\"line\">      *  Where defined, SIGUNUSED is synonymous with SIGSYS.  Since glibc 2.26, SIGUNUSED  is  no</span><br><span class=\"line\">         longer defined on any architecture.</span><br><span class=\"line\"></span><br><span class=\"line\">      *  Signal 29 is SIGINFO/SIGPWR (synonyms <span class=\"keyword\">for</span> the same value) on Alpha but SIGLOST on SPARC.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"linux_system_programming","date":"2021-11-20T11:22:00.000Z","_content":"\n## 系统调用\n在深入系统调用的运作方式之前，务必关注以下几点。\n* 系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。\n\n* 系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。\n（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）\n\n* 每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空\n间之间（相互）传递的信息加以规范。\n\n从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其\n幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发\n生的顺序对这些步骤加以分析。\n1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。\n\n2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。\n通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。\n因此，外壳函数会将上述参数复制到寄存器。\n\n3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函\n数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。\n\n4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行\n系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。\n\n5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来\n处理这次中断，具体如下。\n    a）在内核栈中保存寄存器值（参见 6.5 节）。 他\n    b）审核系统调用编号的有效性。\n    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，\n    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。\n    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。\n    最后，该服务例程会将结果状态返回给 system_call()例程。\n    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。\n    e）返回至外壳函数，同时将处理器切换回用户态。\n\n6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno\n（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统\n调用是否成功。\n\n![execve](imgs/linux_system_exec_steps.png)\n\n\n## 文件I/O\n\n所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。\n文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、\n设备和普通文件。针对每个进程，文件描述符都自成一套。\n\n大多数程序都能够使用 3 种标准的文件描述符：\n\n| 描述符 | 用途       | POSIX         | stdio  |\n| ----- | --------- | ------------- | ------ |\n| 0     | 标准输入    | STDIN_FILENO  | stdin  |\n| 1     | 标准输出    | STDOUT_FILENO | stdout |\n| 2     | 标准错误    | STDERR_FILENO | stderr |\n\n> 程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用<unistd.h>\n所定义的 POSIX 标准名称。\n\n### IO 操作的主要系统调用函数\n\n#### open()\n```c\nfd = open(pathname, flags, mode)\n```\n函数打开 `pathname` 所标识的文件，并返回文件描\n述符，用以在后续函数调用中指代打开的文件。如果文件不存在，`open()`函数可以\n创建之，这取决于对位掩码参数 `flags` `的设置。flags` 参数还可指定文件的打开方式：只\n`读、只写亦或是读写方式。mode` 参数则指定了由 `open()`调用创建文件的访问权限，\n如果 `open()` 函数并未创建文件，那么可以忽略或省略 `mode` 参数。\n\n```C\n// open existing file for reading\nfd = open(\"start.up\", O_RDONLY);\nif (fd == -1)\n    printf(\"can't open\");\n\n// open new or existing file or reading and writing, truncating to zero\n// bytes; file permissions read+write for owner, nothing for all others\nfd = open(\"myfile\", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );\nif (fd == -1)\n    printf(\"can't open\");\n\nfd = open(\"w.log\", O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);\n\nif (fd == -1)\n    printf(\"can't open\");\n\n```\n\nSUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。\n可以利用该特性以特定文件描述符打开某一文件。\n\n```C\nif (close(STDIN_FILENO) == -1)\n    print(\"close\");\n\nfd = open(pathname, O_RDONLY);\nif (fd == -1)\n    print(\"open\");\n\n```\n\n\n#### read()\n```C\nnumread = read(fd, buffer, count)\n```\n调用从 `fd` 所指代的打开文件中读取至多 `count` 字节的数据，并存储到 `buffer` 中。\n`read()`调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 `EOF` 时），则返回值为 0。\n\n#### write()\n```C\nnumwritten = write(fd, buffer, count)\n```\n调用从 `buffer` 中读取多达 `count` 字节的数据写入由\n`fd` 所指代的已打开文件中。`write()`调用的返回值为实际写入文件中的字节数，且有可\n能小于 `count。`\n\n#### close()\n```C\nstatus = close(fd)\n```\n在所有输入/输出操作完成后，调用 `close()`，释放文件描述符 `fd` 以及与之相关的内核资源。\n\n\n> 使用IO 小例子(src/fileio/copy)： \n> ```C\n>$ clang copy.c error_functions.c get_num.c -o copy\n>$ ./copy newfile oldfile\n> ```\n\n\n\n# Others (补充)\n\n## libc & glibc\n`libc` 是 `ANSI C` 的函数库, `glibc` 是 `GNU C` 的函数库。\n\n\n`ANSI C` 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： \n\n* `<ctype.h>`：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；\n* `<errno.h>`：定义用来报告错误条件的宏；\n* `<float.h>`：包含系统的浮点数大小限制；\n* `<math.h>`：包含数学库函数的函数原型；\n* `<stddef.h>`：包含执行某些计算 C 所用的常见的函数定义；\n* `<stdio.h>`：包含标准输入输出库函数的函数原型，以及他们所用的信息；\n* `<stdlib.h>`：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；\n* `<string.h>`：包含字符串处理函数的函数原型；\n* `<time.h>`：包含时间和日期操作的函数原型和类型；\n* `<stdarg.h>`：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；\n* `<signal.h>`：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；\n* `<setjmp.h>`：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；\n* `<locale.h>`：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。\n 地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；\n* `<assert.h>`：包含宏和信息，用于进行诊断，帮助程序调试。\n\n`glibc`是linux下面c标准库的实现，即`GNU C Library`。\n`glibc`本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库`Linux libc`逐渐不再被维护。\nLinux下面的标准c库不仅有这一个，如`uclibc`、`klibc`，以及上面被提到的`Linux libc`，但是glibc无疑是用得最多的。\n`glibc`在/lib目录下的.so文件为libc.so.6。\n\n\n","source":"_posts/linux-system-programming.md","raw":"---\ntitle: linux_system_programming\ndate: 2021-11-20 19:22:00\ntags:\n    - Linux\n    - C\ncategories:\n    - Linux编程\n---\n\n## 系统调用\n在深入系统调用的运作方式之前，务必关注以下几点。\n* 系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。\n\n* 系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。\n（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）\n\n* 每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空\n间之间（相互）传递的信息加以规范。\n\n从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其\n幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发\n生的顺序对这些步骤加以分析。\n1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。\n\n2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。\n通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。\n因此，外壳函数会将上述参数复制到寄存器。\n\n3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函\n数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。\n\n4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行\n系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。\n\n5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来\n处理这次中断，具体如下。\n    a）在内核栈中保存寄存器值（参见 6.5 节）。 他\n    b）审核系统调用编号的有效性。\n    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，\n    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。\n    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。\n    最后，该服务例程会将结果状态返回给 system_call()例程。\n    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。\n    e）返回至外壳函数，同时将处理器切换回用户态。\n\n6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno\n（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统\n调用是否成功。\n\n![execve](imgs/linux_system_exec_steps.png)\n\n\n## 文件I/O\n\n所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。\n文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、\n设备和普通文件。针对每个进程，文件描述符都自成一套。\n\n大多数程序都能够使用 3 种标准的文件描述符：\n\n| 描述符 | 用途       | POSIX         | stdio  |\n| ----- | --------- | ------------- | ------ |\n| 0     | 标准输入    | STDIN_FILENO  | stdin  |\n| 1     | 标准输出    | STDOUT_FILENO | stdout |\n| 2     | 标准错误    | STDERR_FILENO | stderr |\n\n> 程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用<unistd.h>\n所定义的 POSIX 标准名称。\n\n### IO 操作的主要系统调用函数\n\n#### open()\n```c\nfd = open(pathname, flags, mode)\n```\n函数打开 `pathname` 所标识的文件，并返回文件描\n述符，用以在后续函数调用中指代打开的文件。如果文件不存在，`open()`函数可以\n创建之，这取决于对位掩码参数 `flags` `的设置。flags` 参数还可指定文件的打开方式：只\n`读、只写亦或是读写方式。mode` 参数则指定了由 `open()`调用创建文件的访问权限，\n如果 `open()` 函数并未创建文件，那么可以忽略或省略 `mode` 参数。\n\n```C\n// open existing file for reading\nfd = open(\"start.up\", O_RDONLY);\nif (fd == -1)\n    printf(\"can't open\");\n\n// open new or existing file or reading and writing, truncating to zero\n// bytes; file permissions read+write for owner, nothing for all others\nfd = open(\"myfile\", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );\nif (fd == -1)\n    printf(\"can't open\");\n\nfd = open(\"w.log\", O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);\n\nif (fd == -1)\n    printf(\"can't open\");\n\n```\n\nSUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。\n可以利用该特性以特定文件描述符打开某一文件。\n\n```C\nif (close(STDIN_FILENO) == -1)\n    print(\"close\");\n\nfd = open(pathname, O_RDONLY);\nif (fd == -1)\n    print(\"open\");\n\n```\n\n\n#### read()\n```C\nnumread = read(fd, buffer, count)\n```\n调用从 `fd` 所指代的打开文件中读取至多 `count` 字节的数据，并存储到 `buffer` 中。\n`read()`调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 `EOF` 时），则返回值为 0。\n\n#### write()\n```C\nnumwritten = write(fd, buffer, count)\n```\n调用从 `buffer` 中读取多达 `count` 字节的数据写入由\n`fd` 所指代的已打开文件中。`write()`调用的返回值为实际写入文件中的字节数，且有可\n能小于 `count。`\n\n#### close()\n```C\nstatus = close(fd)\n```\n在所有输入/输出操作完成后，调用 `close()`，释放文件描述符 `fd` 以及与之相关的内核资源。\n\n\n> 使用IO 小例子(src/fileio/copy)： \n> ```C\n>$ clang copy.c error_functions.c get_num.c -o copy\n>$ ./copy newfile oldfile\n> ```\n\n\n\n# Others (补充)\n\n## libc & glibc\n`libc` 是 `ANSI C` 的函数库, `glibc` 是 `GNU C` 的函数库。\n\n\n`ANSI C` 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： \n\n* `<ctype.h>`：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；\n* `<errno.h>`：定义用来报告错误条件的宏；\n* `<float.h>`：包含系统的浮点数大小限制；\n* `<math.h>`：包含数学库函数的函数原型；\n* `<stddef.h>`：包含执行某些计算 C 所用的常见的函数定义；\n* `<stdio.h>`：包含标准输入输出库函数的函数原型，以及他们所用的信息；\n* `<stdlib.h>`：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；\n* `<string.h>`：包含字符串处理函数的函数原型；\n* `<time.h>`：包含时间和日期操作的函数原型和类型；\n* `<stdarg.h>`：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；\n* `<signal.h>`：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；\n* `<setjmp.h>`：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；\n* `<locale.h>`：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。\n 地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；\n* `<assert.h>`：包含宏和信息，用于进行诊断，帮助程序调试。\n\n`glibc`是linux下面c标准库的实现，即`GNU C Library`。\n`glibc`本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库`Linux libc`逐渐不再被维护。\nLinux下面的标准c库不仅有这一个，如`uclibc`、`klibc`，以及上面被提到的`Linux libc`，但是glibc无疑是用得最多的。\n`glibc`在/lib目录下的.so文件为libc.so.6。\n\n\n","slug":"linux-system-programming","published":1,"updated":"2021-11-20T13:57:50.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfq000a079ygnqt4kll","content":"<h2 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h2><p>在深入系统调用的运作方式之前，务必关注以下几点。</p>\n<ul>\n<li><p>系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。</p>\n</li>\n<li><p>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。<br>（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）</p>\n</li>\n<li><p>每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空<br>间之间（相互）传递的信息加以规范。</p>\n</li>\n</ul>\n<p>从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其<br>幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发<br>生的顺序对这些步骤加以分析。<br>1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。</p>\n<p>2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。<br>通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。<br>因此，外壳函数会将上述参数复制到寄存器。</p>\n<p>3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函<br>数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。</p>\n<p>4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行<br>系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。</p>\n<p>5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来<br>处理这次中断，具体如下。<br>    a）在内核栈中保存寄存器值（参见 6.5 节）。 他<br>    b）审核系统调用编号的有效性。<br>    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，<br>    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。<br>    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。<br>    最后，该服务例程会将结果状态返回给 system_call()例程。<br>    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。<br>    e）返回至外壳函数，同时将处理器切换回用户态。</p>\n<p>6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno<br>（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统<br>调用是否成功。</p>\n<p><img src=\"imgs/linux_system_exec_steps.png\" alt=\"execve\"></p>\n<h2 id=\"文件I-O\"><a href=\"#文件I-O\" class=\"headerlink\" title=\"文件I/O\"></a>文件I/O</h2><p>所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。<br>文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、<br>设备和普通文件。针对每个进程，文件描述符都自成一套。</p>\n<p>大多数程序都能够使用 3 种标准的文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>用途</th>\n<th>POSIX</th>\n<th>stdio</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>标准输入</td>\n<td>STDIN_FILENO</td>\n<td>stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标准输出</td>\n<td>STDOUT_FILENO</td>\n<td>stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td>标准错误</td>\n<td>STDERR_FILENO</td>\n<td>stderr</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用&lt;unistd.h&gt;<br>所定义的 POSIX 标准名称。</p>\n</blockquote>\n<h3 id=\"IO-操作的主要系统调用函数\"><a href=\"#IO-操作的主要系统调用函数\" class=\"headerlink\" title=\"IO 操作的主要系统调用函数\"></a>IO 操作的主要系统调用函数</h3><h4 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open()\"></a>open()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(pathname, flags, mode)</span><br></pre></td></tr></table></figure>\n<p>函数打开 <code>pathname</code> 所标识的文件，并返回文件描<br>述符，用以在后续函数调用中指代打开的文件。如果文件不存在，<code>open()</code>函数可以<br>创建之，这取决于对位掩码参数 <code>flags</code> <code>的设置。flags</code> 参数还可指定文件的打开方式：只<br><code>读、只写亦或是读写方式。mode</code> 参数则指定了由 <code>open()</code>调用创建文件的访问权限，<br>如果 <code>open()</code> 函数并未创建文件，那么可以忽略或省略 <code>mode</code> 参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open existing file for reading</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;start.up&quot;</span>, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open new or existing file or reading and writing, truncating to zero</span></span><br><span class=\"line\"><span class=\"comment\">// bytes; file permissions read+write for owner, nothing for all others</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;myfile&quot;</span>, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;w.log&quot;</span>, O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。<br>可以利用该特性以特定文件描述符打开某一文件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (close(STDIN_FILENO) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(pathname, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numread = read(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>fd</code> 所指代的打开文件中读取至多 <code>count</code> 字节的数据，并存储到 <code>buffer</code> 中。<br><code>read()</code>调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 <code>EOF</code> 时），则返回值为 0。</p>\n<h4 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numwritten = write(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>buffer</code> 中读取多达 <code>count</code> 字节的数据写入由<br><code>fd</code> 所指代的已打开文件中。<code>write()</code>调用的返回值为实际写入文件中的字节数，且有可<br>能小于 <code>count。</code></p>\n<h4 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close()\"></a>close()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = close(fd)</span><br></pre></td></tr></table></figure>\n<p>在所有输入/输出操作完成后，调用 <code>close()</code>，释放文件描述符 <code>fd</code> 以及与之相关的内核资源。</p>\n<blockquote>\n<p>使用IO 小例子(src/fileio/copy)： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ clang copy.c error_functions.c get_num.c -o copy</span><br><span class=\"line\">&gt;$ ./copy newfile oldfile</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Others-补充\"><a href=\"#Others-补充\" class=\"headerlink\" title=\"Others (补充)\"></a>Others (补充)</h1><h2 id=\"libc-amp-glibc\"><a href=\"#libc-amp-glibc\" class=\"headerlink\" title=\"libc &amp; glibc\"></a>libc &amp; glibc</h2><p><code>libc</code> 是 <code>ANSI C</code> 的函数库, <code>glibc</code> 是 <code>GNU C</code> 的函数库。</p>\n<p><code>ANSI C</code> 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>\n<ul>\n<li><code>&lt;ctype.h&gt;</code>：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</li>\n<li><code>&lt;errno.h&gt;</code>：定义用来报告错误条件的宏；</li>\n<li><code>&lt;float.h&gt;</code>：包含系统的浮点数大小限制；</li>\n<li><code>&lt;math.h&gt;</code>：包含数学库函数的函数原型；</li>\n<li><code>&lt;stddef.h&gt;</code>：包含执行某些计算 C 所用的常见的函数定义；</li>\n<li><code>&lt;stdio.h&gt;</code>：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>\n<li><code>&lt;stdlib.h&gt;</code>：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>\n<li><code>&lt;string.h&gt;</code>：包含字符串处理函数的函数原型；</li>\n<li><code>&lt;time.h&gt;</code>：包含时间和日期操作的函数原型和类型；</li>\n<li><code>&lt;stdarg.h&gt;</code>：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>\n<li><code>&lt;signal.h&gt;</code>：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>\n<li><code>&lt;setjmp.h&gt;</code>：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>\n<li><code>&lt;locale.h&gt;</code>：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。<br>地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>\n<li><code>&lt;assert.h&gt;</code>：包含宏和信息，用于进行诊断，帮助程序调试。</li>\n</ul>\n<p><code>glibc</code>是linux下面c标准库的实现，即<code>GNU C Library</code>。<br><code>glibc</code>本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库<code>Linux libc</code>逐渐不再被维护。<br>Linux下面的标准c库不仅有这一个，如<code>uclibc</code>、<code>klibc</code>，以及上面被提到的<code>Linux libc</code>，但是glibc无疑是用得最多的。<br><code>glibc</code>在/lib目录下的.so文件为libc.so.6。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h2><p>在深入系统调用的运作方式之前，务必关注以下几点。</p>\n<ul>\n<li><p>系统调用将处理器从用户态切换到核心态，以便 CPU 访问受到保护的内核内存。</p>\n</li>\n<li><p>系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识。<br>（程序通过名称来标识系统调用，对这一编号方案往往一无所知。）</p>\n</li>\n<li><p>每个系统调用可辅之以一套参数，对用户空间（亦即进程的虚拟地址空间）与内核空<br>间之间（相互）传递的信息加以规范。</p>\n</li>\n</ul>\n<p>从编程角度来看，系统调用与 C 语言函数的调用很相似。然而，在执行系统调用时，其<br>幕后会历经诸多步骤。为说明这点，下面以一个具体的硬件平台—x86-32 为例，按事件发<br>生的顺序对这些步骤加以分析。<br>1． 应用程序通过调用 C 语言函数库中的外壳（wrapper）函数，来发起系统调用。</p>\n<p>2． 对系统调用中断处理例程（稍后介绍）来说，外壳函数必须保证所有的系统调用参数可用。<br>通过堆栈，这些参数传入外壳函数，但内核却希望将这些参数置入特定寄存器。<br>因此，外壳函数会将上述参数复制到寄存器。</p>\n<p>3． 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函<br>数会将系统调用编号复制到一个特殊的 CPU 寄存器（%eax）中。</p>\n<p>4． 外壳函数执行一条中断机器指令（int 0x80），引发处理器从用户态切换到核心态，并执行<br>系统中断 0x80 (十进制数 128)的中断矢量所指向的代码。</p>\n<p>5． 为响应中断 0x80，内核会调用 system_call()例程（位于汇编文件 arch/i386/entry.S 中）来<br>处理这次中断，具体如下。<br>    a）在内核栈中保存寄存器值（参见 6.5 节）。 他<br>    b）审核系统调用编号的有效性。<br>    c）以系统调用编号对存放所有调用服务例程的列表（内核变量 sys_call_table）进行索引，<br>    发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性。<br>    例如，会检查地址指向用户空间的内存位置是否有效。随后，该服务例程会执行必要的任务，这可能涉及对特定参数中指定地址处的值进行修改，以及在用户内存和内核内存间传递数据（比如，在 I/O 操作中）。<br>    最后，该服务例程会将结果状态返回给 system_call()例程。<br>    d）从内核栈中恢复各寄存器值，并将系统调用返回值置于栈中。<br>    e）返回至外壳函数，同时将处理器切换回用户态。</p>\n<p>6． 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量 errno<br>（参见 3.4 节）。然后，外壳函数会返回到调用程序，并同时返回一个整型值，以表明系统<br>调用是否成功。</p>\n<p><img src=\"imgs/linux_system_exec_steps.png\" alt=\"execve\"></p>\n<h2 id=\"文件I-O\"><a href=\"#文件I-O\" class=\"headerlink\" title=\"文件I/O\"></a>文件I/O</h2><p>所有执行 I/O 操作的系统调用都以文件描述符，一个非负整数（通常是小整数），来指代打开的文件。<br>文件描述符用以表示所有类型的已打开文件，包括管道（pipe）、FIFO、socket、终端、<br>设备和普通文件。针对每个进程，文件描述符都自成一套。</p>\n<p>大多数程序都能够使用 3 种标准的文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>用途</th>\n<th>POSIX</th>\n<th>stdio</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>标准输入</td>\n<td>STDIN_FILENO</td>\n<td>stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标准输出</td>\n<td>STDOUT_FILENO</td>\n<td>stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td>标准错误</td>\n<td>STDERR_FILENO</td>\n<td>stderr</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>程序中指代这些文件描述符时，可以使用数字（0、1、2）表示，但最好是采用&lt;unistd.h&gt;<br>所定义的 POSIX 标准名称。</p>\n</blockquote>\n<h3 id=\"IO-操作的主要系统调用函数\"><a href=\"#IO-操作的主要系统调用函数\" class=\"headerlink\" title=\"IO 操作的主要系统调用函数\"></a>IO 操作的主要系统调用函数</h3><h4 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open()\"></a>open()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fd = open(pathname, flags, mode)</span><br></pre></td></tr></table></figure>\n<p>函数打开 <code>pathname</code> 所标识的文件，并返回文件描<br>述符，用以在后续函数调用中指代打开的文件。如果文件不存在，<code>open()</code>函数可以<br>创建之，这取决于对位掩码参数 <code>flags</code> <code>的设置。flags</code> 参数还可指定文件的打开方式：只<br><code>读、只写亦或是读写方式。mode</code> 参数则指定了由 <code>open()</code>调用创建文件的访问权限，<br>如果 <code>open()</code> 函数并未创建文件，那么可以忽略或省略 <code>mode</code> 参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open existing file for reading</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;start.up&quot;</span>, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// open new or existing file or reading and writing, truncating to zero</span></span><br><span class=\"line\"><span class=\"comment\">// bytes; file permissions read+write for owner, nothing for all others</span></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;myfile&quot;</span>, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(<span class=\"string\">&quot;w.log&quot;</span>, O_WRONLY|O_CREAT|O_TRUNC|O_APPEND, S_IRUSR|S_IWUSR);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;can&#x27;t open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SUSv3 规定，如果调用 open()成功，必须保证其返回值为进程未用文件描述符中数值最小者。<br>可以利用该特性以特定文件描述符打开某一文件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (close(STDIN_FILENO) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;close&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(pathname, O_RDONLY);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numread = read(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>fd</code> 所指代的打开文件中读取至多 <code>count</code> 字节的数据，并存储到 <code>buffer</code> 中。<br><code>read()</code>调用的返回值为实际读取到的字节数。如果再无字节可读（例如：读到文件结尾符 <code>EOF</code> 时），则返回值为 0。</p>\n<h4 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numwritten = write(fd, buffer, count)</span><br></pre></td></tr></table></figure>\n<p>调用从 <code>buffer</code> 中读取多达 <code>count</code> 字节的数据写入由<br><code>fd</code> 所指代的已打开文件中。<code>write()</code>调用的返回值为实际写入文件中的字节数，且有可<br>能小于 <code>count。</code></p>\n<h4 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close()\"></a>close()</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = close(fd)</span><br></pre></td></tr></table></figure>\n<p>在所有输入/输出操作完成后，调用 <code>close()</code>，释放文件描述符 <code>fd</code> 以及与之相关的内核资源。</p>\n<blockquote>\n<p>使用IO 小例子(src/fileio/copy)： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ clang copy.c error_functions.c get_num.c -o copy</span><br><span class=\"line\">&gt;$ ./copy newfile oldfile</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Others-补充\"><a href=\"#Others-补充\" class=\"headerlink\" title=\"Others (补充)\"></a>Others (补充)</h1><h2 id=\"libc-amp-glibc\"><a href=\"#libc-amp-glibc\" class=\"headerlink\" title=\"libc &amp; glibc\"></a>libc &amp; glibc</h2><p><code>libc</code> 是 <code>ANSI C</code> 的函数库, <code>glibc</code> 是 <code>GNU C</code> 的函数库。</p>\n<p><code>ANSI C</code> 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>\n<ul>\n<li><code>&lt;ctype.h&gt;</code>：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</li>\n<li><code>&lt;errno.h&gt;</code>：定义用来报告错误条件的宏；</li>\n<li><code>&lt;float.h&gt;</code>：包含系统的浮点数大小限制；</li>\n<li><code>&lt;math.h&gt;</code>：包含数学库函数的函数原型；</li>\n<li><code>&lt;stddef.h&gt;</code>：包含执行某些计算 C 所用的常见的函数定义；</li>\n<li><code>&lt;stdio.h&gt;</code>：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>\n<li><code>&lt;stdlib.h&gt;</code>：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>\n<li><code>&lt;string.h&gt;</code>：包含字符串处理函数的函数原型；</li>\n<li><code>&lt;time.h&gt;</code>：包含时间和日期操作的函数原型和类型；</li>\n<li><code>&lt;stdarg.h&gt;</code>：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>\n<li><code>&lt;signal.h&gt;</code>：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>\n<li><code>&lt;setjmp.h&gt;</code>：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>\n<li><code>&lt;locale.h&gt;</code>：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。<br>地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>\n<li><code>&lt;assert.h&gt;</code>：包含宏和信息，用于进行诊断，帮助程序调试。</li>\n</ul>\n<p><code>glibc</code>是linux下面c标准库的实现，即<code>GNU C Library</code>。<br><code>glibc</code>本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库<code>Linux libc</code>逐渐不再被维护。<br>Linux下面的标准c库不仅有这一个，如<code>uclibc</code>、<code>klibc</code>，以及上面被提到的<code>Linux libc</code>，但是glibc无疑是用得最多的。<br><code>glibc</code>在/lib目录下的.so文件为libc.so.6。</p>\n"},{"title":"manjaro_swap","date":"2021-12-16T09:04:07.000Z","_content":"\n\n> 起因： 编译AOSP源码， 提示最小内存为 16gb\n\n\n本机环境：\n```bash\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     Uptime: 3h 52m\n                                  Shell: bash 5.1.12\n ████████  ████████  ████████     DE: GNOME 41.2\n ████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]\n                                  Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n ██████████████████  ████████     GPU: AMD/ATI\n ████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO\n ██████████████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     WM Theme: \n ██████████████████  ████████     Disk: 383G / 946G (43%)\n ██████████████████  ████████     RAM: 3558MiB / 15448MiB\n ████████  ████████  ████████     Packages: 1375\n                                  OS: Manjaro 21.2.0 Qonos\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     WM: Mutter\n```\n\n## 配置及安装相应软件\n```bash\nsudo yay -Syyu\n\nyay -S lineageos-devel\n\n```\n\n## 建立交换文件\n\n使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:\n```bash\nsudo dd if=/dev/zero of=/swapfile bs=1G count=20 status=progress\n```\n\n为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：\n\n```bash\nsudo chmod 600 /swapfile\n```\n\n创建正确大小的文件后，将其格式化用来作为交换文件：\n\n```bash\nsudo mkswap /swapfile\n```\n\n启用交换文件：\n\n```bash\nsudo swapon /swapfile\n```\n\n最后，编辑 /etc/fstab，在为交换文件添加一个条目：\n\n```bash\n/swapfile none swap defaults 0 0\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/manjaro-swap.md","raw":"---\ntitle: manjaro_swap\ndate: 2021-12-16 17:04:07\ntags:\n    - Linux\ncategories:\n    - Linux编程\n---\n\n\n> 起因： 编译AOSP源码， 提示最小内存为 16gb\n\n\n本机环境：\n```bash\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     young@dev\n ████████  ████████  ████████     Uptime: 3h 52m\n                                  Shell: bash 5.1.12\n ████████  ████████  ████████     DE: GNOME 41.2\n ████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]\n                                  Icon Theme: Papirus-Adapta-Maia\n ████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz\n ██████████████████  ████████     GPU: AMD/ATI\n ████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO\n ██████████████████  ████████     Resolution: 2560x1440\n ████████  ████████  ████████     WM Theme: \n ██████████████████  ████████     Disk: 383G / 946G (43%)\n ██████████████████  ████████     RAM: 3558MiB / 15448MiB\n ████████  ████████  ████████     Packages: 1375\n                                  OS: Manjaro 21.2.0 Qonos\n ████████  ████████  ████████     Font: Noto Sans 12\n ████████  ████████  ████████     WM: Mutter\n```\n\n## 配置及安装相应软件\n```bash\nsudo yay -Syyu\n\nyay -S lineageos-devel\n\n```\n\n## 建立交换文件\n\n使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:\n```bash\nsudo dd if=/dev/zero of=/swapfile bs=1G count=20 status=progress\n```\n\n为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：\n\n```bash\nsudo chmod 600 /swapfile\n```\n\n创建正确大小的文件后，将其格式化用来作为交换文件：\n\n```bash\nsudo mkswap /swapfile\n```\n\n启用交换文件：\n\n```bash\nsudo swapon /swapfile\n```\n\n最后，编辑 /etc/fstab，在为交换文件添加一个条目：\n\n```bash\n/swapfile none swap defaults 0 0\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"manjaro-swap","published":1,"updated":"2021-12-26T09:31:08.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfs000c079y81imf34f","content":"<blockquote>\n<p>起因： 编译AOSP源码， 提示最小内存为 16gb</p>\n</blockquote>\n<p>本机环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     Uptime: 3h 52m</span><br><span class=\"line\">                                 Shell: bash 5.1.12</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.2</span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]</span><br><span class=\"line\">                                 Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">██████████████████  ████████     GPU: AMD/ATI</span><br><span class=\"line\">████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">██████████████████  ████████     Disk: 383G / 946G (43%)</span><br><span class=\"line\">██████████████████  ████████     RAM: 3558MiB / 15448MiB</span><br><span class=\"line\">████████  ████████  ████████     Packages: 1375</span><br><span class=\"line\">                                 OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置及安装相应软件\"><a href=\"#配置及安装相应软件\" class=\"headerlink\" title=\"配置及安装相应软件\"></a>配置及安装相应软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yay -Syyu</span><br><span class=\"line\"></span><br><span class=\"line\">yay -S lineageos-devel</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立交换文件\"><a href=\"#建立交换文件\" class=\"headerlink\" title=\"建立交换文件\"></a>建立交换文件</h2><p>使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=/swapfile bs=1G count=20 status=progress</span><br></pre></td></tr></table></figure>\n\n<p>为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>创建正确大小的文件后，将其格式化用来作为交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>启用交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>最后，编辑 /etc/fstab，在为交换文件添加一个条目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/swapfile none swap defaults 0 0</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>起因： 编译AOSP源码， 提示最小内存为 16gb</p>\n</blockquote>\n<p>本机环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     young@dev</span><br><span class=\"line\">████████  ████████  ████████     Uptime: 3h 52m</span><br><span class=\"line\">                                 Shell: bash 5.1.12</span><br><span class=\"line\">████████  ████████  ████████     DE: GNOME 41.2</span><br><span class=\"line\">████████  ████████  ████████     GTK Theme: Matcha-light-sea [GTK2/3]</span><br><span class=\"line\">                                 Icon Theme: Papirus-Adapta-Maia</span><br><span class=\"line\">████████  ████████  ████████     CPU: AMD Ryzen 7 5700G with Radeon Graphics @ 16x 3.8GHz</span><br><span class=\"line\">██████████████████  ████████     GPU: AMD/ATI</span><br><span class=\"line\">████████  ████████  ████████     Kernel: x86_64 Linux 5.15.7-1-MANJARO</span><br><span class=\"line\">██████████████████  ████████     Resolution: 2560x1440</span><br><span class=\"line\">████████  ████████  ████████     WM Theme: </span><br><span class=\"line\">██████████████████  ████████     Disk: 383G / 946G (43%)</span><br><span class=\"line\">██████████████████  ████████     RAM: 3558MiB / 15448MiB</span><br><span class=\"line\">████████  ████████  ████████     Packages: 1375</span><br><span class=\"line\">                                 OS: Manjaro 21.2.0 Qonos</span><br><span class=\"line\">████████  ████████  ████████     Font: Noto Sans 12</span><br><span class=\"line\">████████  ████████  ████████     WM: Mutter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置及安装相应软件\"><a href=\"#配置及安装相应软件\" class=\"headerlink\" title=\"配置及安装相应软件\"></a>配置及安装相应软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yay -Syyu</span><br><span class=\"line\"></span><br><span class=\"line\">yay -S lineageos-devel</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立交换文件\"><a href=\"#建立交换文件\" class=\"headerlink\" title=\"建立交换文件\"></a>建立交换文件</h2><p>使用dd去创建一个由你自己指定大小的交换文件。例如，创建一个 20 GiB 的交换文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dd <span class=\"keyword\">if</span>=/dev/zero of=/swapfile bs=1G count=20 status=progress</span><br></pre></td></tr></table></figure>\n\n<p>为交换文件设置权限（交换文件全局可读是一个巨大的本地漏洞）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>创建正确大小的文件后，将其格式化用来作为交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>启用交换文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapon /swapfile</span><br></pre></td></tr></table></figure>\n\n<p>最后，编辑 /etc/fstab，在为交换文件添加一个条目：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/swapfile none swap defaults 0 0</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"osi: phy&mac","date":"2021-12-23T10:10:54.000Z","_content":"\n# BLock\n![pic](https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg)\n\n\n## PHY & MAC\n从上到下：\n| | |\n| -- | -- |\n| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |\n| MAC  |包含MAC子层和LLC子层。|\n| MII/SMI |\tMedia Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|\n| PHY\t| 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|\n| I/F\t| 如RJ45。|\n\n\n当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。\n可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。\n\n## 固件与驱动：\n固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。\n驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。\n\n## Hardware Arch\n\n```mermaid\ngraph TD;\n    DMA-->CPU/MCU;\n    DMA-->MAC;\n    CPU/MCU-->DMA;\n\n    CPU/MCU-->MAC;\n    MAC-->CPU/MCU;\n    MAC-->DMA\n    MAC-->PHY\n    PHY-->MAC\n```\n","source":"_posts/osi-phy-mac.md","raw":"---\ntitle: 'osi: phy&mac'\ndate: 2021-12-23 18:10:54\ntags:\n    - osi\n    - phy\n    - mac\n---\n\n# BLock\n![pic](https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg)\n\n\n## PHY & MAC\n从上到下：\n| | |\n| -- | -- |\n| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |\n| MAC  |包含MAC子层和LLC子层。|\n| MII/SMI |\tMedia Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|\n| PHY\t| 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|\n| I/F\t| 如RJ45。|\n\n\n当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。\n可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。\n\n## 固件与驱动：\n固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。\n驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。\n\n## Hardware Arch\n\n```mermaid\ngraph TD;\n    DMA-->CPU/MCU;\n    DMA-->MAC;\n    CPU/MCU-->DMA;\n\n    CPU/MCU-->MAC;\n    MAC-->CPU/MCU;\n    MAC-->DMA\n    MAC-->PHY\n    PHY-->MAC\n```\n","slug":"osi-phy-mac","published":1,"updated":"2021-12-26T10:11:44.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfu000f079y8fl60fei","content":"<h1 id=\"BLock\"><a href=\"#BLock\" class=\"headerlink\" title=\"BLock\"></a>BLock</h1><p><img src=\"https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg\" alt=\"pic\"></p>\n<h2 id=\"PHY-amp-MAC\"><a href=\"#PHY-amp-MAC\" class=\"headerlink\" title=\"PHY &amp; MAC\"></a>PHY &amp; MAC</h2><p>从上到下：<br>| | |<br>| – | – |<br>| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |<br>| MAC  |包含MAC子层和LLC子层。|<br>| MII/SMI |    Media Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|<br>| PHY    | 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|<br>| I/F    | 如RJ45。|</p>\n<p>当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。<br>可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。</p>\n<h2 id=\"固件与驱动：\"><a href=\"#固件与驱动：\" class=\"headerlink\" title=\"固件与驱动：\"></a>固件与驱动：</h2><p>固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。<br>驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。</p>\n<h2 id=\"Hardware-Arch\"><a href=\"#Hardware-Arch\" class=\"headerlink\" title=\"Hardware Arch\"></a>Hardware Arch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    DMA--&gt;CPU/MCU;</span><br><span class=\"line\">    DMA--&gt;MAC;</span><br><span class=\"line\">    CPU/MCU--&gt;DMA;</span><br><span class=\"line\"></span><br><span class=\"line\">    CPU/MCU--&gt;MAC;</span><br><span class=\"line\">    MAC--&gt;CPU/MCU;</span><br><span class=\"line\">    MAC--&gt;DMA</span><br><span class=\"line\">    MAC--&gt;PHY</span><br><span class=\"line\">    PHY--&gt;MAC</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BLock\"><a href=\"#BLock\" class=\"headerlink\" title=\"BLock\"></a>BLock</h1><p><img src=\"https://blog.zeerd.com/public/2021/01/19/ieee802.3.96.1.svg\" alt=\"pic\"></p>\n<h2 id=\"PHY-amp-MAC\"><a href=\"#PHY-amp-MAC\" class=\"headerlink\" title=\"PHY &amp; MAC\"></a>PHY &amp; MAC</h2><p>从上到下：<br>| | |<br>| – | – |<br>| I/F  |比如PCI总线。负责将IP数据包（或其他协议）传递给MAC层。  |<br>| MAC  |包含MAC子层和LLC子层。|<br>| MII/SMI |    Media Independed Interfade，介质独立界面。连接MAC和PHY。MAC对PHY的工作状态的确定和对PHY的控制则是使用SMI（Serial Management Interface）界面通过读写PHY的寄存器来完成的。|<br>| PHY    | 以太网的物理层又包括MII/GMII（介质独立接口）子层、PCS（物理编码子层）、PMA（物理介质附加）子层、PMD（物理介质相关）子层、MDI子层。 对PHY来说，没有帧的概念，都是二进制数据。|<br>| I/F    | 如RJ45。|</p>\n<p>当然，肯定还有其他的，什么稳压的、滤波的，就不写在这里了。<br>可以看到，基本上涉及算法的东西应该都在MAC里面。毕竟到了PHY就不能区分协议了。</p>\n<h2 id=\"固件与驱动：\"><a href=\"#固件与驱动：\" class=\"headerlink\" title=\"固件与驱动：\"></a>固件与驱动：</h2><p>固件：运行在设备自身的微控制器内部的代码。原则上，应该将尽可能多的功能做入到固件中。只有固件没有驱动才是最完美的。<br>驱动：那些操作系统相关的、无法跨系统共通的、必须独立出来的代码留在驱动中。</p>\n<h2 id=\"Hardware-Arch\"><a href=\"#Hardware-Arch\" class=\"headerlink\" title=\"Hardware Arch\"></a>Hardware Arch</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    DMA--&gt;CPU/MCU;</span><br><span class=\"line\">    DMA--&gt;MAC;</span><br><span class=\"line\">    CPU/MCU--&gt;DMA;</span><br><span class=\"line\"></span><br><span class=\"line\">    CPU/MCU--&gt;MAC;</span><br><span class=\"line\">    MAC--&gt;CPU/MCU;</span><br><span class=\"line\">    MAC--&gt;DMA</span><br><span class=\"line\">    MAC--&gt;PHY</span><br><span class=\"line\">    PHY--&gt;MAC</span><br></pre></td></tr></table></figure>\n"},{"title":"service-discovery","date":"2021-12-26T09:46:21.000Z","_content":"\n# 服务发现\n\n## 基本流程\n\n* Register, 服务启动时候进行注册\n\n* Query, 查询已注册服务信息\n\n* Healthy Check,确认服务状态是否健康\n\n整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。\n\n## 注册\n\n一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。\n\n常见的注册模式\n\n### 自主注册\n\n自主注册模式，由服务(client)本身来维护。\n每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。\n在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，\n就可以将这个服务状态判断为异常，进而移除该服务的注册记录。\n\n### 第三方注册 \n这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。\n因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，\n但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。\n所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。\n\n在实际应用中, 需要根据需求合理搭配服务, 和管理机制.\n\n\n## 发现\n\n发现机制主要包括三种：\n\n* 服务提供者：\n服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。\n\n* 服务消费者：\n从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。\n\n* 注册中心：\n服务提供者和服务消费者之间的一个桥梁\n\n服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。\n当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。\n\n\n### 常用的发现模式\n\n#### 客户端发现模式\n\n首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:\n\n* 1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)\n\n* 2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)\n\n* 3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问\n\n#### 服务端发现模式。\n* 1 服务提供者向注册中心进行服务注册 \n* 2 注册中心提供负载均衡功能， \n* 3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用\n\n> 本质区别在于，客户端是否保存服务列表信息\n\n### 实现方案\n\n#### file\n\n以文件的形式实现服务发现，这是一个比较简单的方案。\n其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，\n获取服务提供者的信息，根据一定的策略，进行访问。\n\n需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，\n以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，\n首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，\n如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。\n\n文件方式实现服务发现，其特点显而易见：\n\n* 优点：\n实现简单，去中心化\n\n* 缺点：\n需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象\n\n> SOME/IP 就是通过文件的方式实现.\n\n#### 其他第三方实现:\n\n* zookeeper\n* redis\n* etcd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/service-discovery.md","raw":"---\ntitle: service-discovery\ndate: 2021-12-26 17:46:21\ntags:\n    - someip-sd\n    - service discovery\ncategories:\n    - concepts\n---\n\n# 服务发现\n\n## 基本流程\n\n* Register, 服务启动时候进行注册\n\n* Query, 查询已注册服务信息\n\n* Healthy Check,确认服务状态是否健康\n\n整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。\n\n## 注册\n\n一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。\n\n常见的注册模式\n\n### 自主注册\n\n自主注册模式，由服务(client)本身来维护。\n每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。\n在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，\n就可以将这个服务状态判断为异常，进而移除该服务的注册记录。\n\n### 第三方注册 \n这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。\n因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，\n但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。\n所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。\n\n在实际应用中, 需要根据需求合理搭配服务, 和管理机制.\n\n\n## 发现\n\n发现机制主要包括三种：\n\n* 服务提供者：\n服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。\n\n* 服务消费者：\n从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。\n\n* 注册中心：\n服务提供者和服务消费者之间的一个桥梁\n\n服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。\n当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。\n\n\n### 常用的发现模式\n\n#### 客户端发现模式\n\n首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:\n\n* 1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)\n\n* 2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)\n\n* 3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问\n\n#### 服务端发现模式。\n* 1 服务提供者向注册中心进行服务注册 \n* 2 注册中心提供负载均衡功能， \n* 3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用\n\n> 本质区别在于，客户端是否保存服务列表信息\n\n### 实现方案\n\n#### file\n\n以文件的形式实现服务发现，这是一个比较简单的方案。\n其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，\n获取服务提供者的信息，根据一定的策略，进行访问。\n\n需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，\n以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，\n首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，\n如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。\n\n文件方式实现服务发现，其特点显而易见：\n\n* 优点：\n实现简单，去中心化\n\n* 缺点：\n需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象\n\n> SOME/IP 就是通过文件的方式实现.\n\n#### 其他第三方实现:\n\n* zookeeper\n* redis\n* etcd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"service-discovery","published":1,"updated":"2021-12-26T09:53:24.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfx000i079yhnzyek0j","content":"<h1 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><ul>\n<li><p>Register, 服务启动时候进行注册</p>\n</li>\n<li><p>Query, 查询已注册服务信息</p>\n</li>\n<li><p>Healthy Check,确认服务状态是否健康</p>\n</li>\n</ul>\n<p>整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。</p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p>一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。</p>\n<p>常见的注册模式</p>\n<h3 id=\"自主注册\"><a href=\"#自主注册\" class=\"headerlink\" title=\"自主注册\"></a>自主注册</h3><p>自主注册模式，由服务(client)本身来维护。<br>每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。<br>在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，<br>就可以将这个服务状态判断为异常，进而移除该服务的注册记录。</p>\n<h3 id=\"第三方注册\"><a href=\"#第三方注册\" class=\"headerlink\" title=\"第三方注册\"></a>第三方注册</h3><p>这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。<br>因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，<br>但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。<br>所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。</p>\n<p>在实际应用中, 需要根据需求合理搭配服务, 和管理机制.</p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a>发现</h2><p>发现机制主要包括三种：</p>\n<ul>\n<li><p>服务提供者：<br>服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。</p>\n</li>\n<li><p>服务消费者：<br>从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。</p>\n</li>\n<li><p>注册中心：<br>服务提供者和服务消费者之间的一个桥梁</p>\n</li>\n</ul>\n<p>服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。<br>当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。</p>\n<h3 id=\"常用的发现模式\"><a href=\"#常用的发现模式\" class=\"headerlink\" title=\"常用的发现模式\"></a>常用的发现模式</h3><h4 id=\"客户端发现模式\"><a href=\"#客户端发现模式\" class=\"headerlink\" title=\"客户端发现模式\"></a>客户端发现模式</h4><p>首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:</p>\n<ul>\n<li><p>1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)</p>\n</li>\n<li><p>2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)</p>\n</li>\n<li><p>3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问</p>\n</li>\n</ul>\n<h4 id=\"服务端发现模式。\"><a href=\"#服务端发现模式。\" class=\"headerlink\" title=\"服务端发现模式。\"></a>服务端发现模式。</h4><ul>\n<li>1 服务提供者向注册中心进行服务注册 </li>\n<li>2 注册中心提供负载均衡功能， </li>\n<li>3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用</li>\n</ul>\n<blockquote>\n<p>本质区别在于，客户端是否保存服务列表信息</p>\n</blockquote>\n<h3 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h3><h4 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h4><p>以文件的形式实现服务发现，这是一个比较简单的方案。<br>其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，<br>获取服务提供者的信息，根据一定的策略，进行访问。</p>\n<p>需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，<br>以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，<br>首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，<br>如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。</p>\n<p>文件方式实现服务发现，其特点显而易见：</p>\n<ul>\n<li><p>优点：<br>实现简单，去中心化</p>\n</li>\n<li><p>缺点：<br>需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象</p>\n</li>\n</ul>\n<blockquote>\n<p>SOME/IP 就是通过文件的方式实现.</p>\n</blockquote>\n<h4 id=\"其他第三方实现\"><a href=\"#其他第三方实现\" class=\"headerlink\" title=\"其他第三方实现:\"></a>其他第三方实现:</h4><ul>\n<li>zookeeper</li>\n<li>redis</li>\n<li>etcd</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><ul>\n<li><p>Register, 服务启动时候进行注册</p>\n</li>\n<li><p>Query, 查询已注册服务信息</p>\n</li>\n<li><p>Healthy Check,确认服务状态是否健康</p>\n</li>\n</ul>\n<p>整个过程很简单。大致就是在服务启动的时候，先去进行注册，并且定时反馈本身功能是否正常。由服务发现机制统一负责维护一份正确或者可用的服务清单。因此，服务本身需要能随时接受查下，反馈调用方服务所要的信息。</p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p>一整套服务发现机制顺利运行，需要维护一份可用的服务列表。包含服务注册与移除功能，以及健康检查。</p>\n<p>常见的注册模式</p>\n<h3 id=\"自主注册\"><a href=\"#自主注册\" class=\"headerlink\" title=\"自主注册\"></a>自主注册</h3><p>自主注册模式，由服务(client)本身来维护。<br>每个服务启动后，需要到统一的服务注册中心进行注册登记，服务正常终止后，也可以到注册中心移除自身的注册记录。<br>在服务执行过程中，通过不断的发送心跳信息，来通知注册中心，本服务运行正常。注册中心只要超过一定的时间没有收到心跳消息，<br>就可以将这个服务状态判断为异常，进而移除该服务的注册记录。</p>\n<h3 id=\"第三方注册\"><a href=\"#第三方注册\" class=\"headerlink\" title=\"第三方注册\"></a>第三方注册</h3><p>这个模式与自主注册相比，区别是健康检查的动作不是由服务本身(client)来负责，而是由第三方服务来确认。<br>因为有时候服务自身发送心跳信息的方式并不精确，因为可能服务本身已经存在故障，某些接口功能不可用，<br>但仍然可以不断的发送心跳信息，导致注册中心没有发觉该服务已经异常，从而源源不断的将流量打到已经异常的服务上来。<br>所以, 确认服务是否正常运转的健康检查机制，就不能只依靠心跳，必须通过其它第三方的验证，不断的从外部来确认服务本身的健康状态。</p>\n<p>在实际应用中, 需要根据需求合理搭配服务, 和管理机制.</p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a>发现</h2><p>发现机制主要包括三种：</p>\n<ul>\n<li><p>服务提供者：<br>服务启动时将服务信息注册到注册中心，服务退出时将注册中心的服务信息删除掉。</p>\n</li>\n<li><p>服务消费者：<br>从服务注册表获取服务提供者的最新网络位置等服务信息，维护与服务提供者之间的通信。</p>\n</li>\n<li><p>注册中心：<br>服务提供者和服务消费者之间的一个桥梁</p>\n</li>\n</ul>\n<p>服务发现机制的关键部分是注册中心。注册中心提供管理和查询服务注册信息的API。<br>当服务提供者的实例发生变更时（新增/删除服务），服务注册表更新最新的状态列表，并将其最新列表以适当的方式通知给服务消费者。</p>\n<h3 id=\"常用的发现模式\"><a href=\"#常用的发现模式\" class=\"headerlink\" title=\"常用的发现模式\"></a>常用的发现模式</h3><h4 id=\"客户端发现模式\"><a href=\"#客户端发现模式\" class=\"headerlink\" title=\"客户端发现模式\"></a>客户端发现模式</h4><p>首先要进行的是到服务注册中心获取服务列表，然后再根据调用端本地的负载均衡策略，进行服务调用:</p>\n<ul>\n<li><p>1.服务提供者向注册中心进行注册，提交自己的相关信息 (register)</p>\n</li>\n<li><p>2.服务消费者定期从注册中心获取服务提供者列表 (keep alive)</p>\n</li>\n<li><p>3.服务消费者通过自身的负载均衡算法，在服务提供者列表里面选择一个合适的服务提供者，进行访问</p>\n</li>\n</ul>\n<h4 id=\"服务端发现模式。\"><a href=\"#服务端发现模式。\" class=\"headerlink\" title=\"服务端发现模式。\"></a>服务端发现模式。</h4><ul>\n<li>1 服务提供者向注册中心进行服务注册 </li>\n<li>2 注册中心提供负载均衡功能， </li>\n<li>3 服务消费者去请求注册中心，由注册中心根据服务提供列表的健康情况，选择合适的服务提供者供服务消费者调用</li>\n</ul>\n<blockquote>\n<p>本质区别在于，客户端是否保存服务列表信息</p>\n</blockquote>\n<h3 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h3><h4 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h4><p>以文件的形式实现服务发现，这是一个比较简单的方案。<br>其基本原理就是将服务提供者的信息(ip:port)写入文件中，服务消费者加载该文件，<br>获取服务提供者的信息，根据一定的策略，进行访问。</p>\n<p>需要注意的是，因为以文件形式提供服务发现，服务消费者要定期的去访问该文件，<br>以获得最新的服务提供者列表，这里有个小优化点，就是可以有个线程定时去做该任务，<br>首先去用该文件的最后一次修改时间跟服务上一次读取文件时候存储的修改时间做对比，<br>如果时间一致，表明文件未做修改，那么就不需要重新做加载了，反之，重新加载文件。</p>\n<p>文件方式实现服务发现，其特点显而易见：</p>\n<ul>\n<li><p>优点：<br>实现简单，去中心化</p>\n</li>\n<li><p>缺点：<br>需要服务消费者去定时操作，如果某一个文件推送失败，那么就会造成异常现象</p>\n</li>\n</ul>\n<blockquote>\n<p>SOME/IP 就是通过文件的方式实现.</p>\n</blockquote>\n<h4 id=\"其他第三方实现\"><a href=\"#其他第三方实现\" class=\"headerlink\" title=\"其他第三方实现:\"></a>其他第三方实现:</h4><ul>\n<li>zookeeper</li>\n<li>redis</li>\n<li>etcd</li>\n</ul>\n"},{"title":"someip 00： vsomeip","date":"2021-12-20T09:58:18.000Z","_content":"\n# vSOMEIP 00 :  quick review\n\n* refrence: https://blog.zeerd.com/vsomeip-1st/\n\n## Introduction\nvsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。\n\nvsomeip提供了两个动态库：\n* SOME/IP协议的实现库libvsomeip.so\n* 用于服务发现的库libvsomeip-sd.so。\n\nvsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。\nvsomeip的实现基于boost.asio的异步IO库。\nvsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。\n一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，\n也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。\n\nvsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。\n\n\n## Code Block\n\nvSomeIP的代码主要分成如下四大部分\n\n* daemon\n\n* implementation\n\n* interface\n    - runtime\n    - application\n    - messgae\n    - payload\n\n* tool & examples\n\n### Interface\n\n#### Runtime\n这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:\n\n- application\n- message\n- request\n- reponse\n- notification\n- payload\n\n#### Application\n这是最核心的一个部分。它在每个客户端都存在且仅存在一份。\nApplication可以通过Runtime的接口来实例化。\n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n##### Plugin\n\nvSomeIP允许Application加载一到多个Plugin。\n当Application的状态发生变化时，这个变化会被通知到Plugin。\n在通知的时候会附带Application的名称。用于Plugin进行区别对待。\n\nApplication的状态有三种，分别为：\n* Initialized\n* Started\n* Stopped\n\n#### Message\n无论是Request、Response还是Notification，本质上都是一种Message。\n\n从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。\n\nMessage类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。\n所以，它还提供了一些列方法来设置或者读取详细的消息头信息。\n这一点可以参考SOME/IP的 协议 文档。\n\n#### Payload\n\nMessage的主体。也就是排除消息头之后剩下的部分。\n\n\n## Implementation\n针对Interface的实装。 \n\n### Endpoints\n每个具有vSomeIP功能的进程都是一个Endpoint。\nEndpoint分成分成六大类：\n\n- local-client\n- udp-client\n- tcp-client\n- local-server\n- udp-server\n- tcp-server\n\n\n### Service Discovery\n\n#### init\n\n```mermaid\ngraph TD;\n    service_discovery_impl == init -.- \n    parse_confguration -.->\n    service_discovery_imple;\n\n```\n\n#### start\n```mermaid\ngraph TD;\n\nservice_discovery_impl\n == start \n -.-> create_service_discovery_endpoint \n -.-> create_server_endpoint \n == join_sd_multicast\n--> endpoint\n\n```\n\n### Routing\n\n每个系统中只能有一个vSomeIP服务被配置成Routing。\n\n如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。\n\n\n#### Init\n\n![](../imgs/vsomeip_source_routing_init.png)\n\n#### Start\n![](../imgs/vsomeip_source_routing_start.png)\n\n\n\n## Daemon\n\ndaemon的主体就是一个vsomeip::application\n\n![](../imgs/vsomeip_source_daemon.png)\n\n\nApplication创建了一个routing_manager_impl的实例。\n如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。\n\n\n\n## Tools & Examples\n\n一些简易的Application。用于进行一些消息发送接收的测试工作。\n","source":"_posts/someip-00：-vsomeip.md","raw":"---\ntitle: someip 00： vsomeip\ndate: 2021-12-20 17:58:18\ntags:\n    - someip\n    - vSOMEIP\n---\n\n# vSOMEIP 00 :  quick review\n\n* refrence: https://blog.zeerd.com/vsomeip-1st/\n\n## Introduction\nvsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。\n\nvsomeip提供了两个动态库：\n* SOME/IP协议的实现库libvsomeip.so\n* 用于服务发现的库libvsomeip-sd.so。\n\nvsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。\nvsomeip的实现基于boost.asio的异步IO库。\nvsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。\n一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，\n也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。\n\nvsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。\n\n\n## Code Block\n\nvSomeIP的代码主要分成如下四大部分\n\n* daemon\n\n* implementation\n\n* interface\n    - runtime\n    - application\n    - messgae\n    - payload\n\n* tool & examples\n\n### Interface\n\n#### Runtime\n这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:\n\n- application\n- message\n- request\n- reponse\n- notification\n- payload\n\n#### Application\n这是最核心的一个部分。它在每个客户端都存在且仅存在一份。\nApplication可以通过Runtime的接口来实例化。\n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n##### Plugin\n\nvSomeIP允许Application加载一到多个Plugin。\n当Application的状态发生变化时，这个变化会被通知到Plugin。\n在通知的时候会附带Application的名称。用于Plugin进行区别对待。\n\nApplication的状态有三种，分别为：\n* Initialized\n* Started\n* Stopped\n\n#### Message\n无论是Request、Response还是Notification，本质上都是一种Message。\n\n从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。\n\nMessage类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。\n所以，它还提供了一些列方法来设置或者读取详细的消息头信息。\n这一点可以参考SOME/IP的 协议 文档。\n\n#### Payload\n\nMessage的主体。也就是排除消息头之后剩下的部分。\n\n\n## Implementation\n针对Interface的实装。 \n\n### Endpoints\n每个具有vSomeIP功能的进程都是一个Endpoint。\nEndpoint分成分成六大类：\n\n- local-client\n- udp-client\n- tcp-client\n- local-server\n- udp-server\n- tcp-server\n\n\n### Service Discovery\n\n#### init\n\n```mermaid\ngraph TD;\n    service_discovery_impl == init -.- \n    parse_confguration -.->\n    service_discovery_imple;\n\n```\n\n#### start\n```mermaid\ngraph TD;\n\nservice_discovery_impl\n == start \n -.-> create_service_discovery_endpoint \n -.-> create_server_endpoint \n == join_sd_multicast\n--> endpoint\n\n```\n\n### Routing\n\n每个系统中只能有一个vSomeIP服务被配置成Routing。\n\n如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。\n\n\n#### Init\n\n![](../imgs/vsomeip_source_routing_init.png)\n\n#### Start\n![](../imgs/vsomeip_source_routing_start.png)\n\n\n\n## Daemon\n\ndaemon的主体就是一个vsomeip::application\n\n![](../imgs/vsomeip_source_daemon.png)\n\n\nApplication创建了一个routing_manager_impl的实例。\n如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。\n\n\n\n## Tools & Examples\n\n一些简易的Application。用于进行一些消息发送接收的测试工作。\n","slug":"someip-00：-vsomeip","published":1,"updated":"2021-12-26T10:04:57.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wfy000k079yexkd63py","content":"<h1 id=\"vSOMEIP-00-quick-review\"><a href=\"#vSOMEIP-00-quick-review\" class=\"headerlink\" title=\"vSOMEIP 00 :  quick review\"></a>vSOMEIP 00 :  quick review</h1><ul>\n<li>refrence: <a href=\"https://blog.zeerd.com/vsomeip-1st/\">https://blog.zeerd.com/vsomeip-1st/</a></li>\n</ul>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>vsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。</p>\n<p>vsomeip提供了两个动态库：</p>\n<ul>\n<li>SOME/IP协议的实现库libvsomeip.so</li>\n<li>用于服务发现的库libvsomeip-sd.so。</li>\n</ul>\n<p>vsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。<br>vsomeip的实现基于boost.asio的异步IO库。<br>vsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。<br>一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，<br>也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。</p>\n<p>vsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。</p>\n<h2 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h2><p>vSomeIP的代码主要分成如下四大部分</p>\n<ul>\n<li><p>daemon</p>\n</li>\n<li><p>implementation</p>\n</li>\n<li><p>interface</p>\n<ul>\n<li>runtime</li>\n<li>application</li>\n<li>messgae</li>\n<li>payload</li>\n</ul>\n</li>\n<li><p>tool &amp; examples</p>\n</li>\n</ul>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><h4 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h4><p>这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:</p>\n<ul>\n<li>application</li>\n<li>message</li>\n<li>request</li>\n<li>reponse</li>\n<li>notification</li>\n<li>payload</li>\n</ul>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>这是最核心的一个部分。它在每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<h5 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h5><p>vSomeIP允许Application加载一到多个Plugin。<br>当Application的状态发生变化时，这个变化会被通知到Plugin。<br>在通知的时候会附带Application的名称。用于Plugin进行区别对待。</p>\n<p>Application的状态有三种，分别为：</p>\n<ul>\n<li>Initialized</li>\n<li>Started</li>\n<li>Stopped</li>\n</ul>\n<h4 id=\"Message\"><a href=\"#Message\" class=\"headerlink\" title=\"Message\"></a>Message</h4><p>无论是Request、Response还是Notification，本质上都是一种Message。</p>\n<p>从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。</p>\n<p>Message类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。<br>所以，它还提供了一些列方法来设置或者读取详细的消息头信息。<br>这一点可以参考SOME/IP的 协议 文档。</p>\n<h4 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h4><p>Message的主体。也就是排除消息头之后剩下的部分。</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>针对Interface的实装。 </p>\n<h3 id=\"Endpoints\"><a href=\"#Endpoints\" class=\"headerlink\" title=\"Endpoints\"></a>Endpoints</h3><p>每个具有vSomeIP功能的进程都是一个Endpoint。<br>Endpoint分成分成六大类：</p>\n<ul>\n<li>local-client</li>\n<li>udp-client</li>\n<li>tcp-client</li>\n<li>local-server</li>\n<li>udp-server</li>\n<li>tcp-server</li>\n</ul>\n<h3 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h3><h4 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    service_discovery_impl == init -.- </span><br><span class=\"line\">    parse_confguration -.-&gt;</span><br><span class=\"line\">    service_discovery_imple;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\"></span><br><span class=\"line\">service_discovery_impl</span><br><span class=\"line\"> == start </span><br><span class=\"line\"> -.-&gt; create_service_discovery_endpoint </span><br><span class=\"line\"> -.-&gt; create_server_endpoint </span><br><span class=\"line\"> == join_sd_multicast</span><br><span class=\"line\">--&gt; endpoint</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h3><p>每个系统中只能有一个vSomeIP服务被配置成Routing。</p>\n<p>如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。</p>\n<h4 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h4><p><img src=\"../imgs/vsomeip_source_routing_init.png\"></p>\n<h4 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h4><p><img src=\"../imgs/vsomeip_source_routing_start.png\"></p>\n<h2 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h2><p>daemon的主体就是一个vsomeip::application</p>\n<p><img src=\"../imgs/vsomeip_source_daemon.png\"></p>\n<p>Application创建了一个routing_manager_impl的实例。<br>如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。</p>\n<h2 id=\"Tools-amp-Examples\"><a href=\"#Tools-amp-Examples\" class=\"headerlink\" title=\"Tools &amp; Examples\"></a>Tools &amp; Examples</h2><p>一些简易的Application。用于进行一些消息发送接收的测试工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vSOMEIP-00-quick-review\"><a href=\"#vSOMEIP-00-quick-review\" class=\"headerlink\" title=\"vSOMEIP 00 :  quick review\"></a>vSOMEIP 00 :  quick review</h1><ul>\n<li>refrence: <a href=\"https://blog.zeerd.com/vsomeip-1st/\">https://blog.zeerd.com/vsomeip-1st/</a></li>\n</ul>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>vsomeip 是GENIVI项目中的一个SOME/IP开源实现，基于Mozilla Public Liense v2.0协议开源，由BMW贡献。</p>\n<p>vsomeip提供了两个动态库：</p>\n<ul>\n<li>SOME/IP协议的实现库libvsomeip.so</li>\n<li>用于服务发现的库libvsomeip-sd.so。</li>\n</ul>\n<p>vsomeip除了支持设备之间的SOME/IP通讯，也支持设备本地的进程间通讯，本地通讯通过unix socket完成。<br>vsomeip的实现基于boost.asio的异步IO库。<br>vsomeip应用通过一个Routing Manager与其他设备进行通讯: Routing Manager统一负责服务发现以及外部通讯socket的管理。<br>一个设备上的多个vsomeip应用共用一个Routing Manager，默认第一个启动的vsomeip应用负责启动Routing Manager，<br>也可以通过配置指定，其他应用通过proxy与Routing Manage进行通讯。</p>\n<p>vsomeip应用可以通过json文件来进行配置，配置项包含自身IP，应用名字，负责启动Routing Manager的应用，应用日志，服务发现的广播地址，广播间隔等。</p>\n<h2 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h2><p>vSomeIP的代码主要分成如下四大部分</p>\n<ul>\n<li><p>daemon</p>\n</li>\n<li><p>implementation</p>\n</li>\n<li><p>interface</p>\n<ul>\n<li>runtime</li>\n<li>application</li>\n<li>messgae</li>\n<li>payload</li>\n</ul>\n</li>\n<li><p>tool &amp; examples</p>\n</li>\n</ul>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><h4 id=\"Runtime\"><a href=\"#Runtime\" class=\"headerlink\" title=\"Runtime\"></a>Runtime</h4><p>这个类用于管理（主要是创建）其他所有公共资源和获取runtime属性。公共资源包括:</p>\n<ul>\n<li>application</li>\n<li>message</li>\n<li>request</li>\n<li>reponse</li>\n<li>notification</li>\n<li>payload</li>\n</ul>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>这是最核心的一个部分。它在每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<h5 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h5><p>vSomeIP允许Application加载一到多个Plugin。<br>当Application的状态发生变化时，这个变化会被通知到Plugin。<br>在通知的时候会附带Application的名称。用于Plugin进行区别对待。</p>\n<p>Application的状态有三种，分别为：</p>\n<ul>\n<li>Initialized</li>\n<li>Started</li>\n<li>Stopped</li>\n</ul>\n<h4 id=\"Message\"><a href=\"#Message\" class=\"headerlink\" title=\"Message\"></a>Message</h4><p>无论是Request、Response还是Notification，本质上都是一种Message。</p>\n<p>从某种意义上来说，Message可以去分成两类，分别是通用Message和服务发现相关的Message。</p>\n<p>Message类提供了编串和解串功能，用于进行数据通讯，本质上他封装了SOME/IP的消息头。<br>所以，它还提供了一些列方法来设置或者读取详细的消息头信息。<br>这一点可以参考SOME/IP的 协议 文档。</p>\n<h4 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h4><p>Message的主体。也就是排除消息头之后剩下的部分。</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>针对Interface的实装。 </p>\n<h3 id=\"Endpoints\"><a href=\"#Endpoints\" class=\"headerlink\" title=\"Endpoints\"></a>Endpoints</h3><p>每个具有vSomeIP功能的进程都是一个Endpoint。<br>Endpoint分成分成六大类：</p>\n<ul>\n<li>local-client</li>\n<li>udp-client</li>\n<li>tcp-client</li>\n<li>local-server</li>\n<li>udp-server</li>\n<li>tcp-server</li>\n</ul>\n<h3 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h3><h4 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    service_discovery_impl == init -.- </span><br><span class=\"line\">    parse_confguration -.-&gt;</span><br><span class=\"line\">    service_discovery_imple;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\"></span><br><span class=\"line\">service_discovery_impl</span><br><span class=\"line\"> == start </span><br><span class=\"line\"> -.-&gt; create_service_discovery_endpoint </span><br><span class=\"line\"> -.-&gt; create_server_endpoint </span><br><span class=\"line\"> == join_sd_multicast</span><br><span class=\"line\">--&gt; endpoint</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h3><p>每个系统中只能有一个vSomeIP服务被配置成Routing。</p>\n<p>如果没有特别的设定，那么系统中被运行的第一个具备vSomeIP功能的程序会被作为Routing Manager。</p>\n<h4 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h4><p><img src=\"../imgs/vsomeip_source_routing_init.png\"></p>\n<h4 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h4><p><img src=\"../imgs/vsomeip_source_routing_start.png\"></p>\n<h2 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h2><p>daemon的主体就是一个vsomeip::application</p>\n<p><img src=\"../imgs/vsomeip_source_daemon.png\"></p>\n<p>Application创建了一个routing_manager_impl的实例。<br>如果这不是Daemon，而是一个通常的Application，那么他会转而创建routing_manager_proxy的实例，并与找到的Routing Manager建立连接。</p>\n<h2 id=\"Tools-amp-Examples\"><a href=\"#Tools-amp-Examples\" class=\"headerlink\" title=\"Tools &amp; Examples\"></a>Tools &amp; Examples</h2><p>一些简易的Application。用于进行一些消息发送接收的测试工作。</p>\n"},{"title":"someip-01: code","date":"2021-12-21T10:07:15.000Z","_content":"\n# vSOMEIP 01:  source code\n\nsource code reading\n\n## Start from CMakeLists.txt\n\n### Dependencies\n\n* C++11, gcc > 5.2\n* Boost > 1.55\n\n### Configuration\n\n#### DCMAKE_INSTALL_PREFIX\n安装位置\n```bash\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n```\n\n#### DBASE_PATH\n创建local sockets 位置, 默认为 `/tmp/vsomeip*`\n\n```bash\ncmake -DBASE_PATH=<YOUR BASE PATH> ..\n```\n\n#### DUNICAST_ADDRESS\n组播 address\n\n```bash\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n```\n\n\n#### DDIAGNOSIS_ADDRESS\n诊断 address\n\n默认为`0x01`\n\n```bash\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n```\n\n#### DDEFAULT_CONFIGURATION_FOLDER\n配置文件目录\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n```\n\n默认为 `/etc/vsomeip`\n\n#### DDEFAULT_CONFIGURATION_FILE\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n```\n\n默认为 `/etc/vsomeip.json`\n\n#### DENABLE_SIGNAL_HANDLING\n\n开启 signal handling\n\n```bash\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n```\n\n#### DROUTING_READY_MESSAGE\n\n自定义 完成 ip routing 后的通知消息\n\n```bash\ncmake -DROUTING_READY_MESSAGE=<YOUR MESSAGE> ..\n```\n\n#### VSOMEIP_APPLICATION_NAME\n\n通过环境变量 定义启动的程序名字\n\n```bash\nexport VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\\nexport VSOMEIP_CONFIGURATION=my_settings.json \\\n./my_vsomeip_application\n```\n\n\n#### json 配置\n\n* unicast\n\n    The IP address of the host system.\n\n* netmask\n\n    The netmask to specify the subnet of the host system.\n\n* device\n\n    If specified, IP endpoints will be bound to this device.\n\n\n* diagnosis\n\n    The diagnosis address (byte) that will be used to build client identifiers. The\n    diagnosis address is assigned to the most significant byte in all client\n    identifiers if not specified otherwise (for example through a predefined client\n    ID).\n\n* diagnosis_mask\n\n    The diagnosis mask (2 byte) is used to control the maximum amount of allowed\n    concurrent vsomeip clients on an ECU and the start value of the client IDs.\n\n    The default value is `0xFF00` meaning the most significant byte of the client ID \n    is reserved for the diagnosis address and \n    the client IDs will start with the diagnosis address as specified.\n\n    The maximum number of clients is 255 as the Hamming weight of the inverted mask\n    is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID\n    range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.\n\n* network\n\n    Network identifier used to support multiple routing managers on one host. This\n    setting changes the name of the shared memory segment in `/dev/shm` and the name\n    of the unix domain sockets in `/tmp/`. Defaults to `vsomeip` meaning the shared\n    memory will be named `/dev/shm/vsomeip` and the unix domain sockets will be\n    named `/tmp/vsomeip-$CLIENTID`\n\n* __logging__\n\n* level\n    - trace\n    - debug\n    - info\n    - warning\n    - error\n    - fatal\n\n    6个等级\n    \n\n\n* console\n    - true\n    - false\n\n    log 输出到console的开启/关闭\n\n* file\n    - enable\n        - true\n        - false\n    - path\n\n    log 输出到console的开启/关闭  \n    path: The absolute path of the log file\n\n* memory_log_interval  \n    Configures interval in seconds in which the routing manager logs its used\n    memory. Setting a value greater than zero enables the logging.\n\n* status_log_interval\n    Configures interval in seconds in which the routing manager logs its internal\n    status.\n    Setting a value greater than zero enables the logging.\n\n\n* __Tracing__\n\n    - enable\n\n    - sd_enable\n\n    - channels\n        - name\n        - id\n\n* __Applications__\n\n    - name\n    - id\n    - max_dispatchers\n    - max_dispatch_time\n    - threads\n    - io_thread_nice\n    - request_debounce_time\n\n\n\n\n\n\n\n\n\n### Source Code Arch\n```bash\n├── config\n├── documentation\n├── examples\n│   ├── hello_world\n│   └── routingmanagerd\n├── implementation ---> 具体的代码实现逻辑\n│   ├── compat     ---> vSOMEIP 兼容\n│   │   ├── message\n│   │   │   ├── include\n│   │   │   └── src\n│   │   └── runtime\n│   │       ├── include\n│   │       └── src\n│   ├── configuration   ---> 配置\n│   │   ├── include\n│   │   └── src\n│   ├── e2e_protection\n│   ├── endpoints       ---> 具有vSOMEIP功能的进程\n│   │   ├── include\n│   │   └── src\n│   ├── helper          ---> boost版本兼容\n│   │   ├── 1.55\n│   │   ├── 1.66\n│   │   ├── 1.70\n│   │   └── 1.74\n│   ├── logger\n│   │   ├── include\n│   │   └── src\n│   ├── message\n│   │   ├── include\n│   │   └── src\n│   ├── plugin\n│   │   ├── include\n│   │   └── src\n│   ├── routing      ---> 每个系统中只能有一个vSomeIP服务被配置成Routing\n│   │   ├── include\n│   │   └── src\n│   ├── runtime       ---> 管理公共资源和获取runtime属性\n│   │   ├── include\n│   │   └── src\n│   ├── security\n│   │   ├── include\n│   │   └── src\n│   ├── service_discovery\n│   │   ├── include\n│   │   └── src\n│   ├── tracing\n│   │   ├── include\n│   │   └── src\n│   └── utility\n│       ├── include\n│       └── src\n├── interface\n│   ├── compat\n│   │   └── vsomeip\n│   │       ├── internal\n│   │       └── plugins\n│   └── vsomeip\n│       ├── internal\n│       └── plugins\n├── test\n└── tools\n```\n\n* Configuration lib\n    - implementation\n        - configuration\n\n* Base (Core) lib\n    - implementation\n        - __endpoingts__\n        - __message__\n        - __routing__\n        - __runtime__\n        - __service_discovery__\n\n\n","source":"_posts/someip-01-code.md","raw":"---\ntitle: 'someip-01: code'\ndate: 2021-12-21 18:07:15\ntags:\n    - someip\n    - vSOMEIP\n---\n\n# vSOMEIP 01:  source code\n\nsource code reading\n\n## Start from CMakeLists.txt\n\n### Dependencies\n\n* C++11, gcc > 5.2\n* Boost > 1.55\n\n### Configuration\n\n#### DCMAKE_INSTALL_PREFIX\n安装位置\n```bash\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n```\n\n#### DBASE_PATH\n创建local sockets 位置, 默认为 `/tmp/vsomeip*`\n\n```bash\ncmake -DBASE_PATH=<YOUR BASE PATH> ..\n```\n\n#### DUNICAST_ADDRESS\n组播 address\n\n```bash\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n```\n\n\n#### DDIAGNOSIS_ADDRESS\n诊断 address\n\n默认为`0x01`\n\n```bash\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n```\n\n#### DDEFAULT_CONFIGURATION_FOLDER\n配置文件目录\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n```\n\n默认为 `/etc/vsomeip`\n\n#### DDEFAULT_CONFIGURATION_FILE\n\n```bash\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n```\n\n默认为 `/etc/vsomeip.json`\n\n#### DENABLE_SIGNAL_HANDLING\n\n开启 signal handling\n\n```bash\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n```\n\n#### DROUTING_READY_MESSAGE\n\n自定义 完成 ip routing 后的通知消息\n\n```bash\ncmake -DROUTING_READY_MESSAGE=<YOUR MESSAGE> ..\n```\n\n#### VSOMEIP_APPLICATION_NAME\n\n通过环境变量 定义启动的程序名字\n\n```bash\nexport VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\\nexport VSOMEIP_CONFIGURATION=my_settings.json \\\n./my_vsomeip_application\n```\n\n\n#### json 配置\n\n* unicast\n\n    The IP address of the host system.\n\n* netmask\n\n    The netmask to specify the subnet of the host system.\n\n* device\n\n    If specified, IP endpoints will be bound to this device.\n\n\n* diagnosis\n\n    The diagnosis address (byte) that will be used to build client identifiers. The\n    diagnosis address is assigned to the most significant byte in all client\n    identifiers if not specified otherwise (for example through a predefined client\n    ID).\n\n* diagnosis_mask\n\n    The diagnosis mask (2 byte) is used to control the maximum amount of allowed\n    concurrent vsomeip clients on an ECU and the start value of the client IDs.\n\n    The default value is `0xFF00` meaning the most significant byte of the client ID \n    is reserved for the diagnosis address and \n    the client IDs will start with the diagnosis address as specified.\n\n    The maximum number of clients is 255 as the Hamming weight of the inverted mask\n    is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID\n    range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.\n\n* network\n\n    Network identifier used to support multiple routing managers on one host. This\n    setting changes the name of the shared memory segment in `/dev/shm` and the name\n    of the unix domain sockets in `/tmp/`. Defaults to `vsomeip` meaning the shared\n    memory will be named `/dev/shm/vsomeip` and the unix domain sockets will be\n    named `/tmp/vsomeip-$CLIENTID`\n\n* __logging__\n\n* level\n    - trace\n    - debug\n    - info\n    - warning\n    - error\n    - fatal\n\n    6个等级\n    \n\n\n* console\n    - true\n    - false\n\n    log 输出到console的开启/关闭\n\n* file\n    - enable\n        - true\n        - false\n    - path\n\n    log 输出到console的开启/关闭  \n    path: The absolute path of the log file\n\n* memory_log_interval  \n    Configures interval in seconds in which the routing manager logs its used\n    memory. Setting a value greater than zero enables the logging.\n\n* status_log_interval\n    Configures interval in seconds in which the routing manager logs its internal\n    status.\n    Setting a value greater than zero enables the logging.\n\n\n* __Tracing__\n\n    - enable\n\n    - sd_enable\n\n    - channels\n        - name\n        - id\n\n* __Applications__\n\n    - name\n    - id\n    - max_dispatchers\n    - max_dispatch_time\n    - threads\n    - io_thread_nice\n    - request_debounce_time\n\n\n\n\n\n\n\n\n\n### Source Code Arch\n```bash\n├── config\n├── documentation\n├── examples\n│   ├── hello_world\n│   └── routingmanagerd\n├── implementation ---> 具体的代码实现逻辑\n│   ├── compat     ---> vSOMEIP 兼容\n│   │   ├── message\n│   │   │   ├── include\n│   │   │   └── src\n│   │   └── runtime\n│   │       ├── include\n│   │       └── src\n│   ├── configuration   ---> 配置\n│   │   ├── include\n│   │   └── src\n│   ├── e2e_protection\n│   ├── endpoints       ---> 具有vSOMEIP功能的进程\n│   │   ├── include\n│   │   └── src\n│   ├── helper          ---> boost版本兼容\n│   │   ├── 1.55\n│   │   ├── 1.66\n│   │   ├── 1.70\n│   │   └── 1.74\n│   ├── logger\n│   │   ├── include\n│   │   └── src\n│   ├── message\n│   │   ├── include\n│   │   └── src\n│   ├── plugin\n│   │   ├── include\n│   │   └── src\n│   ├── routing      ---> 每个系统中只能有一个vSomeIP服务被配置成Routing\n│   │   ├── include\n│   │   └── src\n│   ├── runtime       ---> 管理公共资源和获取runtime属性\n│   │   ├── include\n│   │   └── src\n│   ├── security\n│   │   ├── include\n│   │   └── src\n│   ├── service_discovery\n│   │   ├── include\n│   │   └── src\n│   ├── tracing\n│   │   ├── include\n│   │   └── src\n│   └── utility\n│       ├── include\n│       └── src\n├── interface\n│   ├── compat\n│   │   └── vsomeip\n│   │       ├── internal\n│   │       └── plugins\n│   └── vsomeip\n│       ├── internal\n│       └── plugins\n├── test\n└── tools\n```\n\n* Configuration lib\n    - implementation\n        - configuration\n\n* Base (Core) lib\n    - implementation\n        - __endpoingts__\n        - __message__\n        - __routing__\n        - __runtime__\n        - __service_discovery__\n\n\n","slug":"someip-01-code","published":1,"updated":"2021-12-26T10:08:54.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wg0000n079y48uvgwd9","content":"<h1 id=\"vSOMEIP-01-source-code\"><a href=\"#vSOMEIP-01-source-code\" class=\"headerlink\" title=\"vSOMEIP 01:  source code\"></a>vSOMEIP 01:  source code</h1><p>source code reading</p>\n<h2 id=\"Start-from-CMakeLists-txt\"><a href=\"#Start-from-CMakeLists-txt\" class=\"headerlink\" title=\"Start from CMakeLists.txt\"></a>Start from CMakeLists.txt</h2><h3 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h3><ul>\n<li>C++11, gcc &gt; 5.2</li>\n<li>Boost &gt; 1.55</li>\n</ul>\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h3><h4 id=\"DCMAKE-INSTALL-PREFIX\"><a href=\"#DCMAKE-INSTALL-PREFIX\" class=\"headerlink\" title=\"DCMAKE_INSTALL_PREFIX\"></a>DCMAKE_INSTALL_PREFIX</h4><p>安装位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DBASE-PATH\"><a href=\"#DBASE-PATH\" class=\"headerlink\" title=\"DBASE_PATH\"></a>DBASE_PATH</h4><p>创建local sockets 位置, 默认为 <code>/tmp/vsomeip*</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DBASE_PATH=&lt;YOUR BASE PATH&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DUNICAST-ADDRESS\"><a href=\"#DUNICAST-ADDRESS\" class=\"headerlink\" title=\"DUNICAST_ADDRESS\"></a>DUNICAST_ADDRESS</h4><p>组播 address</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"DDIAGNOSIS-ADDRESS\"><a href=\"#DDIAGNOSIS-ADDRESS\" class=\"headerlink\" title=\"DDIAGNOSIS_ADDRESS\"></a>DDIAGNOSIS_ADDRESS</h4><p>诊断 address</p>\n<p>默认为<code>0x01</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DDEFAULT-CONFIGURATION-FOLDER\"><a href=\"#DDEFAULT-CONFIGURATION-FOLDER\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FOLDER\"></a>DDEFAULT_CONFIGURATION_FOLDER</h4><p>配置文件目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip</code></p>\n<h4 id=\"DDEFAULT-CONFIGURATION-FILE\"><a href=\"#DDEFAULT-CONFIGURATION-FILE\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FILE\"></a>DDEFAULT_CONFIGURATION_FILE</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip.json</code></p>\n<h4 id=\"DENABLE-SIGNAL-HANDLING\"><a href=\"#DENABLE-SIGNAL-HANDLING\" class=\"headerlink\" title=\"DENABLE_SIGNAL_HANDLING\"></a>DENABLE_SIGNAL_HANDLING</h4><p>开启 signal handling</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DROUTING-READY-MESSAGE\"><a href=\"#DROUTING-READY-MESSAGE\" class=\"headerlink\" title=\"DROUTING_READY_MESSAGE\"></a>DROUTING_READY_MESSAGE</h4><p>自定义 完成 ip routing 后的通知消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DROUTING_READY_MESSAGE=&lt;YOUR MESSAGE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"VSOMEIP-APPLICATION-NAME\"><a href=\"#VSOMEIP-APPLICATION-NAME\" class=\"headerlink\" title=\"VSOMEIP_APPLICATION_NAME\"></a>VSOMEIP_APPLICATION_NAME</h4><p>通过环境变量 定义启动的程序名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\</span><br><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_CONFIGURATION=my_settings.json \\</span><br><span class=\"line\">./my_vsomeip_application</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"json-配置\"><a href=\"#json-配置\" class=\"headerlink\" title=\"json 配置\"></a>json 配置</h4><ul>\n<li><p>unicast</p>\n<p>  The IP address of the host system.</p>\n</li>\n<li><p>netmask</p>\n<p>  The netmask to specify the subnet of the host system.</p>\n</li>\n<li><p>device</p>\n<p>  If specified, IP endpoints will be bound to this device.</p>\n</li>\n</ul>\n<ul>\n<li><p>diagnosis</p>\n<p>  The diagnosis address (byte) that will be used to build client identifiers. The<br>  diagnosis address is assigned to the most significant byte in all client<br>  identifiers if not specified otherwise (for example through a predefined client<br>  ID).</p>\n</li>\n<li><p>diagnosis_mask</p>\n<p>  The diagnosis mask (2 byte) is used to control the maximum amount of allowed<br>  concurrent vsomeip clients on an ECU and the start value of the client IDs.</p>\n<p>  The default value is <code>0xFF00</code> meaning the most significant byte of the client ID<br>  is reserved for the diagnosis address and<br>  the client IDs will start with the diagnosis address as specified.</p>\n<p>  The maximum number of clients is 255 as the Hamming weight of the inverted mask<br>  is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID<br>  range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.</p>\n</li>\n<li><p>network</p>\n<p>  Network identifier used to support multiple routing managers on one host. This<br>  setting changes the name of the shared memory segment in <code>/dev/shm</code> and the name<br>  of the unix domain sockets in <code>/tmp/</code>. Defaults to <code>vsomeip</code> meaning the shared<br>  memory will be named <code>/dev/shm/vsomeip</code> and the unix domain sockets will be<br>  named <code>/tmp/vsomeip-$CLIENTID</code></p>\n</li>\n<li><p><strong>logging</strong></p>\n</li>\n<li><p>level</p>\n<ul>\n<li>trace</li>\n<li>debug</li>\n<li>info</li>\n<li>warning</li>\n<li>error</li>\n<li>fatal</li>\n</ul>\n<p>  6个等级</p>\n</li>\n</ul>\n<ul>\n<li><p>console</p>\n<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n<p>  log 输出到console的开启/关闭</p>\n</li>\n<li><p>file</p>\n<ul>\n<li>enable<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n</li>\n<li>path</li>\n</ul>\n<p>  log 输出到console的开启/关闭<br>  path: The absolute path of the log file</p>\n</li>\n<li><p>memory_log_interval<br>  Configures interval in seconds in which the routing manager logs its used<br>  memory. Setting a value greater than zero enables the logging.</p>\n</li>\n<li><p>status_log_interval<br>  Configures interval in seconds in which the routing manager logs its internal<br>  status.<br>  Setting a value greater than zero enables the logging.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Tracing</strong></p>\n<ul>\n<li><p>enable</p>\n</li>\n<li><p>sd_enable</p>\n</li>\n<li><p>channels</p>\n<ul>\n<li>name</li>\n<li>id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Applications</strong></p>\n<ul>\n<li>name</li>\n<li>id</li>\n<li>max_dispatchers</li>\n<li>max_dispatch_time</li>\n<li>threads</li>\n<li>io_thread_nice</li>\n<li>request_debounce_time</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Source-Code-Arch\"><a href=\"#Source-Code-Arch\" class=\"headerlink\" title=\"Source Code Arch\"></a>Source Code Arch</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── config</span><br><span class=\"line\">├── documentation</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">│   ├── hello_world</span><br><span class=\"line\">│   └── routingmanagerd</span><br><span class=\"line\">├── implementation ---&gt; 具体的代码实现逻辑</span><br><span class=\"line\">│   ├── compat     ---&gt; vSOMEIP 兼容</span><br><span class=\"line\">│   │   ├── message</span><br><span class=\"line\">│   │   │   ├── include</span><br><span class=\"line\">│   │   │   └── src</span><br><span class=\"line\">│   │   └── runtime</span><br><span class=\"line\">│   │       ├── include</span><br><span class=\"line\">│   │       └── src</span><br><span class=\"line\">│   ├── configuration   ---&gt; 配置</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── e2e_protection</span><br><span class=\"line\">│   ├── endpoints       ---&gt; 具有vSOMEIP功能的进程</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── helper          ---&gt; boost版本兼容</span><br><span class=\"line\">│   │   ├── 1.55</span><br><span class=\"line\">│   │   ├── 1.66</span><br><span class=\"line\">│   │   ├── 1.70</span><br><span class=\"line\">│   │   └── 1.74</span><br><span class=\"line\">│   ├── logger</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── message</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── plugin</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── routing      ---&gt; 每个系统中只能有一个vSomeIP服务被配置成Routing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── runtime       ---&gt; 管理公共资源和获取runtime属性</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── security</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── service_discovery</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── tracing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   └── utility</span><br><span class=\"line\">│       ├── include</span><br><span class=\"line\">│       └── src</span><br><span class=\"line\">├── interface</span><br><span class=\"line\">│   ├── compat</span><br><span class=\"line\">│   │   └── vsomeip</span><br><span class=\"line\">│   │       ├── internal</span><br><span class=\"line\">│   │       └── plugins</span><br><span class=\"line\">│   └── vsomeip</span><br><span class=\"line\">│       ├── internal</span><br><span class=\"line\">│       └── plugins</span><br><span class=\"line\">├── <span class=\"built_in\">test</span></span><br><span class=\"line\">└── tools</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Configuration lib</p>\n<ul>\n<li>implementation<ul>\n<li>configuration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Base (Core) lib</p>\n<ul>\n<li>implementation<ul>\n<li><strong>endpoingts</strong></li>\n<li><strong>message</strong></li>\n<li><strong>routing</strong></li>\n<li><strong>runtime</strong></li>\n<li><strong>service_discovery</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vSOMEIP-01-source-code\"><a href=\"#vSOMEIP-01-source-code\" class=\"headerlink\" title=\"vSOMEIP 01:  source code\"></a>vSOMEIP 01:  source code</h1><p>source code reading</p>\n<h2 id=\"Start-from-CMakeLists-txt\"><a href=\"#Start-from-CMakeLists-txt\" class=\"headerlink\" title=\"Start from CMakeLists.txt\"></a>Start from CMakeLists.txt</h2><h3 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h3><ul>\n<li>C++11, gcc &gt; 5.2</li>\n<li>Boost &gt; 1.55</li>\n</ul>\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h3><h4 id=\"DCMAKE-INSTALL-PREFIX\"><a href=\"#DCMAKE-INSTALL-PREFIX\" class=\"headerlink\" title=\"DCMAKE_INSTALL_PREFIX\"></a>DCMAKE_INSTALL_PREFIX</h4><p>安装位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DBASE-PATH\"><a href=\"#DBASE-PATH\" class=\"headerlink\" title=\"DBASE_PATH\"></a>DBASE_PATH</h4><p>创建local sockets 位置, 默认为 <code>/tmp/vsomeip*</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DBASE_PATH=&lt;YOUR BASE PATH&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DUNICAST-ADDRESS\"><a href=\"#DUNICAST-ADDRESS\" class=\"headerlink\" title=\"DUNICAST_ADDRESS\"></a>DUNICAST_ADDRESS</h4><p>组播 address</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"DDIAGNOSIS-ADDRESS\"><a href=\"#DDIAGNOSIS-ADDRESS\" class=\"headerlink\" title=\"DDIAGNOSIS_ADDRESS\"></a>DDIAGNOSIS_ADDRESS</h4><p>诊断 address</p>\n<p>默认为<code>0x01</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DDEFAULT-CONFIGURATION-FOLDER\"><a href=\"#DDEFAULT-CONFIGURATION-FOLDER\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FOLDER\"></a>DDEFAULT_CONFIGURATION_FOLDER</h4><p>配置文件目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip</code></p>\n<h4 id=\"DDEFAULT-CONFIGURATION-FILE\"><a href=\"#DDEFAULT-CONFIGURATION-FILE\" class=\"headerlink\" title=\"DDEFAULT_CONFIGURATION_FILE\"></a>DDEFAULT_CONFIGURATION_FILE</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<p>默认为 <code>/etc/vsomeip.json</code></p>\n<h4 id=\"DENABLE-SIGNAL-HANDLING\"><a href=\"#DENABLE-SIGNAL-HANDLING\" class=\"headerlink\" title=\"DENABLE_SIGNAL_HANDLING\"></a>DENABLE_SIGNAL_HANDLING</h4><p>开启 signal handling</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DROUTING-READY-MESSAGE\"><a href=\"#DROUTING-READY-MESSAGE\" class=\"headerlink\" title=\"DROUTING_READY_MESSAGE\"></a>DROUTING_READY_MESSAGE</h4><p>自定义 完成 ip routing 后的通知消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DROUTING_READY_MESSAGE=&lt;YOUR MESSAGE&gt; ..</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"VSOMEIP-APPLICATION-NAME\"><a href=\"#VSOMEIP-APPLICATION-NAME\" class=\"headerlink\" title=\"VSOMEIP_APPLICATION_NAME\"></a>VSOMEIP_APPLICATION_NAME</h4><p>通过环境变量 定义启动的程序名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_APPLICATION_NAME=my_vsomeip_client \\</span><br><span class=\"line\"><span class=\"built_in\">export</span> VSOMEIP_CONFIGURATION=my_settings.json \\</span><br><span class=\"line\">./my_vsomeip_application</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"json-配置\"><a href=\"#json-配置\" class=\"headerlink\" title=\"json 配置\"></a>json 配置</h4><ul>\n<li><p>unicast</p>\n<p>  The IP address of the host system.</p>\n</li>\n<li><p>netmask</p>\n<p>  The netmask to specify the subnet of the host system.</p>\n</li>\n<li><p>device</p>\n<p>  If specified, IP endpoints will be bound to this device.</p>\n</li>\n</ul>\n<ul>\n<li><p>diagnosis</p>\n<p>  The diagnosis address (byte) that will be used to build client identifiers. The<br>  diagnosis address is assigned to the most significant byte in all client<br>  identifiers if not specified otherwise (for example through a predefined client<br>  ID).</p>\n</li>\n<li><p>diagnosis_mask</p>\n<p>  The diagnosis mask (2 byte) is used to control the maximum amount of allowed<br>  concurrent vsomeip clients on an ECU and the start value of the client IDs.</p>\n<p>  The default value is <code>0xFF00</code> meaning the most significant byte of the client ID<br>  is reserved for the diagnosis address and<br>  the client IDs will start with the diagnosis address as specified.</p>\n<p>  The maximum number of clients is 255 as the Hamming weight of the inverted mask<br>  is 8 (2^8 = 256 - 1 (for the routing manager) = 255). The resulting client ID<br>  range with a diagnosis address of for example 0x45 would be 0x4501 to 0x45ff.</p>\n</li>\n<li><p>network</p>\n<p>  Network identifier used to support multiple routing managers on one host. This<br>  setting changes the name of the shared memory segment in <code>/dev/shm</code> and the name<br>  of the unix domain sockets in <code>/tmp/</code>. Defaults to <code>vsomeip</code> meaning the shared<br>  memory will be named <code>/dev/shm/vsomeip</code> and the unix domain sockets will be<br>  named <code>/tmp/vsomeip-$CLIENTID</code></p>\n</li>\n<li><p><strong>logging</strong></p>\n</li>\n<li><p>level</p>\n<ul>\n<li>trace</li>\n<li>debug</li>\n<li>info</li>\n<li>warning</li>\n<li>error</li>\n<li>fatal</li>\n</ul>\n<p>  6个等级</p>\n</li>\n</ul>\n<ul>\n<li><p>console</p>\n<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n<p>  log 输出到console的开启/关闭</p>\n</li>\n<li><p>file</p>\n<ul>\n<li>enable<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n</li>\n<li>path</li>\n</ul>\n<p>  log 输出到console的开启/关闭<br>  path: The absolute path of the log file</p>\n</li>\n<li><p>memory_log_interval<br>  Configures interval in seconds in which the routing manager logs its used<br>  memory. Setting a value greater than zero enables the logging.</p>\n</li>\n<li><p>status_log_interval<br>  Configures interval in seconds in which the routing manager logs its internal<br>  status.<br>  Setting a value greater than zero enables the logging.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Tracing</strong></p>\n<ul>\n<li><p>enable</p>\n</li>\n<li><p>sd_enable</p>\n</li>\n<li><p>channels</p>\n<ul>\n<li>name</li>\n<li>id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Applications</strong></p>\n<ul>\n<li>name</li>\n<li>id</li>\n<li>max_dispatchers</li>\n<li>max_dispatch_time</li>\n<li>threads</li>\n<li>io_thread_nice</li>\n<li>request_debounce_time</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Source-Code-Arch\"><a href=\"#Source-Code-Arch\" class=\"headerlink\" title=\"Source Code Arch\"></a>Source Code Arch</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── config</span><br><span class=\"line\">├── documentation</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">│   ├── hello_world</span><br><span class=\"line\">│   └── routingmanagerd</span><br><span class=\"line\">├── implementation ---&gt; 具体的代码实现逻辑</span><br><span class=\"line\">│   ├── compat     ---&gt; vSOMEIP 兼容</span><br><span class=\"line\">│   │   ├── message</span><br><span class=\"line\">│   │   │   ├── include</span><br><span class=\"line\">│   │   │   └── src</span><br><span class=\"line\">│   │   └── runtime</span><br><span class=\"line\">│   │       ├── include</span><br><span class=\"line\">│   │       └── src</span><br><span class=\"line\">│   ├── configuration   ---&gt; 配置</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── e2e_protection</span><br><span class=\"line\">│   ├── endpoints       ---&gt; 具有vSOMEIP功能的进程</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── helper          ---&gt; boost版本兼容</span><br><span class=\"line\">│   │   ├── 1.55</span><br><span class=\"line\">│   │   ├── 1.66</span><br><span class=\"line\">│   │   ├── 1.70</span><br><span class=\"line\">│   │   └── 1.74</span><br><span class=\"line\">│   ├── logger</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── message</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── plugin</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── routing      ---&gt; 每个系统中只能有一个vSomeIP服务被配置成Routing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── runtime       ---&gt; 管理公共资源和获取runtime属性</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── security</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── service_discovery</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   ├── tracing</span><br><span class=\"line\">│   │   ├── include</span><br><span class=\"line\">│   │   └── src</span><br><span class=\"line\">│   └── utility</span><br><span class=\"line\">│       ├── include</span><br><span class=\"line\">│       └── src</span><br><span class=\"line\">├── interface</span><br><span class=\"line\">│   ├── compat</span><br><span class=\"line\">│   │   └── vsomeip</span><br><span class=\"line\">│   │       ├── internal</span><br><span class=\"line\">│   │       └── plugins</span><br><span class=\"line\">│   └── vsomeip</span><br><span class=\"line\">│       ├── internal</span><br><span class=\"line\">│       └── plugins</span><br><span class=\"line\">├── <span class=\"built_in\">test</span></span><br><span class=\"line\">└── tools</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Configuration lib</p>\n<ul>\n<li>implementation<ul>\n<li>configuration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Base (Core) lib</p>\n<ul>\n<li>implementation<ul>\n<li><strong>endpoingts</strong></li>\n<li><strong>message</strong></li>\n<li><strong>routing</strong></li>\n<li><strong>runtime</strong></li>\n<li><strong>service_discovery</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"someip-01: vsomeip with ap","date":"2021-12-22T10:10:05.000Z","_content":"## vector autosar someip与vsomeip对接经验总结\n\nsomeip是现代车辆通信的主流通信协议知一\n\n虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有\n* vector autosar 的someip版本\n* vsomeip；\n\n这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；\n\n### 在同一个局域网内，两方无法相互发现；\n\n原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；\n\n而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；\n\n所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；\n\n这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；\n\n理想情况下，将两方的配置修改成一样就可以正常发现彼此；\n\n \n\n### 将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\n\n这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；\n\n如果抓包工具可以确认在网络上有影响的udp广播包；\n\n那么就要对someip的版本号配置进行确认；\n\n在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;\n\n由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；\n\n将双方的版本号信息设置为一致时，就相互就可以识别了；\n\n \n\n### sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\n\n这个就需要排查网络设置问题；\n\n(1)双方是否可以彼此ping通；\n\n(2)路由表以及gateway是否配置正确；\n\n我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；\n\n \n\n### 双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\n\n这个问题，也是由于服务版本号的问题（interface version）;\n\n由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；\n\n但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；\n\n这个需要注意检查；\n\n \n### 当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\n\n首先要对someip传输类型进行确认（使用的是tcp或者udp）;\n\n假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；\n\n否则autasar someip tcp的客户端无法正常接收；","source":"_posts/someip-02-vsomeip-with-ap.md","raw":"---\ntitle: 'someip-01: vsomeip with ap'\ndate: 2021-12-22 18:10:05\ntags:\n    - someip\n    - vSOMEIP\n---\n## vector autosar someip与vsomeip对接经验总结\n\nsomeip是现代车辆通信的主流通信协议知一\n\n虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有\n* vector autosar 的someip版本\n* vsomeip；\n\n这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；\n\n### 在同一个局域网内，两方无法相互发现；\n\n原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；\n\n而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；\n\n所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；\n\n这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；\n\n理想情况下，将两方的配置修改成一样就可以正常发现彼此；\n\n \n\n### 将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\n\n这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；\n\n如果抓包工具可以确认在网络上有影响的udp广播包；\n\n那么就要对someip的版本号配置进行确认；\n\n在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;\n\n由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；\n\n将双方的版本号信息设置为一致时，就相互就可以识别了；\n\n \n\n### sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\n\n这个就需要排查网络设置问题；\n\n(1)双方是否可以彼此ping通；\n\n(2)路由表以及gateway是否配置正确；\n\n我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；\n\n \n\n### 双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\n\n这个问题，也是由于服务版本号的问题（interface version）;\n\n由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；\n\n但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；\n\n这个需要注意检查；\n\n \n### 当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\n\n首先要对someip传输类型进行确认（使用的是tcp或者udp）;\n\n假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；\n\n否则autasar someip tcp的客户端无法正常接收；","slug":"someip-02-vsomeip-with-ap","published":1,"updated":"2021-12-26T10:11:28.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wg1000o079y25aigh29","content":"<h2 id=\"vector-autosar-someip与vsomeip对接经验总结\"><a href=\"#vector-autosar-someip与vsomeip对接经验总结\" class=\"headerlink\" title=\"vector autosar someip与vsomeip对接经验总结\"></a>vector autosar someip与vsomeip对接经验总结</h2><p>someip是现代车辆通信的主流通信协议知一</p>\n<p>虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有</p>\n<ul>\n<li>vector autosar 的someip版本</li>\n<li>vsomeip；</li>\n</ul>\n<p>这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；</p>\n<h3 id=\"在同一个局域网内，两方无法相互发现；\"><a href=\"#在同一个局域网内，两方无法相互发现；\" class=\"headerlink\" title=\"在同一个局域网内，两方无法相互发现；\"></a>在同一个局域网内，两方无法相互发现；</h3><p>原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；</p>\n<p>而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；</p>\n<p>所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；</p>\n<p>这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；</p>\n<p>理想情况下，将两方的配置修改成一样就可以正常发现彼此；</p>\n<h3 id=\"将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"><a href=\"#将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\" class=\"headerlink\" title=\"将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"></a>将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；</h3><p>这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；</p>\n<p>如果抓包工具可以确认在网络上有影响的udp广播包；</p>\n<p>那么就要对someip的版本号配置进行确认；</p>\n<p>在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;</p>\n<p>由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；</p>\n<p>将双方的版本号信息设置为一致时，就相互就可以识别了；</p>\n<h3 id=\"sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"><a href=\"#sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\" class=\"headerlink\" title=\"sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"></a>sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；</h3><p>这个就需要排查网络设置问题；</p>\n<p>(1)双方是否可以彼此ping通；</p>\n<p>(2)路由表以及gateway是否配置正确；</p>\n<p>我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；</p>\n<h3 id=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"><a href=\"#双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\" class=\"headerlink\" title=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"></a>双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；</h3><p>这个问题，也是由于服务版本号的问题（interface version）;</p>\n<p>由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；</p>\n<p>但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；</p>\n<p>这个需要注意检查；</p>\n<h3 id=\"当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\"><a href=\"#当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\" class=\"headerlink\" title=\"当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\"></a>当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；</h3><p>首先要对someip传输类型进行确认（使用的是tcp或者udp）;</p>\n<p>假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；</p>\n<p>否则autasar someip tcp的客户端无法正常接收；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vector-autosar-someip与vsomeip对接经验总结\"><a href=\"#vector-autosar-someip与vsomeip对接经验总结\" class=\"headerlink\" title=\"vector autosar someip与vsomeip对接经验总结\"></a>vector autosar someip与vsomeip对接经验总结</h2><p>someip是现代车辆通信的主流通信协议知一</p>\n<p>虽然someip协议已经基本成熟，但有多个实现版本，现在使用较多的主要有</p>\n<ul>\n<li>vector autosar 的someip版本</li>\n<li>vsomeip；</li>\n</ul>\n<p>这两个版本在理论上是可以相互兼容正常通信的，但在实际使用过程中，仍然发现了一些问题；</p>\n<h3 id=\"在同一个局域网内，两方无法相互发现；\"><a href=\"#在同一个局域网内，两方无法相互发现；\" class=\"headerlink\" title=\"在同一个局域网内，两方无法相互发现；\"></a>在同一个局域网内，两方无法相互发现；</h3><p>原理：运行的someip应用需要借助于各自的someipd服务来彼此发现对方；</p>\n<p>而someipsd实现的someip sd协议是借助于udp的广播来发布或收集网络中的其他someip应用的相关信息的；</p>\n<p>所以要想两方能够彼此发现，首先要将someip sd的服务设置为同一广播地址以及服务端口号；</p>\n<p>这个信息可以在vsomeip程序加载的vsomeip-tcp-server.jason等配置文件中进行修改；</p>\n<p>理想情况下，将两方的配置修改成一样就可以正常发现彼此；</p>\n<h3 id=\"将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"><a href=\"#将someip-sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\" class=\"headerlink\" title=\"将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；\"></a>将someip sd的广播地址以及服务端口号配置成一样，双方仍然是无法发现彼此；</h3><p>这个首先要借助网络工具来抓包进行确认，是否可以在网络上抓取到相应的udp数据包，来检查是不是由于网络设置的原因造成的；</p>\n<p>如果抓包工具可以确认在网络上有影响的udp广播包；</p>\n<p>那么就要对someip的版本号配置进行确认；</p>\n<p>在使用vsomeip 2.10版本时发现，vsomeip 代码中的默认主版本号信息为0x00;而vector autasar的someip版本号信息不特意更改的话是0x01;</p>\n<p>由于双方版本号不一致，虽然彼此可以收到对方发出的sd udp广播包，但在软件中彼此仍然无法相互识别。并且在vsomeip中会频繁输出warning信息；</p>\n<p>将双方的版本号信息设置为一致时，就相互就可以识别了；</p>\n<h3 id=\"sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"><a href=\"#sd-广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\" class=\"headerlink\" title=\"sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；\"></a>sd 广播地址服务端口号以及版本号都配置成一致；但彼此仍然无法发现；</h3><p>这个就需要排查网络设置问题；</p>\n<p>(1)双方是否可以彼此ping通；</p>\n<p>(2)路由表以及gateway是否配置正确；</p>\n<p>我就遇到双方可以ping通，但由于路由表以及gateway信息缺失使得双方无法彼此发现的问题；</p>\n<h3 id=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"><a href=\"#双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\" class=\"headerlink\" title=\"双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；\"></a>双方可以彼此发现，但客户端一订阅或者发送request底层tcp链接就断开的情况；</h3><p>这个问题，也是由于服务版本号的问题（interface version）;</p>\n<p>由于某些特殊的原因，将autosar someip的主版本号设置为255可以与vsomeip 的0版本号相互发现；</p>\n<p>但是当进行交互时，在代码中会对interface version配置进行验证。如果双方的interface version不一致，那么就会出现一通信底层tcp的链接就会断开情况；</p>\n<p>这个需要注意检查；</p>\n<h3 id=\"当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\"><a href=\"#当vsomeip作为服务器-autosar-someip作为客户端。vsomeip发送的event-autosar-someip的客户端无法接收到的情况；\" class=\"headerlink\" title=\"当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；\"></a>当vsomeip作为服务器,autosar someip作为客户端。vsomeip发送的event,autosar someip的客户端无法接收到的情况；</h3><p>首先要对someip传输类型进行确认（使用的是tcp或者udp）;</p>\n<p>假如使用tcp进行传输；则需要将vsomeip 配置文件中event配置添加is_reliable为true的字段；</p>\n<p>否则autasar someip tcp的客户端无法正常接收；</p>\n"},{"title":"thread","date":"2022-03-23T17:23:58.000Z","_content":"\n# 线程概述\n\n与进程（process）类似，线程（thread）是允许应用程序并发执行多个任务的一种机\n制。一个进程可以包含多个线程。\n同一个程序中的所有线程均会独立执行相同程序，且共享同一份全局内存区域，其中包括初始化数据段、未初始化数据段，以及堆内存段。（传\n统意义上的 UNIX 进程只是多线程程序的一个特例，该进程只包含一个线程）\n\n- 进程是 CPU 分配资源的最小单位，线程是操作系统调度执行的最小单位。\n- 线程是轻量级的进程（LWP：Light Weight Process），`在 Linux 环境下线程的本质仍是进程`。\n- 查看指定进程的 LWP 号：ps –Lf pid\n\n__线程和进程区别__\n\n- 进程间的信息难以共享。\n    由于除去只读代码段外，父子进程并未共享内存，因此必须采用一些进程间通信方式，在进程间进行信息交换。\n\n- 调用 fork() 来创建进程的代价相对较高，即便利用写时复制技术，仍然需要复制诸如内存页表和文件描述符表之类的多种进程属性，\n这意味着 fork() 调用在时间上的开销依然不菲。\n\n- 线程之间能够方便、快速地共享信息。只需将数据复制到共享（全局或堆）变量中即可。\n\n- 创建线程比创建进程通常要快 10 倍甚至更多。线程间是共享虚拟地址空间的，无需采用写时复制来复制内存，也无需复制页表。\n\n\n__线程之间共享和非共享资源__\n\n- 共享资源\n    - 进程 ID 和父进程 ID\n    - 进程组 ID 和会话 ID\n    - 用户 ID 和 用户组 ID\n    - 文件描述符表\n    - 信号处置\n    - 文件系统的相关信息：文件权限掩码（umask）、当前工作目录\n    - 虚拟地址空间（除栈、.text） \n\n- 非共享资源\n    - 线程 ID\n    - 信号掩码\n    - 线程特有数据\n    - error 变量\n    - 实时调度策略和优先级\n    - 栈，本地变量和函数的调用链接信息\n\n## NPTL\n当 Linux 最初开发时，在内核中并不能真正支持线程。\n\n但是它的确可以通过 clone() 系统调用将进程作为可调度的实体。这个调用创建了调用进程（calling process）的\n一个拷贝，这个拷贝与调用进程共享相同的地址空间。LinuxThreads 项目使用这个调用来完成在用户空间模拟对线程的支持。\n不幸的是，这种方法有一些缺点，尤其是在信号处理、调度和进程间同步等方面都存在问题。\n另外，这个线程模型也不符合 POSIX 的要求。\n\n- 要改进 LinuxThreads，需要内核的支持，并且重写线程库。有两个相互竞争的项目开始\n来满足这些要求。一个包括 IBM 的开发人员的团队开展了 NGPT（Next-Generation \nPOSIX Threads）项目。同时，Red Hat 的一些开发人员开展了 NPTL 项目。NGPT \n在 2003 年中期被放弃了，把这个领域完全留给了 NPTL。\n\n- NPTL，或称为 Native POSIX Thread Library，是 Linux 线程的一个新实现，它克服了 LinuxThreads 的缺点，同时也符合 POSIX 的需求。与 LinuxThreads 相比，它在性能和稳定性方面都提供了重大的改进。\n\n- 查看当前 pthread 库版本：getconf GNU_LIBPTHREAD_VERSION\n\n## 线程创建函数\n- int pthread_create(pthread_t *thread, const pthread_attr_t *attr, \n- void *(*start_routine) (void *), void *arg);\n- pthread_t pthread_self(void);\n- int pthread_equal(pthread_t t1, pthread_t t2);\n- void pthread_exit(void *retval);\n- int pthread_join(pthread_t thread, void **retval);\n- int pthread_detach(pthread_t thread);\n- int pthread_cancel(pthread_t thread);\n\n### 线程属性函数\n* 线程属性类型 pthread_attr_t\n* int pthread_attr_init(pthread_attr_t *attr);\n* int pthread_attr_destroy(pthread_attr_t *attr);\n* int pthread_attr_getdetachstate(const pthread_attr_t *attr, int \n*detachstate);\n* int pthread_attr_setdetachstate(pthread_attr_t *attr, int \ndetachstate);\n\n## 线程同步\n即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，\n直到该线程完成操作，其他线程才能对该内存地址进行操作，而其他线程则处于等待状态。\n\n> 线程的主要优势在于，能够通过全局变量来共享信息。不过，这种便捷的共享是有代价的：\n必须确保多个线程不会同时修改同一变量，或者某一线程不会读取正在由其他线程修改的变量。\n\n> 临界区是指访问某一共享资源的代码片段，并且这段代码的执行应为原子操作，也就是\n同时访问同一共享资源的其他线程不应终端该片段的执行。\n\n### 互斥量\n\n为避免线程更新共享变量时出现问题，可以使用互斥量（mutex 是 mutual exclusion\n的缩写）来确保同时仅有一个线程可以访问某项共享资源。可以使用互斥量来保证对任意共\n享资源的原子访问。\n\n* 互斥量有两种状态：\n    - 已锁定（locked）\n    - 未锁定（unlocked）。\n    任何时候，至多只有一个线程可以锁定该互斥量。试图对已经锁定的某一互斥量再次加锁，将可能阻塞线程或者报\n    错失败，具体取决于加锁时使用的方法。\n\n* 一旦线程锁定互斥量，随即成为该互斥量的所有者，只有所有者才能给互斥量解锁。\n一般情况下，对每一共享资源（可能由多个相关变量组成）会使用不同的互斥量，每一线程在访问\n同一资源时将采用如下协议：\n    - 针对共享资源锁定互斥量\n    - 访问共享资源\n    - 对互斥量解锁\n\n### 死锁\n- 有时，一个线程需要同时访问两个或更多不同的共享资源，而每个资源又都由不同的互斥量管理。当超过一个线程加锁同一组互斥量时，就有可能发生死锁。\n\n- 两个或两个以上的进程在执行过程中，因争夺共享资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或统产生了死锁。\n\n- 死锁的几种场景：\n    - 忘记释放锁\n    - 重复加锁\n    - 多线程多锁，抢占锁资源\n\n\n\n#### 互斥量相关操作函数\n- 互斥量的类型 pthread_mutex_t\n- int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);\n- int pthread_mutex_destroy(pthread_mutex_t *mutex);\n- int pthread_mutex_lock(pthread_mutex_t *mutex);\n- int pthread_mutex_trylock(pthread_mutex_t *mutex);\n- int pthread_mutex_unlock(pthread_mutex_t *mutex);\n\n### 读写锁\n- 当有一个线程已经持有互斥锁时，互斥锁将所有试图进入临界区的线程都阻塞住。但是考\n虑一种情形，当前持有互斥锁的线程只是要读访问共享资源，而同时有其它几个线程也想\n读取这个共享资源，但是由于互斥锁的排它性，所有其它线程都无法获取锁，也就无法读\n访问共享资源了，但是实际上多个线程同时读访问共享资源并不会导致问题。\n- 在对数据的读写操作中，更多的是读操作，写操作较少，例如对数据库数据的读写应用。\n为了满足当前能够允许多个读出，但只允许一个写入的需求，线程提供了读写锁来实现。\n- 读写锁的特点：\n    - 如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作。\n    - 如果有其它线程写数据，则其它线程都不允许读、写操作。\n    - 写是独占的，写的优先级高。\n\n#### 读写锁相关操作函数\n- 读写锁的类型 pthread_rwlock_t\n- int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);\n- int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);\n\n### 信号量\n\n- 信号量的类型 sem_t\n- int sem_init(sem_t *sem, int pshared, unsigned int value);\n- int sem_destroy(sem_t *sem);\n- int sem_wait(sem_t *sem);\n- int sem_trywait(sem_t *sem);\n- int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);\n- int sem_post(sem_t *sem);\n- int sem_getvalue(sem_t *sem, int *sval);\n\n\n### RCU\nRCU锁是读写锁的扩展版本，简单来说就是支持多读多写同时加锁，但是对于多写同时加锁，还是存在一些技术挑战的。\n\nRCU锁翻译为 `Read Copy Update Lock`:\n- Copy ：写者在访问临界区时，写者将先拷贝一个临界区副本，然后对副本进行修改；\n- Update ：RCU机制将在在适当时机使用一个回调函数把指向原来临界区的指针重新指向新的被修改的临界区，锁机制中的垃圾收集器负责回调函数的调用。\n\n> 更新时机：没有CPU再去操作这段被RCU保护的临界区后，这段临界区即可回收了，此时回调函数即被调用。\n\n从实现逻辑来看，RCU锁在多个写者之间的同步开销还是比较大的，涉及到多份数据拷贝，回调函数等，因此这种锁机制的使用范围比较窄，适用于读多写少的情况，如网络路由表的查询更新、设备状态表更新等，在业务开发中使用不是很多。\n\n### 条件变量\n条件变量是用来等待线程而不是上锁的，通常和互斥锁一起使用。\n互斥锁的一个明显的特点就是某些业务场景中无法借助系统来唤醒，仍然需要业务代码使用while来判断，这样效率本质上比较低。\n而条件变量通过允许线程阻塞和等待另一个线程发送信号来弥补互斥锁的不足，所以互斥锁和条件变量通常一起使用，来让条件变量异步唤醒阻塞的线程。\n\n- 条件变量的类型 pthread_cond_t\n- int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);\n- int pthread_cond_destroy(pthread_cond_t *cond);\n- int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);\n- int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);\n- int pthread_cond_signal(pthread_cond_t *cond);\n- int pthread_cond_broadcast(pthread_cond_t *cond);\n\n### 自旋锁 Spin Lock\n自旋锁的主要特征是使用者在想要获得临界区执行权限时，如果临界区已经被加锁，那么自旋锁并不会阻塞睡眠，\n等待系统来主动唤醒，而是原地忙轮询资源是否被释放加锁;\n自旋锁有它的优点就是避免了系统的唤醒，自己来执行轮询，如果在临界区的资源代码非常短且是原子的，那么使用起来是非常方便的，\n避免了各种上下文切换，开销非常小，因此在内核的一些数据结构中自旋锁被广泛的使用。\n\n### 可重入锁和不可重入锁\n- 递归锁recursive mutex 可重入锁(reentrant mutex)\n- 非递归锁non-recursive mutex 不可重入锁(non-reentrant mutex)\n\n__生产/消费者模型实例__\n```C\n#include <stdio.h>\n#include <pthread.h>\n#define MAX 5\n\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t notfull = PTHREAD_COND_INITIALIZER;  //是否队满\npthread_cond_t notempty = PTHREAD_COND_INITIALIZER; //是否队空\nint top = 0;\nint bottom = 0;\n\nvoid* produce(void* arg)\n{\n    int i;\n    for ( i = 0; i < MAX*2; i++)\n    {\n        pthread_mutex_lock(&mutex);\n        while ((top+1)%MAX == bottom)\n        {\n            printf(\"full! producer is waiting\\n\");\n            //等待队不满\n            pthread_cond_wait(notfull, &mutex);\n        }\n        top = (top+1) % MAX;\n        //发出队非空的消息\n        pthread_cond_signal(notempty);\n        pthread_mutex_unlock(&mutex);\n    }\n    return (void*)1;\n}\nvoid* consume(void* arg)\n{\n    int i;\n    for ( i = 0; i < MAX*2; i++)\n    {\n        pthread_mutex_lock(&mutex);\n        while ( top%MAX == bottom)\n        {\n            printf(\"empty! consumer is waiting\\n\");\n            //等待队不空\n            pthread_cond_wait(notempty, &mutex);\n        }\n        bottom = (bottom+1) % MAX;\n        //发出队不满的消息\n        pthread_cond_signal(notfull);\n        pthread_mutex_unlock(&mutex);\n    }\n    return (void*)2;\n}\nint main(int argc, char *argv[])\n{\n    pthread_t thid1;\n    pthread_t thid2;\n    pthread_t thid3;\n    pthread_t thid4;\n\n    int ret1;\n    int ret2;\n    int ret3;\n    int ret4;\n\n    pthread_create(&thid1, NULL, produce, NULL);\n    pthread_create(&thid2, NULL, consume, NULL);\n    pthread_create(&thid3, NULL, produce, NULL);\n    pthread_create(&thid4, NULL, consume, NULL);\n\n    pthread_join(thid1, (void**)&ret1);\n    pthread_join(thid2, (void**)&ret2);\n    pthread_join(thid3, (void**)&ret3);\n    pthread_join(thid4, (void**)&ret4);\n    return 0;\n}\n```\n","source":"_posts/thread.md","raw":"---\ntitle: thread\ndate: 2022-03-24 01:23:58\ntags: Linux, C\n---\n\n# 线程概述\n\n与进程（process）类似，线程（thread）是允许应用程序并发执行多个任务的一种机\n制。一个进程可以包含多个线程。\n同一个程序中的所有线程均会独立执行相同程序，且共享同一份全局内存区域，其中包括初始化数据段、未初始化数据段，以及堆内存段。（传\n统意义上的 UNIX 进程只是多线程程序的一个特例，该进程只包含一个线程）\n\n- 进程是 CPU 分配资源的最小单位，线程是操作系统调度执行的最小单位。\n- 线程是轻量级的进程（LWP：Light Weight Process），`在 Linux 环境下线程的本质仍是进程`。\n- 查看指定进程的 LWP 号：ps –Lf pid\n\n__线程和进程区别__\n\n- 进程间的信息难以共享。\n    由于除去只读代码段外，父子进程并未共享内存，因此必须采用一些进程间通信方式，在进程间进行信息交换。\n\n- 调用 fork() 来创建进程的代价相对较高，即便利用写时复制技术，仍然需要复制诸如内存页表和文件描述符表之类的多种进程属性，\n这意味着 fork() 调用在时间上的开销依然不菲。\n\n- 线程之间能够方便、快速地共享信息。只需将数据复制到共享（全局或堆）变量中即可。\n\n- 创建线程比创建进程通常要快 10 倍甚至更多。线程间是共享虚拟地址空间的，无需采用写时复制来复制内存，也无需复制页表。\n\n\n__线程之间共享和非共享资源__\n\n- 共享资源\n    - 进程 ID 和父进程 ID\n    - 进程组 ID 和会话 ID\n    - 用户 ID 和 用户组 ID\n    - 文件描述符表\n    - 信号处置\n    - 文件系统的相关信息：文件权限掩码（umask）、当前工作目录\n    - 虚拟地址空间（除栈、.text） \n\n- 非共享资源\n    - 线程 ID\n    - 信号掩码\n    - 线程特有数据\n    - error 变量\n    - 实时调度策略和优先级\n    - 栈，本地变量和函数的调用链接信息\n\n## NPTL\n当 Linux 最初开发时，在内核中并不能真正支持线程。\n\n但是它的确可以通过 clone() 系统调用将进程作为可调度的实体。这个调用创建了调用进程（calling process）的\n一个拷贝，这个拷贝与调用进程共享相同的地址空间。LinuxThreads 项目使用这个调用来完成在用户空间模拟对线程的支持。\n不幸的是，这种方法有一些缺点，尤其是在信号处理、调度和进程间同步等方面都存在问题。\n另外，这个线程模型也不符合 POSIX 的要求。\n\n- 要改进 LinuxThreads，需要内核的支持，并且重写线程库。有两个相互竞争的项目开始\n来满足这些要求。一个包括 IBM 的开发人员的团队开展了 NGPT（Next-Generation \nPOSIX Threads）项目。同时，Red Hat 的一些开发人员开展了 NPTL 项目。NGPT \n在 2003 年中期被放弃了，把这个领域完全留给了 NPTL。\n\n- NPTL，或称为 Native POSIX Thread Library，是 Linux 线程的一个新实现，它克服了 LinuxThreads 的缺点，同时也符合 POSIX 的需求。与 LinuxThreads 相比，它在性能和稳定性方面都提供了重大的改进。\n\n- 查看当前 pthread 库版本：getconf GNU_LIBPTHREAD_VERSION\n\n## 线程创建函数\n- int pthread_create(pthread_t *thread, const pthread_attr_t *attr, \n- void *(*start_routine) (void *), void *arg);\n- pthread_t pthread_self(void);\n- int pthread_equal(pthread_t t1, pthread_t t2);\n- void pthread_exit(void *retval);\n- int pthread_join(pthread_t thread, void **retval);\n- int pthread_detach(pthread_t thread);\n- int pthread_cancel(pthread_t thread);\n\n### 线程属性函数\n* 线程属性类型 pthread_attr_t\n* int pthread_attr_init(pthread_attr_t *attr);\n* int pthread_attr_destroy(pthread_attr_t *attr);\n* int pthread_attr_getdetachstate(const pthread_attr_t *attr, int \n*detachstate);\n* int pthread_attr_setdetachstate(pthread_attr_t *attr, int \ndetachstate);\n\n## 线程同步\n即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，\n直到该线程完成操作，其他线程才能对该内存地址进行操作，而其他线程则处于等待状态。\n\n> 线程的主要优势在于，能够通过全局变量来共享信息。不过，这种便捷的共享是有代价的：\n必须确保多个线程不会同时修改同一变量，或者某一线程不会读取正在由其他线程修改的变量。\n\n> 临界区是指访问某一共享资源的代码片段，并且这段代码的执行应为原子操作，也就是\n同时访问同一共享资源的其他线程不应终端该片段的执行。\n\n### 互斥量\n\n为避免线程更新共享变量时出现问题，可以使用互斥量（mutex 是 mutual exclusion\n的缩写）来确保同时仅有一个线程可以访问某项共享资源。可以使用互斥量来保证对任意共\n享资源的原子访问。\n\n* 互斥量有两种状态：\n    - 已锁定（locked）\n    - 未锁定（unlocked）。\n    任何时候，至多只有一个线程可以锁定该互斥量。试图对已经锁定的某一互斥量再次加锁，将可能阻塞线程或者报\n    错失败，具体取决于加锁时使用的方法。\n\n* 一旦线程锁定互斥量，随即成为该互斥量的所有者，只有所有者才能给互斥量解锁。\n一般情况下，对每一共享资源（可能由多个相关变量组成）会使用不同的互斥量，每一线程在访问\n同一资源时将采用如下协议：\n    - 针对共享资源锁定互斥量\n    - 访问共享资源\n    - 对互斥量解锁\n\n### 死锁\n- 有时，一个线程需要同时访问两个或更多不同的共享资源，而每个资源又都由不同的互斥量管理。当超过一个线程加锁同一组互斥量时，就有可能发生死锁。\n\n- 两个或两个以上的进程在执行过程中，因争夺共享资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或统产生了死锁。\n\n- 死锁的几种场景：\n    - 忘记释放锁\n    - 重复加锁\n    - 多线程多锁，抢占锁资源\n\n\n\n#### 互斥量相关操作函数\n- 互斥量的类型 pthread_mutex_t\n- int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);\n- int pthread_mutex_destroy(pthread_mutex_t *mutex);\n- int pthread_mutex_lock(pthread_mutex_t *mutex);\n- int pthread_mutex_trylock(pthread_mutex_t *mutex);\n- int pthread_mutex_unlock(pthread_mutex_t *mutex);\n\n### 读写锁\n- 当有一个线程已经持有互斥锁时，互斥锁将所有试图进入临界区的线程都阻塞住。但是考\n虑一种情形，当前持有互斥锁的线程只是要读访问共享资源，而同时有其它几个线程也想\n读取这个共享资源，但是由于互斥锁的排它性，所有其它线程都无法获取锁，也就无法读\n访问共享资源了，但是实际上多个线程同时读访问共享资源并不会导致问题。\n- 在对数据的读写操作中，更多的是读操作，写操作较少，例如对数据库数据的读写应用。\n为了满足当前能够允许多个读出，但只允许一个写入的需求，线程提供了读写锁来实现。\n- 读写锁的特点：\n    - 如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作。\n    - 如果有其它线程写数据，则其它线程都不允许读、写操作。\n    - 写是独占的，写的优先级高。\n\n#### 读写锁相关操作函数\n- 读写锁的类型 pthread_rwlock_t\n- int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);\n- int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);\n- int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);\n\n### 信号量\n\n- 信号量的类型 sem_t\n- int sem_init(sem_t *sem, int pshared, unsigned int value);\n- int sem_destroy(sem_t *sem);\n- int sem_wait(sem_t *sem);\n- int sem_trywait(sem_t *sem);\n- int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);\n- int sem_post(sem_t *sem);\n- int sem_getvalue(sem_t *sem, int *sval);\n\n\n### RCU\nRCU锁是读写锁的扩展版本，简单来说就是支持多读多写同时加锁，但是对于多写同时加锁，还是存在一些技术挑战的。\n\nRCU锁翻译为 `Read Copy Update Lock`:\n- Copy ：写者在访问临界区时，写者将先拷贝一个临界区副本，然后对副本进行修改；\n- Update ：RCU机制将在在适当时机使用一个回调函数把指向原来临界区的指针重新指向新的被修改的临界区，锁机制中的垃圾收集器负责回调函数的调用。\n\n> 更新时机：没有CPU再去操作这段被RCU保护的临界区后，这段临界区即可回收了，此时回调函数即被调用。\n\n从实现逻辑来看，RCU锁在多个写者之间的同步开销还是比较大的，涉及到多份数据拷贝，回调函数等，因此这种锁机制的使用范围比较窄，适用于读多写少的情况，如网络路由表的查询更新、设备状态表更新等，在业务开发中使用不是很多。\n\n### 条件变量\n条件变量是用来等待线程而不是上锁的，通常和互斥锁一起使用。\n互斥锁的一个明显的特点就是某些业务场景中无法借助系统来唤醒，仍然需要业务代码使用while来判断，这样效率本质上比较低。\n而条件变量通过允许线程阻塞和等待另一个线程发送信号来弥补互斥锁的不足，所以互斥锁和条件变量通常一起使用，来让条件变量异步唤醒阻塞的线程。\n\n- 条件变量的类型 pthread_cond_t\n- int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);\n- int pthread_cond_destroy(pthread_cond_t *cond);\n- int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);\n- int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);\n- int pthread_cond_signal(pthread_cond_t *cond);\n- int pthread_cond_broadcast(pthread_cond_t *cond);\n\n### 自旋锁 Spin Lock\n自旋锁的主要特征是使用者在想要获得临界区执行权限时，如果临界区已经被加锁，那么自旋锁并不会阻塞睡眠，\n等待系统来主动唤醒，而是原地忙轮询资源是否被释放加锁;\n自旋锁有它的优点就是避免了系统的唤醒，自己来执行轮询，如果在临界区的资源代码非常短且是原子的，那么使用起来是非常方便的，\n避免了各种上下文切换，开销非常小，因此在内核的一些数据结构中自旋锁被广泛的使用。\n\n### 可重入锁和不可重入锁\n- 递归锁recursive mutex 可重入锁(reentrant mutex)\n- 非递归锁non-recursive mutex 不可重入锁(non-reentrant mutex)\n\n__生产/消费者模型实例__\n```C\n#include <stdio.h>\n#include <pthread.h>\n#define MAX 5\n\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t notfull = PTHREAD_COND_INITIALIZER;  //是否队满\npthread_cond_t notempty = PTHREAD_COND_INITIALIZER; //是否队空\nint top = 0;\nint bottom = 0;\n\nvoid* produce(void* arg)\n{\n    int i;\n    for ( i = 0; i < MAX*2; i++)\n    {\n        pthread_mutex_lock(&mutex);\n        while ((top+1)%MAX == bottom)\n        {\n            printf(\"full! producer is waiting\\n\");\n            //等待队不满\n            pthread_cond_wait(notfull, &mutex);\n        }\n        top = (top+1) % MAX;\n        //发出队非空的消息\n        pthread_cond_signal(notempty);\n        pthread_mutex_unlock(&mutex);\n    }\n    return (void*)1;\n}\nvoid* consume(void* arg)\n{\n    int i;\n    for ( i = 0; i < MAX*2; i++)\n    {\n        pthread_mutex_lock(&mutex);\n        while ( top%MAX == bottom)\n        {\n            printf(\"empty! consumer is waiting\\n\");\n            //等待队不空\n            pthread_cond_wait(notempty, &mutex);\n        }\n        bottom = (bottom+1) % MAX;\n        //发出队不满的消息\n        pthread_cond_signal(notfull);\n        pthread_mutex_unlock(&mutex);\n    }\n    return (void*)2;\n}\nint main(int argc, char *argv[])\n{\n    pthread_t thid1;\n    pthread_t thid2;\n    pthread_t thid3;\n    pthread_t thid4;\n\n    int ret1;\n    int ret2;\n    int ret3;\n    int ret4;\n\n    pthread_create(&thid1, NULL, produce, NULL);\n    pthread_create(&thid2, NULL, consume, NULL);\n    pthread_create(&thid3, NULL, produce, NULL);\n    pthread_create(&thid4, NULL, consume, NULL);\n\n    pthread_join(thid1, (void**)&ret1);\n    pthread_join(thid2, (void**)&ret2);\n    pthread_join(thid3, (void**)&ret3);\n    pthread_join(thid4, (void**)&ret4);\n    return 0;\n}\n```\n","slug":"thread","published":1,"updated":"2022-03-23T17:26:47.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wg2000s079ye7anbr92","content":"<h1 id=\"线程概述\"><a href=\"#线程概述\" class=\"headerlink\" title=\"线程概述\"></a>线程概述</h1><p>与进程（process）类似，线程（thread）是允许应用程序并发执行多个任务的一种机<br>制。一个进程可以包含多个线程。<br>同一个程序中的所有线程均会独立执行相同程序，且共享同一份全局内存区域，其中包括初始化数据段、未初始化数据段，以及堆内存段。（传<br>统意义上的 UNIX 进程只是多线程程序的一个特例，该进程只包含一个线程）</p>\n<ul>\n<li>进程是 CPU 分配资源的最小单位，线程是操作系统调度执行的最小单位。</li>\n<li>线程是轻量级的进程（LWP：Light Weight Process），<code>在 Linux 环境下线程的本质仍是进程</code>。</li>\n<li>查看指定进程的 LWP 号：ps –Lf pid</li>\n</ul>\n<p><strong>线程和进程区别</strong></p>\n<ul>\n<li><p>进程间的信息难以共享。<br>  由于除去只读代码段外，父子进程并未共享内存，因此必须采用一些进程间通信方式，在进程间进行信息交换。</p>\n</li>\n<li><p>调用 fork() 来创建进程的代价相对较高，即便利用写时复制技术，仍然需要复制诸如内存页表和文件描述符表之类的多种进程属性，<br>这意味着 fork() 调用在时间上的开销依然不菲。</p>\n</li>\n<li><p>线程之间能够方便、快速地共享信息。只需将数据复制到共享（全局或堆）变量中即可。</p>\n</li>\n<li><p>创建线程比创建进程通常要快 10 倍甚至更多。线程间是共享虚拟地址空间的，无需采用写时复制来复制内存，也无需复制页表。</p>\n</li>\n</ul>\n<p><strong>线程之间共享和非共享资源</strong></p>\n<ul>\n<li><p>共享资源</p>\n<ul>\n<li>进程 ID 和父进程 ID</li>\n<li>进程组 ID 和会话 ID</li>\n<li>用户 ID 和 用户组 ID</li>\n<li>文件描述符表</li>\n<li>信号处置</li>\n<li>文件系统的相关信息：文件权限掩码（umask）、当前工作目录</li>\n<li>虚拟地址空间（除栈、.text） </li>\n</ul>\n</li>\n<li><p>非共享资源</p>\n<ul>\n<li>线程 ID</li>\n<li>信号掩码</li>\n<li>线程特有数据</li>\n<li>error 变量</li>\n<li>实时调度策略和优先级</li>\n<li>栈，本地变量和函数的调用链接信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NPTL\"><a href=\"#NPTL\" class=\"headerlink\" title=\"NPTL\"></a>NPTL</h2><p>当 Linux 最初开发时，在内核中并不能真正支持线程。</p>\n<p>但是它的确可以通过 clone() 系统调用将进程作为可调度的实体。这个调用创建了调用进程（calling process）的<br>一个拷贝，这个拷贝与调用进程共享相同的地址空间。LinuxThreads 项目使用这个调用来完成在用户空间模拟对线程的支持。<br>不幸的是，这种方法有一些缺点，尤其是在信号处理、调度和进程间同步等方面都存在问题。<br>另外，这个线程模型也不符合 POSIX 的要求。</p>\n<ul>\n<li><p>要改进 LinuxThreads，需要内核的支持，并且重写线程库。有两个相互竞争的项目开始<br>来满足这些要求。一个包括 IBM 的开发人员的团队开展了 NGPT（Next-Generation<br>POSIX Threads）项目。同时，Red Hat 的一些开发人员开展了 NPTL 项目。NGPT<br>在 2003 年中期被放弃了，把这个领域完全留给了 NPTL。</p>\n</li>\n<li><p>NPTL，或称为 Native POSIX Thread Library，是 Linux 线程的一个新实现，它克服了 LinuxThreads 的缺点，同时也符合 POSIX 的需求。与 LinuxThreads 相比，它在性能和稳定性方面都提供了重大的改进。</p>\n</li>\n<li><p>查看当前 pthread 库版本：getconf GNU_LIBPTHREAD_VERSION</p>\n</li>\n</ul>\n<h2 id=\"线程创建函数\"><a href=\"#线程创建函数\" class=\"headerlink\" title=\"线程创建函数\"></a>线程创建函数</h2><ul>\n<li>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, </li>\n<li>void *(*start_routine) (void *), void *arg);</li>\n<li>pthread_t pthread_self(void);</li>\n<li>int pthread_equal(pthread_t t1, pthread_t t2);</li>\n<li>void pthread_exit(void *retval);</li>\n<li>int pthread_join(pthread_t thread, void **retval);</li>\n<li>int pthread_detach(pthread_t thread);</li>\n<li>int pthread_cancel(pthread_t thread);</li>\n</ul>\n<h3 id=\"线程属性函数\"><a href=\"#线程属性函数\" class=\"headerlink\" title=\"线程属性函数\"></a>线程属性函数</h3><ul>\n<li>线程属性类型 pthread_attr_t</li>\n<li>int pthread_attr_init(pthread_attr_t *attr);</li>\n<li>int pthread_attr_destroy(pthread_attr_t *attr);</li>\n<li>int pthread_attr_getdetachstate(const pthread_attr_t *attr, int </li>\n<li>detachstate);</li>\n<li>int pthread_attr_setdetachstate(pthread_attr_t *attr, int<br>detachstate);</li>\n</ul>\n<h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><p>即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，<br>直到该线程完成操作，其他线程才能对该内存地址进行操作，而其他线程则处于等待状态。</p>\n<blockquote>\n<p>线程的主要优势在于，能够通过全局变量来共享信息。不过，这种便捷的共享是有代价的：<br>必须确保多个线程不会同时修改同一变量，或者某一线程不会读取正在由其他线程修改的变量。</p>\n</blockquote>\n<blockquote>\n<p>临界区是指访问某一共享资源的代码片段，并且这段代码的执行应为原子操作，也就是<br>同时访问同一共享资源的其他线程不应终端该片段的执行。</p>\n</blockquote>\n<h3 id=\"互斥量\"><a href=\"#互斥量\" class=\"headerlink\" title=\"互斥量\"></a>互斥量</h3><p>为避免线程更新共享变量时出现问题，可以使用互斥量（mutex 是 mutual exclusion<br>的缩写）来确保同时仅有一个线程可以访问某项共享资源。可以使用互斥量来保证对任意共<br>享资源的原子访问。</p>\n<ul>\n<li><p>互斥量有两种状态：</p>\n<ul>\n<li>已锁定（locked）</li>\n<li>未锁定（unlocked）。<br>任何时候，至多只有一个线程可以锁定该互斥量。试图对已经锁定的某一互斥量再次加锁，将可能阻塞线程或者报<br>错失败，具体取决于加锁时使用的方法。</li>\n</ul>\n</li>\n<li><p>一旦线程锁定互斥量，随即成为该互斥量的所有者，只有所有者才能给互斥量解锁。<br>一般情况下，对每一共享资源（可能由多个相关变量组成）会使用不同的互斥量，每一线程在访问<br>同一资源时将采用如下协议：</p>\n<ul>\n<li>针对共享资源锁定互斥量</li>\n<li>访问共享资源</li>\n<li>对互斥量解锁</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li><p>有时，一个线程需要同时访问两个或更多不同的共享资源，而每个资源又都由不同的互斥量管理。当超过一个线程加锁同一组互斥量时，就有可能发生死锁。</p>\n</li>\n<li><p>两个或两个以上的进程在执行过程中，因争夺共享资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或统产生了死锁。</p>\n</li>\n<li><p>死锁的几种场景：</p>\n<ul>\n<li>忘记释放锁</li>\n<li>重复加锁</li>\n<li>多线程多锁，抢占锁资源</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"互斥量相关操作函数\"><a href=\"#互斥量相关操作函数\" class=\"headerlink\" title=\"互斥量相关操作函数\"></a>互斥量相关操作函数</h4><ul>\n<li>互斥量的类型 pthread_mutex_t</li>\n<li>int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);</li>\n<li>int pthread_mutex_destroy(pthread_mutex_t *mutex);</li>\n<li>int pthread_mutex_lock(pthread_mutex_t *mutex);</li>\n<li>int pthread_mutex_trylock(pthread_mutex_t *mutex);</li>\n<li>int pthread_mutex_unlock(pthread_mutex_t *mutex);</li>\n</ul>\n<h3 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h3><ul>\n<li>当有一个线程已经持有互斥锁时，互斥锁将所有试图进入临界区的线程都阻塞住。但是考<br>虑一种情形，当前持有互斥锁的线程只是要读访问共享资源，而同时有其它几个线程也想<br>读取这个共享资源，但是由于互斥锁的排它性，所有其它线程都无法获取锁，也就无法读<br>访问共享资源了，但是实际上多个线程同时读访问共享资源并不会导致问题。</li>\n<li>在对数据的读写操作中，更多的是读操作，写操作较少，例如对数据库数据的读写应用。<br>为了满足当前能够允许多个读出，但只允许一个写入的需求，线程提供了读写锁来实现。</li>\n<li>读写锁的特点：<ul>\n<li>如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作。</li>\n<li>如果有其它线程写数据，则其它线程都不允许读、写操作。</li>\n<li>写是独占的，写的优先级高。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"读写锁相关操作函数\"><a href=\"#读写锁相关操作函数\" class=\"headerlink\" title=\"读写锁相关操作函数\"></a>读写锁相关操作函数</h4><ul>\n<li>读写锁的类型 pthread_rwlock_t</li>\n<li>int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);</li>\n<li>int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);</li>\n</ul>\n<h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h3><ul>\n<li>信号量的类型 sem_t</li>\n<li>int sem_init(sem_t *sem, int pshared, unsigned int value);</li>\n<li>int sem_destroy(sem_t *sem);</li>\n<li>int sem_wait(sem_t *sem);</li>\n<li>int sem_trywait(sem_t *sem);</li>\n<li>int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);</li>\n<li>int sem_post(sem_t *sem);</li>\n<li>int sem_getvalue(sem_t *sem, int *sval);</li>\n</ul>\n<h3 id=\"RCU\"><a href=\"#RCU\" class=\"headerlink\" title=\"RCU\"></a>RCU</h3><p>RCU锁是读写锁的扩展版本，简单来说就是支持多读多写同时加锁，但是对于多写同时加锁，还是存在一些技术挑战的。</p>\n<p>RCU锁翻译为 <code>Read Copy Update Lock</code>:</p>\n<ul>\n<li>Copy ：写者在访问临界区时，写者将先拷贝一个临界区副本，然后对副本进行修改；</li>\n<li>Update ：RCU机制将在在适当时机使用一个回调函数把指向原来临界区的指针重新指向新的被修改的临界区，锁机制中的垃圾收集器负责回调函数的调用。</li>\n</ul>\n<blockquote>\n<p>更新时机：没有CPU再去操作这段被RCU保护的临界区后，这段临界区即可回收了，此时回调函数即被调用。</p>\n</blockquote>\n<p>从实现逻辑来看，RCU锁在多个写者之间的同步开销还是比较大的，涉及到多份数据拷贝，回调函数等，因此这种锁机制的使用范围比较窄，适用于读多写少的情况，如网络路由表的查询更新、设备状态表更新等，在业务开发中使用不是很多。</p>\n<h3 id=\"条件变量\"><a href=\"#条件变量\" class=\"headerlink\" title=\"条件变量\"></a>条件变量</h3><p>条件变量是用来等待线程而不是上锁的，通常和互斥锁一起使用。<br>互斥锁的一个明显的特点就是某些业务场景中无法借助系统来唤醒，仍然需要业务代码使用while来判断，这样效率本质上比较低。<br>而条件变量通过允许线程阻塞和等待另一个线程发送信号来弥补互斥锁的不足，所以互斥锁和条件变量通常一起使用，来让条件变量异步唤醒阻塞的线程。</p>\n<ul>\n<li>条件变量的类型 pthread_cond_t</li>\n<li>int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);</li>\n<li>int pthread_cond_destroy(pthread_cond_t *cond);</li>\n<li>int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);</li>\n<li>int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);</li>\n<li>int pthread_cond_signal(pthread_cond_t *cond);</li>\n<li>int pthread_cond_broadcast(pthread_cond_t *cond);</li>\n</ul>\n<h3 id=\"自旋锁-Spin-Lock\"><a href=\"#自旋锁-Spin-Lock\" class=\"headerlink\" title=\"自旋锁 Spin Lock\"></a>自旋锁 Spin Lock</h3><p>自旋锁的主要特征是使用者在想要获得临界区执行权限时，如果临界区已经被加锁，那么自旋锁并不会阻塞睡眠，<br>等待系统来主动唤醒，而是原地忙轮询资源是否被释放加锁;<br>自旋锁有它的优点就是避免了系统的唤醒，自己来执行轮询，如果在临界区的资源代码非常短且是原子的，那么使用起来是非常方便的，<br>避免了各种上下文切换，开销非常小，因此在内核的一些数据结构中自旋锁被广泛的使用。</p>\n<h3 id=\"可重入锁和不可重入锁\"><a href=\"#可重入锁和不可重入锁\" class=\"headerlink\" title=\"可重入锁和不可重入锁\"></a>可重入锁和不可重入锁</h3><ul>\n<li>递归锁recursive mutex 可重入锁(reentrant mutex)</li>\n<li>非递归锁non-recursive mutex 不可重入锁(non-reentrant mutex)</li>\n</ul>\n<p><strong>生产/消费者模型实例</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> notfull = PTHREAD_COND_INITIALIZER;  <span class=\"comment\">//是否队满</span></span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> notempty = PTHREAD_COND_INITIALIZER; <span class=\"comment\">//是否队空</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">produce</span><span class=\"params\">(<span class=\"keyword\">void</span>* arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; MAX*<span class=\"number\">2</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((top+<span class=\"number\">1</span>)%MAX == bottom)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;full! producer is waiting\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//等待队不满</span></span><br><span class=\"line\">            pthread_cond_wait(notfull, &amp;mutex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top = (top+<span class=\"number\">1</span>) % MAX;</span><br><span class=\"line\">        <span class=\"comment\">//发出队非空的消息</span></span><br><span class=\"line\">        pthread_cond_signal(notempty);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">void</span>*)<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">consume</span><span class=\"params\">(<span class=\"keyword\">void</span>* arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; MAX*<span class=\"number\">2</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( top%MAX == bottom)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;empty! consumer is waiting\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//等待队不空</span></span><br><span class=\"line\">            pthread_cond_wait(notempty, &amp;mutex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bottom = (bottom+<span class=\"number\">1</span>) % MAX;</span><br><span class=\"line\">        <span class=\"comment\">//发出队不满的消息</span></span><br><span class=\"line\">        pthread_cond_signal(notfull);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">void</span>*)<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid1;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid2;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid3;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid4;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret3;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret4;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_create(&amp;thid1, <span class=\"literal\">NULL</span>, produce, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_create(&amp;thid2, <span class=\"literal\">NULL</span>, consume, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_create(&amp;thid3, <span class=\"literal\">NULL</span>, produce, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_create(&amp;thid4, <span class=\"literal\">NULL</span>, consume, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_join(thid1, (<span class=\"keyword\">void</span>**)&amp;ret1);</span><br><span class=\"line\">    pthread_join(thid2, (<span class=\"keyword\">void</span>**)&amp;ret2);</span><br><span class=\"line\">    pthread_join(thid3, (<span class=\"keyword\">void</span>**)&amp;ret3);</span><br><span class=\"line\">    pthread_join(thid4, (<span class=\"keyword\">void</span>**)&amp;ret4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"线程概述\"><a href=\"#线程概述\" class=\"headerlink\" title=\"线程概述\"></a>线程概述</h1><p>与进程（process）类似，线程（thread）是允许应用程序并发执行多个任务的一种机<br>制。一个进程可以包含多个线程。<br>同一个程序中的所有线程均会独立执行相同程序，且共享同一份全局内存区域，其中包括初始化数据段、未初始化数据段，以及堆内存段。（传<br>统意义上的 UNIX 进程只是多线程程序的一个特例，该进程只包含一个线程）</p>\n<ul>\n<li>进程是 CPU 分配资源的最小单位，线程是操作系统调度执行的最小单位。</li>\n<li>线程是轻量级的进程（LWP：Light Weight Process），<code>在 Linux 环境下线程的本质仍是进程</code>。</li>\n<li>查看指定进程的 LWP 号：ps –Lf pid</li>\n</ul>\n<p><strong>线程和进程区别</strong></p>\n<ul>\n<li><p>进程间的信息难以共享。<br>  由于除去只读代码段外，父子进程并未共享内存，因此必须采用一些进程间通信方式，在进程间进行信息交换。</p>\n</li>\n<li><p>调用 fork() 来创建进程的代价相对较高，即便利用写时复制技术，仍然需要复制诸如内存页表和文件描述符表之类的多种进程属性，<br>这意味着 fork() 调用在时间上的开销依然不菲。</p>\n</li>\n<li><p>线程之间能够方便、快速地共享信息。只需将数据复制到共享（全局或堆）变量中即可。</p>\n</li>\n<li><p>创建线程比创建进程通常要快 10 倍甚至更多。线程间是共享虚拟地址空间的，无需采用写时复制来复制内存，也无需复制页表。</p>\n</li>\n</ul>\n<p><strong>线程之间共享和非共享资源</strong></p>\n<ul>\n<li><p>共享资源</p>\n<ul>\n<li>进程 ID 和父进程 ID</li>\n<li>进程组 ID 和会话 ID</li>\n<li>用户 ID 和 用户组 ID</li>\n<li>文件描述符表</li>\n<li>信号处置</li>\n<li>文件系统的相关信息：文件权限掩码（umask）、当前工作目录</li>\n<li>虚拟地址空间（除栈、.text） </li>\n</ul>\n</li>\n<li><p>非共享资源</p>\n<ul>\n<li>线程 ID</li>\n<li>信号掩码</li>\n<li>线程特有数据</li>\n<li>error 变量</li>\n<li>实时调度策略和优先级</li>\n<li>栈，本地变量和函数的调用链接信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NPTL\"><a href=\"#NPTL\" class=\"headerlink\" title=\"NPTL\"></a>NPTL</h2><p>当 Linux 最初开发时，在内核中并不能真正支持线程。</p>\n<p>但是它的确可以通过 clone() 系统调用将进程作为可调度的实体。这个调用创建了调用进程（calling process）的<br>一个拷贝，这个拷贝与调用进程共享相同的地址空间。LinuxThreads 项目使用这个调用来完成在用户空间模拟对线程的支持。<br>不幸的是，这种方法有一些缺点，尤其是在信号处理、调度和进程间同步等方面都存在问题。<br>另外，这个线程模型也不符合 POSIX 的要求。</p>\n<ul>\n<li><p>要改进 LinuxThreads，需要内核的支持，并且重写线程库。有两个相互竞争的项目开始<br>来满足这些要求。一个包括 IBM 的开发人员的团队开展了 NGPT（Next-Generation<br>POSIX Threads）项目。同时，Red Hat 的一些开发人员开展了 NPTL 项目。NGPT<br>在 2003 年中期被放弃了，把这个领域完全留给了 NPTL。</p>\n</li>\n<li><p>NPTL，或称为 Native POSIX Thread Library，是 Linux 线程的一个新实现，它克服了 LinuxThreads 的缺点，同时也符合 POSIX 的需求。与 LinuxThreads 相比，它在性能和稳定性方面都提供了重大的改进。</p>\n</li>\n<li><p>查看当前 pthread 库版本：getconf GNU_LIBPTHREAD_VERSION</p>\n</li>\n</ul>\n<h2 id=\"线程创建函数\"><a href=\"#线程创建函数\" class=\"headerlink\" title=\"线程创建函数\"></a>线程创建函数</h2><ul>\n<li>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, </li>\n<li>void *(*start_routine) (void *), void *arg);</li>\n<li>pthread_t pthread_self(void);</li>\n<li>int pthread_equal(pthread_t t1, pthread_t t2);</li>\n<li>void pthread_exit(void *retval);</li>\n<li>int pthread_join(pthread_t thread, void **retval);</li>\n<li>int pthread_detach(pthread_t thread);</li>\n<li>int pthread_cancel(pthread_t thread);</li>\n</ul>\n<h3 id=\"线程属性函数\"><a href=\"#线程属性函数\" class=\"headerlink\" title=\"线程属性函数\"></a>线程属性函数</h3><ul>\n<li>线程属性类型 pthread_attr_t</li>\n<li>int pthread_attr_init(pthread_attr_t *attr);</li>\n<li>int pthread_attr_destroy(pthread_attr_t *attr);</li>\n<li>int pthread_attr_getdetachstate(const pthread_attr_t *attr, int </li>\n<li>detachstate);</li>\n<li>int pthread_attr_setdetachstate(pthread_attr_t *attr, int<br>detachstate);</li>\n</ul>\n<h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><p>即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，<br>直到该线程完成操作，其他线程才能对该内存地址进行操作，而其他线程则处于等待状态。</p>\n<blockquote>\n<p>线程的主要优势在于，能够通过全局变量来共享信息。不过，这种便捷的共享是有代价的：<br>必须确保多个线程不会同时修改同一变量，或者某一线程不会读取正在由其他线程修改的变量。</p>\n</blockquote>\n<blockquote>\n<p>临界区是指访问某一共享资源的代码片段，并且这段代码的执行应为原子操作，也就是<br>同时访问同一共享资源的其他线程不应终端该片段的执行。</p>\n</blockquote>\n<h3 id=\"互斥量\"><a href=\"#互斥量\" class=\"headerlink\" title=\"互斥量\"></a>互斥量</h3><p>为避免线程更新共享变量时出现问题，可以使用互斥量（mutex 是 mutual exclusion<br>的缩写）来确保同时仅有一个线程可以访问某项共享资源。可以使用互斥量来保证对任意共<br>享资源的原子访问。</p>\n<ul>\n<li><p>互斥量有两种状态：</p>\n<ul>\n<li>已锁定（locked）</li>\n<li>未锁定（unlocked）。<br>任何时候，至多只有一个线程可以锁定该互斥量。试图对已经锁定的某一互斥量再次加锁，将可能阻塞线程或者报<br>错失败，具体取决于加锁时使用的方法。</li>\n</ul>\n</li>\n<li><p>一旦线程锁定互斥量，随即成为该互斥量的所有者，只有所有者才能给互斥量解锁。<br>一般情况下，对每一共享资源（可能由多个相关变量组成）会使用不同的互斥量，每一线程在访问<br>同一资源时将采用如下协议：</p>\n<ul>\n<li>针对共享资源锁定互斥量</li>\n<li>访问共享资源</li>\n<li>对互斥量解锁</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li><p>有时，一个线程需要同时访问两个或更多不同的共享资源，而每个资源又都由不同的互斥量管理。当超过一个线程加锁同一组互斥量时，就有可能发生死锁。</p>\n</li>\n<li><p>两个或两个以上的进程在执行过程中，因争夺共享资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或统产生了死锁。</p>\n</li>\n<li><p>死锁的几种场景：</p>\n<ul>\n<li>忘记释放锁</li>\n<li>重复加锁</li>\n<li>多线程多锁，抢占锁资源</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"互斥量相关操作函数\"><a href=\"#互斥量相关操作函数\" class=\"headerlink\" title=\"互斥量相关操作函数\"></a>互斥量相关操作函数</h4><ul>\n<li>互斥量的类型 pthread_mutex_t</li>\n<li>int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);</li>\n<li>int pthread_mutex_destroy(pthread_mutex_t *mutex);</li>\n<li>int pthread_mutex_lock(pthread_mutex_t *mutex);</li>\n<li>int pthread_mutex_trylock(pthread_mutex_t *mutex);</li>\n<li>int pthread_mutex_unlock(pthread_mutex_t *mutex);</li>\n</ul>\n<h3 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h3><ul>\n<li>当有一个线程已经持有互斥锁时，互斥锁将所有试图进入临界区的线程都阻塞住。但是考<br>虑一种情形，当前持有互斥锁的线程只是要读访问共享资源，而同时有其它几个线程也想<br>读取这个共享资源，但是由于互斥锁的排它性，所有其它线程都无法获取锁，也就无法读<br>访问共享资源了，但是实际上多个线程同时读访问共享资源并不会导致问题。</li>\n<li>在对数据的读写操作中，更多的是读操作，写操作较少，例如对数据库数据的读写应用。<br>为了满足当前能够允许多个读出，但只允许一个写入的需求，线程提供了读写锁来实现。</li>\n<li>读写锁的特点：<ul>\n<li>如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作。</li>\n<li>如果有其它线程写数据，则其它线程都不允许读、写操作。</li>\n<li>写是独占的，写的优先级高。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"读写锁相关操作函数\"><a href=\"#读写锁相关操作函数\" class=\"headerlink\" title=\"读写锁相关操作函数\"></a>读写锁相关操作函数</h4><ul>\n<li>读写锁的类型 pthread_rwlock_t</li>\n<li>int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);</li>\n<li>int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);</li>\n<li>int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);</li>\n</ul>\n<h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h3><ul>\n<li>信号量的类型 sem_t</li>\n<li>int sem_init(sem_t *sem, int pshared, unsigned int value);</li>\n<li>int sem_destroy(sem_t *sem);</li>\n<li>int sem_wait(sem_t *sem);</li>\n<li>int sem_trywait(sem_t *sem);</li>\n<li>int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);</li>\n<li>int sem_post(sem_t *sem);</li>\n<li>int sem_getvalue(sem_t *sem, int *sval);</li>\n</ul>\n<h3 id=\"RCU\"><a href=\"#RCU\" class=\"headerlink\" title=\"RCU\"></a>RCU</h3><p>RCU锁是读写锁的扩展版本，简单来说就是支持多读多写同时加锁，但是对于多写同时加锁，还是存在一些技术挑战的。</p>\n<p>RCU锁翻译为 <code>Read Copy Update Lock</code>:</p>\n<ul>\n<li>Copy ：写者在访问临界区时，写者将先拷贝一个临界区副本，然后对副本进行修改；</li>\n<li>Update ：RCU机制将在在适当时机使用一个回调函数把指向原来临界区的指针重新指向新的被修改的临界区，锁机制中的垃圾收集器负责回调函数的调用。</li>\n</ul>\n<blockquote>\n<p>更新时机：没有CPU再去操作这段被RCU保护的临界区后，这段临界区即可回收了，此时回调函数即被调用。</p>\n</blockquote>\n<p>从实现逻辑来看，RCU锁在多个写者之间的同步开销还是比较大的，涉及到多份数据拷贝，回调函数等，因此这种锁机制的使用范围比较窄，适用于读多写少的情况，如网络路由表的查询更新、设备状态表更新等，在业务开发中使用不是很多。</p>\n<h3 id=\"条件变量\"><a href=\"#条件变量\" class=\"headerlink\" title=\"条件变量\"></a>条件变量</h3><p>条件变量是用来等待线程而不是上锁的，通常和互斥锁一起使用。<br>互斥锁的一个明显的特点就是某些业务场景中无法借助系统来唤醒，仍然需要业务代码使用while来判断，这样效率本质上比较低。<br>而条件变量通过允许线程阻塞和等待另一个线程发送信号来弥补互斥锁的不足，所以互斥锁和条件变量通常一起使用，来让条件变量异步唤醒阻塞的线程。</p>\n<ul>\n<li>条件变量的类型 pthread_cond_t</li>\n<li>int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);</li>\n<li>int pthread_cond_destroy(pthread_cond_t *cond);</li>\n<li>int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);</li>\n<li>int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);</li>\n<li>int pthread_cond_signal(pthread_cond_t *cond);</li>\n<li>int pthread_cond_broadcast(pthread_cond_t *cond);</li>\n</ul>\n<h3 id=\"自旋锁-Spin-Lock\"><a href=\"#自旋锁-Spin-Lock\" class=\"headerlink\" title=\"自旋锁 Spin Lock\"></a>自旋锁 Spin Lock</h3><p>自旋锁的主要特征是使用者在想要获得临界区执行权限时，如果临界区已经被加锁，那么自旋锁并不会阻塞睡眠，<br>等待系统来主动唤醒，而是原地忙轮询资源是否被释放加锁;<br>自旋锁有它的优点就是避免了系统的唤醒，自己来执行轮询，如果在临界区的资源代码非常短且是原子的，那么使用起来是非常方便的，<br>避免了各种上下文切换，开销非常小，因此在内核的一些数据结构中自旋锁被广泛的使用。</p>\n<h3 id=\"可重入锁和不可重入锁\"><a href=\"#可重入锁和不可重入锁\" class=\"headerlink\" title=\"可重入锁和不可重入锁\"></a>可重入锁和不可重入锁</h3><ul>\n<li>递归锁recursive mutex 可重入锁(reentrant mutex)</li>\n<li>非递归锁non-recursive mutex 不可重入锁(non-reentrant mutex)</li>\n</ul>\n<p><strong>生产/消费者模型实例</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> notfull = PTHREAD_COND_INITIALIZER;  <span class=\"comment\">//是否队满</span></span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> notempty = PTHREAD_COND_INITIALIZER; <span class=\"comment\">//是否队空</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">produce</span><span class=\"params\">(<span class=\"keyword\">void</span>* arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; MAX*<span class=\"number\">2</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((top+<span class=\"number\">1</span>)%MAX == bottom)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;full! producer is waiting\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//等待队不满</span></span><br><span class=\"line\">            pthread_cond_wait(notfull, &amp;mutex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top = (top+<span class=\"number\">1</span>) % MAX;</span><br><span class=\"line\">        <span class=\"comment\">//发出队非空的消息</span></span><br><span class=\"line\">        pthread_cond_signal(notempty);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">void</span>*)<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">consume</span><span class=\"params\">(<span class=\"keyword\">void</span>* arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; MAX*<span class=\"number\">2</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( top%MAX == bottom)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;empty! consumer is waiting\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//等待队不空</span></span><br><span class=\"line\">            pthread_cond_wait(notempty, &amp;mutex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bottom = (bottom+<span class=\"number\">1</span>) % MAX;</span><br><span class=\"line\">        <span class=\"comment\">//发出队不满的消息</span></span><br><span class=\"line\">        pthread_cond_signal(notfull);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">void</span>*)<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid1;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid2;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid3;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thid4;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret3;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret4;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_create(&amp;thid1, <span class=\"literal\">NULL</span>, produce, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_create(&amp;thid2, <span class=\"literal\">NULL</span>, consume, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_create(&amp;thid3, <span class=\"literal\">NULL</span>, produce, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_create(&amp;thid4, <span class=\"literal\">NULL</span>, consume, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_join(thid1, (<span class=\"keyword\">void</span>**)&amp;ret1);</span><br><span class=\"line\">    pthread_join(thid2, (<span class=\"keyword\">void</span>**)&amp;ret2);</span><br><span class=\"line\">    pthread_join(thid3, (<span class=\"keyword\">void</span>**)&amp;ret3);</span><br><span class=\"line\">    pthread_join(thid4, (<span class=\"keyword\">void</span>**)&amp;ret4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vSOMEIP source reading","date":"2022-01-05T18:06:23.000Z","_content":"\n# VSOMEIP 源码学习分享 之 手摸手编译安装过源码\n\n\nContent\n---\n\n1. 源码结构\n\n2. 环境和编译\n\n3. 核心内容  \n\n  3.1 模块  \n\n  3.2 配置\n\n\n\n## 1. 源码结构\n\n```bash\ndev@dev:~/someip_space/vsomeip$ tree . -L 1\n.\n├── Android.bp\n├── AUTHORS\n├── CHANGES\n├── CMakeLists.txt\n├── config               --> 示例配置文件\n├── documentation        --> 使用文档\n├── examples             --> Demo\n├── exportmap.gcc        --> 控制动态库的函数导出\n├── implementation       --> 逻辑代码实现\n├── interface            --> 代码接口设计\n├── LICENSE\n├── LICENSE_boost\n├── README.md\n├── test                 --> 测试代码\n├── tools                --> some_ctrl 工具\n├── vsomeip3Config.cmake.in            --|\n├── vsomeip3ConfigVersion.cmake.in       |\n├── vsomeip3.pc.in                       |\n├── vsomeipConfig.cmake.in               | ==> cmake 配置\n├── vsomeipConfigVersion.cmake.in        |\n├── vsomeip.pc.in                        |\n└── vsomeip.xml                        --|\n```\n\n> 核心代码都在 implementation\n\n### implementation\n\n\n![arch](../imgs/00_overview_source_arch.png)\n\n```bash\ndev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1\n.\n├── compat                 --> 3.x 和 2.x 兼容层\n├── configuration          --> 配置模块: 配置读取,加载; 插件配置\n├── e2e_protection         --> e2e模块\n├── endpoints              --> client/server, tcp/udp, TP endpoint 实现\n├── helper                 --> boost 兼容层\n├── logger                 --> logger\n├── message                --> message, payload, (反)序列化 实现\n├── plugin                 --> 插件模块: 插件管理\n├── routing                --> 路由模块 \n├── runtime                --> 运行时: 管理 APP , runtime 资源\n├── security               --> 安全模块: policy, credentials \n├── service_discovery      --> 服务发现: \n                                    发现注册模块, \n                                    IPv4/IPv6 Options, \n                                    负载均衡, \n                                    远程订阅\n├── tracing                --> tracing: 配置 dlt-daemon\n└── utility                --> 通用工具\n```\n\n\n\n## 2. 环境和编译\n\n### 环境\n\nOS环境:\n\n```bash\nlsb_release -a\nNo LSB modules are available.\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 21.04\nRelease:\t21.04\nCodename:\thirsute\n```\n\n> 实测 18.04 也没有问题, 官方推荐14.04 及以上\n\n#### 工具\n\n* CMake\n\n> ref : https://apt.kitware.com/\n\n```bash\n# For Ubuntu Bionic Beaver (18.04) and newer:\nsudo apt-get update\nsudo apt-get install gpg wget\n\n# For Ubuntu Xenial Xerus (16.04):\nsudo apt-get update\nsudo apt-get install apt-transport-https wget\n\n# Obtain a copy of our signing key:\nwget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null\n\n# Add the repository to your sources list and update\n\n# For Ubuntu Focal Fossa (20.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# For Ubuntu Bionic Beaver (18.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n\n# For Ubuntu Xenial Xerus (16.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:\nsudo rm /usr/share/keyrings/kitware-archive-keyring.gpg\nsudo apt-get install kitware-archive-keyring\n\n# install cmake\nsudo apt-get install cmake\n\n```\n\n* g++ / clang++\n\n  需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 `std::bind`\n\n* boost 1.71\n\n  1.71 刚好和 DoIP boost版本保持一致\n  - repo, (master branch) \n\n    ```bash\n    Ethernet/boost_1_71_0\n    ```\n\n##### 可选\n```bash\n# 编译文档\n\nsudo apt install -y asciidoc source-highlight doxygen graphviz\n\n# pkg-config 配合make install\n# Return metainformation about installed libraries\n\nsudo apt install -y pkg-config\n```\n\n### 编译&安装\n\n``` bash\ncd vsomeip-3.1.20/\nmkdir build;cd build;\n\n# 默认配置\ncmake ..\n\n##  自定义\n# install path\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n# ip addr\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n# diagnosis addr\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n# configuration folder\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n# default configuration file\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n# signal handling\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n\nmake\n\nsudo make install\n\n# tool: vsomeip_ctrl\nmake vsomeip_ctrl\n```\n\n## 3. 核心内容\n\n### 3.1 模块\n自上而下来看可以划分为以下:\n\n* runtime\n\n* application\n\n* messgae\n\n* payload\n\n\n#### __runtime__\n\n![runtime](../imgs/vSOMEIP_source_runtime.png)\n\n上图为runtime 类在代码中与其他类的关系.\n\n这个类主要用于创建和管理其他所有公共资源和获取runtime属性。\n管理的资源包括:\n\n- application\n\n- message\n\n- payload\n\n主要的功能函数:\n\n* get\n  - `runtime`\n  - `application`\n\n* set/get_property:\n  - `map<string, string>`\n\n* create_xxx\n  - `application`\n  - `message`\n  - `request`\n  - `response`\n  - `notification`\n  - `payload`\n\n* remove_application\n\n\n#### __application__\n\n__最核心的一个部分__\n\n每个客户端都存在且仅存在一份。  \nApplication可以通过Runtime的接口来实例化。  \n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n管理的资源:\n\n- plugin\n- configuration\n- routing\n- endpoint\n- security\n- connector\n\n##### 函数实现:\n\n自身状态管理:\n- init\n- start\n- stop\n- process\n- is_available \n- are_available \n- is_routing\n\n属性:\n- get_name\n- get_client\n- get_diagnosis\n- get_security_mode\n- get_offered_services_async \n- get_sd_acceptance_required\n- set_routing_state\n- set_sd_acceptance_required \n- set_sd_acceptance_required\n\nhandler 类(调用client 传入的函数):\n\n- register_state_handler\n- unregister_state_handler\n\n- register_message_handler \n- unregister_message_handler \n\n- register_availability_handler\n- unregister_availability_handler \n\n- register_subscription_handler \n- register_async_subscription_handler\n- register_subscription_status_handler \n- unregister_subscription_status_handler\n- unregister_subscription_handler \n\n- register_routing_ready_handler \n- register_routing_state_handler \n\n- clear_all_handler \n\n- register_sd_acceptance_handler \n\n- register_reboot_notification_handler \n\n- set_watchdog_handler \n\n\n消息服务类:\n- update_service_configuration \n- update_security_policy_configuration\n- remove_security_policy_configuration \n\n- offer_service \n- stop_offer_service\n\n- offer_event \n- stop_offer_event\n\n- request_service \n- release_service\n\n- request_event \n- release_event \n\n- subscribe\n- unsubscribe\n\n- send \n- notify \n- notify_one \n\n\n#### __messgae & payload__\n\n![msg_arch](../imgs/vSOMEIP_source_messages_arch.png)\n\nmessage & payload 模块与其他模块之间的交互;\n主要负责 `set/get` 相关的属性(session, payload, id...), (反)序列化功能.\n\n由以下 `.cpp` 文件实现功能:\n\n* message_base_impl.cpp\n* message_header_impl.cpp\n* message_impl.cpp\n* payload_impl.cpp\n\n","source":"_posts/vSOMEIP-source-reading.md","raw":"---\ntitle: vSOMEIP source reading\ndate: 2022-01-06 02:06:23\ntags:\n    - CPP\n    - SOMEIP\n    - sources\n    - notes\n---\n\n# VSOMEIP 源码学习分享 之 手摸手编译安装过源码\n\n\nContent\n---\n\n1. 源码结构\n\n2. 环境和编译\n\n3. 核心内容  \n\n  3.1 模块  \n\n  3.2 配置\n\n\n\n## 1. 源码结构\n\n```bash\ndev@dev:~/someip_space/vsomeip$ tree . -L 1\n.\n├── Android.bp\n├── AUTHORS\n├── CHANGES\n├── CMakeLists.txt\n├── config               --> 示例配置文件\n├── documentation        --> 使用文档\n├── examples             --> Demo\n├── exportmap.gcc        --> 控制动态库的函数导出\n├── implementation       --> 逻辑代码实现\n├── interface            --> 代码接口设计\n├── LICENSE\n├── LICENSE_boost\n├── README.md\n├── test                 --> 测试代码\n├── tools                --> some_ctrl 工具\n├── vsomeip3Config.cmake.in            --|\n├── vsomeip3ConfigVersion.cmake.in       |\n├── vsomeip3.pc.in                       |\n├── vsomeipConfig.cmake.in               | ==> cmake 配置\n├── vsomeipConfigVersion.cmake.in        |\n├── vsomeip.pc.in                        |\n└── vsomeip.xml                        --|\n```\n\n> 核心代码都在 implementation\n\n### implementation\n\n\n![arch](../imgs/00_overview_source_arch.png)\n\n```bash\ndev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1\n.\n├── compat                 --> 3.x 和 2.x 兼容层\n├── configuration          --> 配置模块: 配置读取,加载; 插件配置\n├── e2e_protection         --> e2e模块\n├── endpoints              --> client/server, tcp/udp, TP endpoint 实现\n├── helper                 --> boost 兼容层\n├── logger                 --> logger\n├── message                --> message, payload, (反)序列化 实现\n├── plugin                 --> 插件模块: 插件管理\n├── routing                --> 路由模块 \n├── runtime                --> 运行时: 管理 APP , runtime 资源\n├── security               --> 安全模块: policy, credentials \n├── service_discovery      --> 服务发现: \n                                    发现注册模块, \n                                    IPv4/IPv6 Options, \n                                    负载均衡, \n                                    远程订阅\n├── tracing                --> tracing: 配置 dlt-daemon\n└── utility                --> 通用工具\n```\n\n\n\n## 2. 环境和编译\n\n### 环境\n\nOS环境:\n\n```bash\nlsb_release -a\nNo LSB modules are available.\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 21.04\nRelease:\t21.04\nCodename:\thirsute\n```\n\n> 实测 18.04 也没有问题, 官方推荐14.04 及以上\n\n#### 工具\n\n* CMake\n\n> ref : https://apt.kitware.com/\n\n```bash\n# For Ubuntu Bionic Beaver (18.04) and newer:\nsudo apt-get update\nsudo apt-get install gpg wget\n\n# For Ubuntu Xenial Xerus (16.04):\nsudo apt-get update\nsudo apt-get install apt-transport-https wget\n\n# Obtain a copy of our signing key:\nwget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null\n\n# Add the repository to your sources list and update\n\n# For Ubuntu Focal Fossa (20.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# For Ubuntu Bionic Beaver (18.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n\n# For Ubuntu Xenial Xerus (16.04):\necho 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null\n\nsudo apt-get update\n\n# Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:\nsudo rm /usr/share/keyrings/kitware-archive-keyring.gpg\nsudo apt-get install kitware-archive-keyring\n\n# install cmake\nsudo apt-get install cmake\n\n```\n\n* g++ / clang++\n\n  需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 `std::bind`\n\n* boost 1.71\n\n  1.71 刚好和 DoIP boost版本保持一致\n  - repo, (master branch) \n\n    ```bash\n    Ethernet/boost_1_71_0\n    ```\n\n##### 可选\n```bash\n# 编译文档\n\nsudo apt install -y asciidoc source-highlight doxygen graphviz\n\n# pkg-config 配合make install\n# Return metainformation about installed libraries\n\nsudo apt install -y pkg-config\n```\n\n### 编译&安装\n\n``` bash\ncd vsomeip-3.1.20/\nmkdir build;cd build;\n\n# 默认配置\ncmake ..\n\n##  自定义\n# install path\ncmake -DCMAKE_INSTALL_PREFIX:PATH=$YOUR_PATH ..\n# ip addr\ncmake -DUNICAST_ADDRESS=<YOUR IP ADDRESS> ..\n# diagnosis addr\ncmake -DDIAGNOSIS_ADDRESS=<YOUR DIAGNOSIS ADDRESS> ..\n# configuration folder\ncmake -DDEFAULT_CONFIGURATION_FOLDER=<DEFAULT CONFIGURATION FOLDER> ..\n# default configuration file\ncmake -DDEFAULT_CONFIGURATION_FILE=<DEFAULT CONFIGURATION FILE> ..\n# signal handling\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\n\nmake\n\nsudo make install\n\n# tool: vsomeip_ctrl\nmake vsomeip_ctrl\n```\n\n## 3. 核心内容\n\n### 3.1 模块\n自上而下来看可以划分为以下:\n\n* runtime\n\n* application\n\n* messgae\n\n* payload\n\n\n#### __runtime__\n\n![runtime](../imgs/vSOMEIP_source_runtime.png)\n\n上图为runtime 类在代码中与其他类的关系.\n\n这个类主要用于创建和管理其他所有公共资源和获取runtime属性。\n管理的资源包括:\n\n- application\n\n- message\n\n- payload\n\n主要的功能函数:\n\n* get\n  - `runtime`\n  - `application`\n\n* set/get_property:\n  - `map<string, string>`\n\n* create_xxx\n  - `application`\n  - `message`\n  - `request`\n  - `response`\n  - `notification`\n  - `payload`\n\n* remove_application\n\n\n#### __application__\n\n__最核心的一个部分__\n\n每个客户端都存在且仅存在一份。  \nApplication可以通过Runtime的接口来实例化。  \n管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。\n\n管理的资源:\n\n- plugin\n- configuration\n- routing\n- endpoint\n- security\n- connector\n\n##### 函数实现:\n\n自身状态管理:\n- init\n- start\n- stop\n- process\n- is_available \n- are_available \n- is_routing\n\n属性:\n- get_name\n- get_client\n- get_diagnosis\n- get_security_mode\n- get_offered_services_async \n- get_sd_acceptance_required\n- set_routing_state\n- set_sd_acceptance_required \n- set_sd_acceptance_required\n\nhandler 类(调用client 传入的函数):\n\n- register_state_handler\n- unregister_state_handler\n\n- register_message_handler \n- unregister_message_handler \n\n- register_availability_handler\n- unregister_availability_handler \n\n- register_subscription_handler \n- register_async_subscription_handler\n- register_subscription_status_handler \n- unregister_subscription_status_handler\n- unregister_subscription_handler \n\n- register_routing_ready_handler \n- register_routing_state_handler \n\n- clear_all_handler \n\n- register_sd_acceptance_handler \n\n- register_reboot_notification_handler \n\n- set_watchdog_handler \n\n\n消息服务类:\n- update_service_configuration \n- update_security_policy_configuration\n- remove_security_policy_configuration \n\n- offer_service \n- stop_offer_service\n\n- offer_event \n- stop_offer_event\n\n- request_service \n- release_service\n\n- request_event \n- release_event \n\n- subscribe\n- unsubscribe\n\n- send \n- notify \n- notify_one \n\n\n#### __messgae & payload__\n\n![msg_arch](../imgs/vSOMEIP_source_messages_arch.png)\n\nmessage & payload 模块与其他模块之间的交互;\n主要负责 `set/get` 相关的属性(session, payload, id...), (反)序列化功能.\n\n由以下 `.cpp` 文件实现功能:\n\n* message_base_impl.cpp\n* message_header_impl.cpp\n* message_impl.cpp\n* payload_impl.cpp\n\n","slug":"vSOMEIP-source-reading","published":1,"updated":"2022-01-05T18:14:13.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wg4000t079ydjz1983u","content":"<h1 id=\"VSOMEIP-源码学习分享-之-手摸手编译安装过源码\"><a href=\"#VSOMEIP-源码学习分享-之-手摸手编译安装过源码\" class=\"headerlink\" title=\"VSOMEIP 源码学习分享 之 手摸手编译安装过源码\"></a>VSOMEIP 源码学习分享 之 手摸手编译安装过源码</h1><h2 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h2><ol>\n<li><p>源码结构</p>\n</li>\n<li><p>环境和编译</p>\n</li>\n<li><p>核心内容  </p>\n</li>\n<li><p>1 模块  </p>\n</li>\n<li><p>2 配置</p>\n</li>\n</ol>\n<h2 id=\"1-源码结构\"><a href=\"#1-源码结构\" class=\"headerlink\" title=\"1. 源码结构\"></a>1. 源码结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── Android.bp</span><br><span class=\"line\">├── AUTHORS</span><br><span class=\"line\">├── CHANGES</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── config               --&gt; 示例配置文件</span><br><span class=\"line\">├── documentation        --&gt; 使用文档</span><br><span class=\"line\">├── examples             --&gt; Demo</span><br><span class=\"line\">├── exportmap.gcc        --&gt; 控制动态库的函数导出</span><br><span class=\"line\">├── implementation       --&gt; 逻辑代码实现</span><br><span class=\"line\">├── interface            --&gt; 代码接口设计</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── LICENSE_boost</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── <span class=\"built_in\">test</span>                 --&gt; 测试代码</span><br><span class=\"line\">├── tools                --&gt; some_ctrl 工具</span><br><span class=\"line\">├── vsomeip3Config.cmake.in            --|</span><br><span class=\"line\">├── vsomeip3ConfigVersion.cmake.in       |</span><br><span class=\"line\">├── vsomeip3.pc.in                       |</span><br><span class=\"line\">├── vsomeipConfig.cmake.in               | ==&gt; cmake 配置</span><br><span class=\"line\">├── vsomeipConfigVersion.cmake.in        |</span><br><span class=\"line\">├── vsomeip.pc.in                        |</span><br><span class=\"line\">└── vsomeip.xml                        --|</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>核心代码都在 implementation</p>\n</blockquote>\n<h3 id=\"implementation\"><a href=\"#implementation\" class=\"headerlink\" title=\"implementation\"></a>implementation</h3><p><img src=\"../imgs/00_overview_source_arch.png\" alt=\"arch\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── compat                 --&gt; 3.x 和 2.x 兼容层</span><br><span class=\"line\">├── configuration          --&gt; 配置模块: 配置读取,加载; 插件配置</span><br><span class=\"line\">├── e2e_protection         --&gt; e2e模块</span><br><span class=\"line\">├── endpoints              --&gt; client/server, tcp/udp, TP endpoint 实现</span><br><span class=\"line\">├── helper                 --&gt; boost 兼容层</span><br><span class=\"line\">├── logger                 --&gt; logger</span><br><span class=\"line\">├── message                --&gt; message, payload, (反)序列化 实现</span><br><span class=\"line\">├── plugin                 --&gt; 插件模块: 插件管理</span><br><span class=\"line\">├── routing                --&gt; 路由模块 </span><br><span class=\"line\">├── runtime                --&gt; 运行时: 管理 APP , runtime 资源</span><br><span class=\"line\">├── security               --&gt; 安全模块: policy, credentials </span><br><span class=\"line\">├── service_discovery      --&gt; 服务发现: </span><br><span class=\"line\">                                    发现注册模块, </span><br><span class=\"line\">                                    IPv4/IPv6 Options, </span><br><span class=\"line\">                                    负载均衡, </span><br><span class=\"line\">                                    远程订阅</span><br><span class=\"line\">├── tracing                --&gt; tracing: 配置 dlt-daemon</span><br><span class=\"line\">└── utility                --&gt; 通用工具</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-环境和编译\"><a href=\"#2-环境和编译\" class=\"headerlink\" title=\"2. 环境和编译\"></a>2. 环境和编译</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>OS环境:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID:\tUbuntu</span><br><span class=\"line\">Description:\tUbuntu 21.04</span><br><span class=\"line\">Release:\t21.04</span><br><span class=\"line\">Codename:\thirsute</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实测 18.04 也没有问题, 官方推荐14.04 及以上</p>\n</blockquote>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li>CMake</li>\n</ul>\n<blockquote>\n<p>ref : <a href=\"https://apt.kitware.com/\">https://apt.kitware.com/</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04) and newer:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gpg wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obtain a copy of our signing key:</span></span><br><span class=\"line\">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the repository to your sources list and update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Focal Fossa (20.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:</span></span><br><span class=\"line\">sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg</span><br><span class=\"line\">sudo apt-get install kitware-archive-keyring</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cmake</span></span><br><span class=\"line\">sudo apt-get install cmake</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>g++ / clang++</p>\n<p>需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 <code>std::bind</code></p>\n</li>\n<li><p>boost 1.71</p>\n<p>1.71 刚好和 DoIP boost版本保持一致</p>\n<ul>\n<li><p>repo, (master branch) </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ethernet/boost_1_71_0</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"可选\"><a href=\"#可选\" class=\"headerlink\" title=\"可选\"></a>可选</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译文档</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y asciidoc source-highlight doxygen graphviz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pkg-config 配合make install</span></span><br><span class=\"line\"><span class=\"comment\"># Return metainformation about installed libraries</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译-amp-安装\"><a href=\"#编译-amp-安装\" class=\"headerlink\" title=\"编译&amp;安装\"></a>编译&amp;安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vsomeip-3.1.20/</span><br><span class=\"line\">mkdir build;<span class=\"built_in\">cd</span> build;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认配置</span></span><br><span class=\"line\">cmake ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  自定义</span></span><br><span class=\"line\"><span class=\"comment\"># install path</span></span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br><span class=\"line\"><span class=\"comment\"># ip addr</span></span><br><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># diagnosis addr</span></span><br><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># configuration folder</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># default configuration file</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># signal handling</span></span><br><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tool: vsomeip_ctrl</span></span><br><span class=\"line\">make vsomeip_ctrl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-核心内容\"><a href=\"#3-核心内容\" class=\"headerlink\" title=\"3. 核心内容\"></a>3. 核心内容</h2><h3 id=\"3-1-模块\"><a href=\"#3-1-模块\" class=\"headerlink\" title=\"3.1 模块\"></a>3.1 模块</h3><p>自上而下来看可以划分为以下:</p>\n<ul>\n<li><p>runtime</p>\n</li>\n<li><p>application</p>\n</li>\n<li><p>messgae</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<h4 id=\"runtime\"><a href=\"#runtime\" class=\"headerlink\" title=\"runtime\"></a><strong>runtime</strong></h4><p><img src=\"../imgs/vSOMEIP_source_runtime.png\" alt=\"runtime\"></p>\n<p>上图为runtime 类在代码中与其他类的关系.</p>\n<p>这个类主要用于创建和管理其他所有公共资源和获取runtime属性。<br>管理的资源包括:</p>\n<ul>\n<li><p>application</p>\n</li>\n<li><p>message</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<p>主要的功能函数:</p>\n<ul>\n<li><p>get</p>\n<ul>\n<li><code>runtime</code></li>\n<li><code>application</code></li>\n</ul>\n</li>\n<li><p>set/get_property:</p>\n<ul>\n<li><code>map&lt;string, string&gt;</code></li>\n</ul>\n</li>\n<li><p>create_xxx</p>\n<ul>\n<li><code>application</code></li>\n<li><code>message</code></li>\n<li><code>request</code></li>\n<li><code>response</code></li>\n<li><code>notification</code></li>\n<li><code>payload</code></li>\n</ul>\n</li>\n<li><p>remove_application</p>\n</li>\n</ul>\n<h4 id=\"application\"><a href=\"#application\" class=\"headerlink\" title=\"application\"></a><strong>application</strong></h4><p><strong>最核心的一个部分</strong></p>\n<p>每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<p>管理的资源:</p>\n<ul>\n<li>plugin</li>\n<li>configuration</li>\n<li>routing</li>\n<li>endpoint</li>\n<li>security</li>\n<li>connector</li>\n</ul>\n<h5 id=\"函数实现\"><a href=\"#函数实现\" class=\"headerlink\" title=\"函数实现:\"></a>函数实现:</h5><p>自身状态管理:</p>\n<ul>\n<li>init</li>\n<li>start</li>\n<li>stop</li>\n<li>process</li>\n<li>is_available </li>\n<li>are_available </li>\n<li>is_routing</li>\n</ul>\n<p>属性:</p>\n<ul>\n<li>get_name</li>\n<li>get_client</li>\n<li>get_diagnosis</li>\n<li>get_security_mode</li>\n<li>get_offered_services_async </li>\n<li>get_sd_acceptance_required</li>\n<li>set_routing_state</li>\n<li>set_sd_acceptance_required </li>\n<li>set_sd_acceptance_required</li>\n</ul>\n<p>handler 类(调用client 传入的函数):</p>\n<ul>\n<li><p>register_state_handler</p>\n</li>\n<li><p>unregister_state_handler</p>\n</li>\n<li><p>register_message_handler </p>\n</li>\n<li><p>unregister_message_handler </p>\n</li>\n<li><p>register_availability_handler</p>\n</li>\n<li><p>unregister_availability_handler </p>\n</li>\n<li><p>register_subscription_handler </p>\n</li>\n<li><p>register_async_subscription_handler</p>\n</li>\n<li><p>register_subscription_status_handler </p>\n</li>\n<li><p>unregister_subscription_status_handler</p>\n</li>\n<li><p>unregister_subscription_handler </p>\n</li>\n<li><p>register_routing_ready_handler </p>\n</li>\n<li><p>register_routing_state_handler </p>\n</li>\n<li><p>clear_all_handler </p>\n</li>\n<li><p>register_sd_acceptance_handler </p>\n</li>\n<li><p>register_reboot_notification_handler </p>\n</li>\n<li><p>set_watchdog_handler </p>\n</li>\n</ul>\n<p>消息服务类:</p>\n<ul>\n<li><p>update_service_configuration </p>\n</li>\n<li><p>update_security_policy_configuration</p>\n</li>\n<li><p>remove_security_policy_configuration </p>\n</li>\n<li><p>offer_service </p>\n</li>\n<li><p>stop_offer_service</p>\n</li>\n<li><p>offer_event </p>\n</li>\n<li><p>stop_offer_event</p>\n</li>\n<li><p>request_service </p>\n</li>\n<li><p>release_service</p>\n</li>\n<li><p>request_event </p>\n</li>\n<li><p>release_event </p>\n</li>\n<li><p>subscribe</p>\n</li>\n<li><p>unsubscribe</p>\n</li>\n<li><p>send </p>\n</li>\n<li><p>notify </p>\n</li>\n<li><p>notify_one </p>\n</li>\n</ul>\n<h4 id=\"messgae-amp-payload\"><a href=\"#messgae-amp-payload\" class=\"headerlink\" title=\"messgae &amp; payload\"></a><strong>messgae &amp; payload</strong></h4><p><img src=\"../imgs/vSOMEIP_source_messages_arch.png\" alt=\"msg_arch\"></p>\n<p>message &amp; payload 模块与其他模块之间的交互;<br>主要负责 <code>set/get</code> 相关的属性(session, payload, id…), (反)序列化功能.</p>\n<p>由以下 <code>.cpp</code> 文件实现功能:</p>\n<ul>\n<li>message_base_impl.cpp</li>\n<li>message_header_impl.cpp</li>\n<li>message_impl.cpp</li>\n<li>payload_impl.cpp</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"VSOMEIP-源码学习分享-之-手摸手编译安装过源码\"><a href=\"#VSOMEIP-源码学习分享-之-手摸手编译安装过源码\" class=\"headerlink\" title=\"VSOMEIP 源码学习分享 之 手摸手编译安装过源码\"></a>VSOMEIP 源码学习分享 之 手摸手编译安装过源码</h1><h2 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a>Content</h2><ol>\n<li><p>源码结构</p>\n</li>\n<li><p>环境和编译</p>\n</li>\n<li><p>核心内容  </p>\n</li>\n<li><p>1 模块  </p>\n</li>\n<li><p>2 配置</p>\n</li>\n</ol>\n<h2 id=\"1-源码结构\"><a href=\"#1-源码结构\" class=\"headerlink\" title=\"1. 源码结构\"></a>1. 源码结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── Android.bp</span><br><span class=\"line\">├── AUTHORS</span><br><span class=\"line\">├── CHANGES</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── config               --&gt; 示例配置文件</span><br><span class=\"line\">├── documentation        --&gt; 使用文档</span><br><span class=\"line\">├── examples             --&gt; Demo</span><br><span class=\"line\">├── exportmap.gcc        --&gt; 控制动态库的函数导出</span><br><span class=\"line\">├── implementation       --&gt; 逻辑代码实现</span><br><span class=\"line\">├── interface            --&gt; 代码接口设计</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── LICENSE_boost</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── <span class=\"built_in\">test</span>                 --&gt; 测试代码</span><br><span class=\"line\">├── tools                --&gt; some_ctrl 工具</span><br><span class=\"line\">├── vsomeip3Config.cmake.in            --|</span><br><span class=\"line\">├── vsomeip3ConfigVersion.cmake.in       |</span><br><span class=\"line\">├── vsomeip3.pc.in                       |</span><br><span class=\"line\">├── vsomeipConfig.cmake.in               | ==&gt; cmake 配置</span><br><span class=\"line\">├── vsomeipConfigVersion.cmake.in        |</span><br><span class=\"line\">├── vsomeip.pc.in                        |</span><br><span class=\"line\">└── vsomeip.xml                        --|</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>核心代码都在 implementation</p>\n</blockquote>\n<h3 id=\"implementation\"><a href=\"#implementation\" class=\"headerlink\" title=\"implementation\"></a>implementation</h3><p><img src=\"../imgs/00_overview_source_arch.png\" alt=\"arch\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev@dev:~/someip_space/vsomeip/implementation$ tree . -L 1</span><br><span class=\"line\">.</span><br><span class=\"line\">├── compat                 --&gt; 3.x 和 2.x 兼容层</span><br><span class=\"line\">├── configuration          --&gt; 配置模块: 配置读取,加载; 插件配置</span><br><span class=\"line\">├── e2e_protection         --&gt; e2e模块</span><br><span class=\"line\">├── endpoints              --&gt; client/server, tcp/udp, TP endpoint 实现</span><br><span class=\"line\">├── helper                 --&gt; boost 兼容层</span><br><span class=\"line\">├── logger                 --&gt; logger</span><br><span class=\"line\">├── message                --&gt; message, payload, (反)序列化 实现</span><br><span class=\"line\">├── plugin                 --&gt; 插件模块: 插件管理</span><br><span class=\"line\">├── routing                --&gt; 路由模块 </span><br><span class=\"line\">├── runtime                --&gt; 运行时: 管理 APP , runtime 资源</span><br><span class=\"line\">├── security               --&gt; 安全模块: policy, credentials </span><br><span class=\"line\">├── service_discovery      --&gt; 服务发现: </span><br><span class=\"line\">                                    发现注册模块, </span><br><span class=\"line\">                                    IPv4/IPv6 Options, </span><br><span class=\"line\">                                    负载均衡, </span><br><span class=\"line\">                                    远程订阅</span><br><span class=\"line\">├── tracing                --&gt; tracing: 配置 dlt-daemon</span><br><span class=\"line\">└── utility                --&gt; 通用工具</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-环境和编译\"><a href=\"#2-环境和编译\" class=\"headerlink\" title=\"2. 环境和编译\"></a>2. 环境和编译</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>OS环境:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID:\tUbuntu</span><br><span class=\"line\">Description:\tUbuntu 21.04</span><br><span class=\"line\">Release:\t21.04</span><br><span class=\"line\">Codename:\thirsute</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实测 18.04 也没有问题, 官方推荐14.04 及以上</p>\n</blockquote>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li>CMake</li>\n</ul>\n<blockquote>\n<p>ref : <a href=\"https://apt.kitware.com/\">https://apt.kitware.com/</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04) and newer:</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gpg wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apt-transport-https wget</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obtain a copy of our signing key:</span></span><br><span class=\"line\">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the repository to your sources list and update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Focal Fossa (20.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Bionic Beaver (18.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For Ubuntu Xenial Xerus (16.04):</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ xenial main&#x27;</span> | sudo tee /etc/apt/sources.list.d/kitware.list &gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install the kitware-archive-keyring package to ensure that your keyring stays up to date as we rotate our keys:</span></span><br><span class=\"line\">sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg</span><br><span class=\"line\">sudo apt-get install kitware-archive-keyring</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install cmake</span></span><br><span class=\"line\">sudo apt-get install cmake</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>g++ / clang++</p>\n<p>需要支持 C++11 , 因为使用了很多 C++11 的特性, 如 <code>std::bind</code></p>\n</li>\n<li><p>boost 1.71</p>\n<p>1.71 刚好和 DoIP boost版本保持一致</p>\n<ul>\n<li><p>repo, (master branch) </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ethernet/boost_1_71_0</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"可选\"><a href=\"#可选\" class=\"headerlink\" title=\"可选\"></a>可选</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译文档</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y asciidoc source-highlight doxygen graphviz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pkg-config 配合make install</span></span><br><span class=\"line\"><span class=\"comment\"># Return metainformation about installed libraries</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install -y pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译-amp-安装\"><a href=\"#编译-amp-安装\" class=\"headerlink\" title=\"编译&amp;安装\"></a>编译&amp;安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vsomeip-3.1.20/</span><br><span class=\"line\">mkdir build;<span class=\"built_in\">cd</span> build;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认配置</span></span><br><span class=\"line\">cmake ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  自定义</span></span><br><span class=\"line\"><span class=\"comment\"># install path</span></span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX:PATH=<span class=\"variable\">$YOUR_PATH</span> ..</span><br><span class=\"line\"><span class=\"comment\"># ip addr</span></span><br><span class=\"line\">cmake -DUNICAST_ADDRESS=&lt;YOUR IP ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># diagnosis addr</span></span><br><span class=\"line\">cmake -DDIAGNOSIS_ADDRESS=&lt;YOUR DIAGNOSIS ADDRESS&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># configuration folder</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FOLDER=&lt;DEFAULT CONFIGURATION FOLDER&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># default configuration file</span></span><br><span class=\"line\">cmake -DDEFAULT_CONFIGURATION_FILE=&lt;DEFAULT CONFIGURATION FILE&gt; ..</span><br><span class=\"line\"><span class=\"comment\"># signal handling</span></span><br><span class=\"line\">cmake -DENABLE_SIGNAL_HANDLING=1 ..</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tool: vsomeip_ctrl</span></span><br><span class=\"line\">make vsomeip_ctrl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-核心内容\"><a href=\"#3-核心内容\" class=\"headerlink\" title=\"3. 核心内容\"></a>3. 核心内容</h2><h3 id=\"3-1-模块\"><a href=\"#3-1-模块\" class=\"headerlink\" title=\"3.1 模块\"></a>3.1 模块</h3><p>自上而下来看可以划分为以下:</p>\n<ul>\n<li><p>runtime</p>\n</li>\n<li><p>application</p>\n</li>\n<li><p>messgae</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<h4 id=\"runtime\"><a href=\"#runtime\" class=\"headerlink\" title=\"runtime\"></a><strong>runtime</strong></h4><p><img src=\"../imgs/vSOMEIP_source_runtime.png\" alt=\"runtime\"></p>\n<p>上图为runtime 类在代码中与其他类的关系.</p>\n<p>这个类主要用于创建和管理其他所有公共资源和获取runtime属性。<br>管理的资源包括:</p>\n<ul>\n<li><p>application</p>\n</li>\n<li><p>message</p>\n</li>\n<li><p>payload</p>\n</li>\n</ul>\n<p>主要的功能函数:</p>\n<ul>\n<li><p>get</p>\n<ul>\n<li><code>runtime</code></li>\n<li><code>application</code></li>\n</ul>\n</li>\n<li><p>set/get_property:</p>\n<ul>\n<li><code>map&lt;string, string&gt;</code></li>\n</ul>\n</li>\n<li><p>create_xxx</p>\n<ul>\n<li><code>application</code></li>\n<li><code>message</code></li>\n<li><code>request</code></li>\n<li><code>response</code></li>\n<li><code>notification</code></li>\n<li><code>payload</code></li>\n</ul>\n</li>\n<li><p>remove_application</p>\n</li>\n</ul>\n<h4 id=\"application\"><a href=\"#application\" class=\"headerlink\" title=\"application\"></a><strong>application</strong></h4><p><strong>最核心的一个部分</strong></p>\n<p>每个客户端都存在且仅存在一份。<br>Application可以通过Runtime的接口来实例化。<br>管理着vSomeIP客户端的生命周期和生命周期内的所有通讯。</p>\n<p>管理的资源:</p>\n<ul>\n<li>plugin</li>\n<li>configuration</li>\n<li>routing</li>\n<li>endpoint</li>\n<li>security</li>\n<li>connector</li>\n</ul>\n<h5 id=\"函数实现\"><a href=\"#函数实现\" class=\"headerlink\" title=\"函数实现:\"></a>函数实现:</h5><p>自身状态管理:</p>\n<ul>\n<li>init</li>\n<li>start</li>\n<li>stop</li>\n<li>process</li>\n<li>is_available </li>\n<li>are_available </li>\n<li>is_routing</li>\n</ul>\n<p>属性:</p>\n<ul>\n<li>get_name</li>\n<li>get_client</li>\n<li>get_diagnosis</li>\n<li>get_security_mode</li>\n<li>get_offered_services_async </li>\n<li>get_sd_acceptance_required</li>\n<li>set_routing_state</li>\n<li>set_sd_acceptance_required </li>\n<li>set_sd_acceptance_required</li>\n</ul>\n<p>handler 类(调用client 传入的函数):</p>\n<ul>\n<li><p>register_state_handler</p>\n</li>\n<li><p>unregister_state_handler</p>\n</li>\n<li><p>register_message_handler </p>\n</li>\n<li><p>unregister_message_handler </p>\n</li>\n<li><p>register_availability_handler</p>\n</li>\n<li><p>unregister_availability_handler </p>\n</li>\n<li><p>register_subscription_handler </p>\n</li>\n<li><p>register_async_subscription_handler</p>\n</li>\n<li><p>register_subscription_status_handler </p>\n</li>\n<li><p>unregister_subscription_status_handler</p>\n</li>\n<li><p>unregister_subscription_handler </p>\n</li>\n<li><p>register_routing_ready_handler </p>\n</li>\n<li><p>register_routing_state_handler </p>\n</li>\n<li><p>clear_all_handler </p>\n</li>\n<li><p>register_sd_acceptance_handler </p>\n</li>\n<li><p>register_reboot_notification_handler </p>\n</li>\n<li><p>set_watchdog_handler </p>\n</li>\n</ul>\n<p>消息服务类:</p>\n<ul>\n<li><p>update_service_configuration </p>\n</li>\n<li><p>update_security_policy_configuration</p>\n</li>\n<li><p>remove_security_policy_configuration </p>\n</li>\n<li><p>offer_service </p>\n</li>\n<li><p>stop_offer_service</p>\n</li>\n<li><p>offer_event </p>\n</li>\n<li><p>stop_offer_event</p>\n</li>\n<li><p>request_service </p>\n</li>\n<li><p>release_service</p>\n</li>\n<li><p>request_event </p>\n</li>\n<li><p>release_event </p>\n</li>\n<li><p>subscribe</p>\n</li>\n<li><p>unsubscribe</p>\n</li>\n<li><p>send </p>\n</li>\n<li><p>notify </p>\n</li>\n<li><p>notify_one </p>\n</li>\n</ul>\n<h4 id=\"messgae-amp-payload\"><a href=\"#messgae-amp-payload\" class=\"headerlink\" title=\"messgae &amp; payload\"></a><strong>messgae &amp; payload</strong></h4><p><img src=\"../imgs/vSOMEIP_source_messages_arch.png\" alt=\"msg_arch\"></p>\n<p>message &amp; payload 模块与其他模块之间的交互;<br>主要负责 <code>set/get</code> 相关的属性(session, payload, id…), (反)序列化功能.</p>\n<p>由以下 <code>.cpp</code> 文件实现功能:</p>\n<ul>\n<li>message_base_impl.cpp</li>\n<li>message_header_impl.cpp</li>\n<li>message_impl.cpp</li>\n<li>payload_impl.cpp</li>\n</ul>\n"},{"title":"对象创建限制在堆或栈","date":"2022-01-08T15:20:16.000Z","_content":"\n### 如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\n\nC++ 中的类的对象的建立分为两种：静态建立、动态建立。\n\n* 静态建立：\n  由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;\n\n* 动态建立：\n  使用 `new` 关键字在堆空间上创建对象，底层首先调用 `operator new()` 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。\n  例如：`A *p = new A()`;\n\n### 限制对象只能建立在堆上：\n\n最直观的思想：\n避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。\n但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 `new` 来建立对象。\n但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 `new` 创建对象了。因此，这种方法不可行。\n\n#### 解决方法 1：\n\n将析构函数设置为私有。\n原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。\n当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。\n\n```C++\n\nclass A\n{\npublic:\n    A() {}\n    void destory()\n    {\n        delete this;\n    }\n\nprivate:\n    ~A()\n    {\n    }\n};\n```\n\n该方法存在的问题：\n\n用 `new` 创建的对象，通常会使用 `delete` 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 `destory()` 函数，用来释放 new 创建的对象。\n\n无法解决继承问题，因为如果这个类作为基类，析构函数要设置成`virtual`，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。\n\n#### 解决方法 2：\n\n构造函数设置为 `protected`，并提供一个 `public` 的静态函数来完成构造，而不是在类的外部使用 new 构造；\n将析构函数设置为 `protected` 。\n原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 `create()` 函数在堆上创建对象。\n\n```C++\n\nclass A\n{\nprotected:\n    A() {}\n    ~A() {}\n\npublic:\n    static A *create()\n    {\n        return new A();\n    }\n    void destory()\n    {\n        delete this;\n    }\n};\n```\n### 限制对象只能建立在栈上：\n\n解决方法：将 `operator new()` 设置为私有。\n\n原因：当对象建立在堆上时，是采用 `new` 的方式进行建立，其底层会调用` operator new()` 函数，\n因此只要对该函数加以限制，就能够防止对象建立在堆上。\n\n```C++\n\nclass A\n{\nprivate:\n    void *operator new(size_t t) {}    // 注意函数的第一个参数和返回值都是固定的\n    void operator delete(void *ptr) {} // 重载了 new 就需要重载 delete\npublic:\n    A() {}\n    ~A() {}\n};\n```\n","source":"_posts/对象创建限制在堆或栈.md","raw":"---\ntitle: 对象创建限制在堆或栈\ndate: 2022-01-08 23:20:16\ntags:\n    - cpp\n---\n\n### 如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\n\nC++ 中的类的对象的建立分为两种：静态建立、动态建立。\n\n* 静态建立：\n  由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;\n\n* 动态建立：\n  使用 `new` 关键字在堆空间上创建对象，底层首先调用 `operator new()` 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。\n  例如：`A *p = new A()`;\n\n### 限制对象只能建立在堆上：\n\n最直观的思想：\n避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。\n但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 `new` 来建立对象。\n但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 `new` 创建对象了。因此，这种方法不可行。\n\n#### 解决方法 1：\n\n将析构函数设置为私有。\n原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。\n当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。\n\n```C++\n\nclass A\n{\npublic:\n    A() {}\n    void destory()\n    {\n        delete this;\n    }\n\nprivate:\n    ~A()\n    {\n    }\n};\n```\n\n该方法存在的问题：\n\n用 `new` 创建的对象，通常会使用 `delete` 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 `destory()` 函数，用来释放 new 创建的对象。\n\n无法解决继承问题，因为如果这个类作为基类，析构函数要设置成`virtual`，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。\n\n#### 解决方法 2：\n\n构造函数设置为 `protected`，并提供一个 `public` 的静态函数来完成构造，而不是在类的外部使用 new 构造；\n将析构函数设置为 `protected` 。\n原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 `create()` 函数在堆上创建对象。\n\n```C++\n\nclass A\n{\nprotected:\n    A() {}\n    ~A() {}\n\npublic:\n    static A *create()\n    {\n        return new A();\n    }\n    void destory()\n    {\n        delete this;\n    }\n};\n```\n### 限制对象只能建立在栈上：\n\n解决方法：将 `operator new()` 设置为私有。\n\n原因：当对象建立在堆上时，是采用 `new` 的方式进行建立，其底层会调用` operator new()` 函数，\n因此只要对该函数加以限制，就能够防止对象建立在堆上。\n\n```C++\n\nclass A\n{\nprivate:\n    void *operator new(size_t t) {}    // 注意函数的第一个参数和返回值都是固定的\n    void operator delete(void *ptr) {} // 重载了 new 就需要重载 delete\npublic:\n    A() {}\n    ~A() {}\n};\n```\n","slug":"对象创建限制在堆或栈","published":1,"updated":"2022-01-09T15:25:34.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wg4000v079y6co261sx","content":"<h3 id=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"><a href=\"#如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\" class=\"headerlink\" title=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"></a>如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？</h3><p>C++ 中的类的对象的建立分为两种：静态建立、动态建立。</p>\n<ul>\n<li><p>静态建立：<br>由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;</p>\n</li>\n<li><p>动态建立：<br>使用 <code>new</code> 关键字在堆空间上创建对象，底层首先调用 <code>operator new()</code> 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。<br>例如：<code>A *p = new A()</code>;</p>\n</li>\n</ul>\n<h3 id=\"限制对象只能建立在堆上：\"><a href=\"#限制对象只能建立在堆上：\" class=\"headerlink\" title=\"限制对象只能建立在堆上：\"></a>限制对象只能建立在堆上：</h3><p>最直观的思想：<br>避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。<br>但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 <code>new</code> 来建立对象。<br>但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 <code>new</code> 创建对象了。因此，这种方法不可行。</p>\n<h4 id=\"解决方法-1：\"><a href=\"#解决方法-1：\" class=\"headerlink\" title=\"解决方法 1：\"></a>解决方法 1：</h4><p>将析构函数设置为私有。<br>原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。<br>当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法存在的问题：</p>\n<p>用 <code>new</code> 创建的对象，通常会使用 <code>delete</code> 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 <code>destory()</code> 函数，用来释放 new 创建的对象。</p>\n<p>无法解决继承问题，因为如果这个类作为基类，析构函数要设置成<code>virtual</code>，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。</p>\n<h4 id=\"解决方法-2：\"><a href=\"#解决方法-2：\" class=\"headerlink\" title=\"解决方法 2：\"></a>解决方法 2：</h4><p>构造函数设置为 <code>protected</code>，并提供一个 <code>public</code> 的静态函数来完成构造，而不是在类的外部使用 new 构造；<br>将析构函数设置为 <code>protected</code> 。<br>原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 <code>create()</code> 函数在堆上创建对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> A *<span class=\"title\">create</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制对象只能建立在栈上：\"><a href=\"#限制对象只能建立在栈上：\" class=\"headerlink\" title=\"限制对象只能建立在栈上：\"></a>限制对象只能建立在栈上：</h3><p>解决方法：将 <code>operator new()</code> 设置为私有。</p>\n<p>原因：当对象建立在堆上时，是采用 <code>new</code> 的方式进行建立，其底层会调用<code> operator new()</code> 函数，<br>因此只要对该函数加以限制，就能够防止对象建立在堆上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"keyword\">operator</span> <span class=\"title\">new</span><span class=\"params\">(<span class=\"keyword\">size_t</span> t)</span> </span>&#123;&#125;    <span class=\"comment\">// 注意函数的第一个参数和返回值都是固定的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">void</span> *ptr)</span> </span>&#123;&#125; <span class=\"comment\">// 重载了 new 就需要重载 delete</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"><a href=\"#如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\" class=\"headerlink\" title=\"如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？\"></a>如何限制类的对象只能在堆上创建？如何限制对象只能在栈上创建？</h3><p>C++ 中的类的对象的建立分为两种：静态建立、动态建立。</p>\n<ul>\n<li><p>静态建立：<br>由编译器为对象在栈空间上分配内存，直接调用类的构造函数创建对象。例如：A a;</p>\n</li>\n<li><p>动态建立：<br>使用 <code>new</code> 关键字在堆空间上创建对象，底层首先调用 <code>operator new()</code> 函数，在堆空间上寻找合适的内存并分配；然后，调用类的构造函数创建对象。<br>例如：<code>A *p = new A()</code>;</p>\n</li>\n</ul>\n<h3 id=\"限制对象只能建立在堆上：\"><a href=\"#限制对象只能建立在堆上：\" class=\"headerlink\" title=\"限制对象只能建立在堆上：\"></a>限制对象只能建立在堆上：</h3><p>最直观的思想：<br>避免直接调用类的构造函数，因为对象静态建立时，会调用类的构造函数创建对象。<br>但是直接将类的构造函数设为私有并不可行，因为当构造函数设置为私有后，不能在类的外部调用构造函数来构造对象，只能用 <code>new</code> 来建立对象。<br>但是由于 new 创建对象时，底层也会调用类的构造函数，将构造函数设置为私有后，那就无法在类的外部使用 <code>new</code> 创建对象了。因此，这种方法不可行。</p>\n<h4 id=\"解决方法-1：\"><a href=\"#解决方法-1：\" class=\"headerlink\" title=\"解决方法 1：\"></a>解决方法 1：</h4><p>将析构函数设置为私有。<br>原因：静态对象建立在栈上，是由编译器分配和释放内存空间，编译器为对象分配内存空间时，会对类的非静态函数进行检查，即编译器会检查析构函数的访问性。<br>当析构函数设为私有时，编译器创建的对象就无法通过访问析构函数来释放对象的内存空间，因此，编译器不会在栈上为对象分配内存。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该方法存在的问题：</p>\n<p>用 <code>new</code> 创建的对象，通常会使用 <code>delete</code> 释放该对象的内存空间，但此时类的外部无法调用析构函数，因此类内必须定义一个 <code>destory()</code> 函数，用来释放 new 创建的对象。</p>\n<p>无法解决继承问题，因为如果这个类作为基类，析构函数要设置成<code>virtual</code>，然后在派生类中重写该函数，来实现多态。但此时，析构函数是私有的，派生类中无法访问。</p>\n<h4 id=\"解决方法-2：\"><a href=\"#解决方法-2：\" class=\"headerlink\" title=\"解决方法 2：\"></a>解决方法 2：</h4><p>构造函数设置为 <code>protected</code>，并提供一个 <code>public</code> 的静态函数来完成构造，而不是在类的外部使用 new 构造；<br>将析构函数设置为 <code>protected</code> 。<br>原因：类似于单例模式，也保证了在派生类中能够访问析构函数。通过调用 <code>create()</code> 函数在堆上创建对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> A *<span class=\"title\">create</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制对象只能建立在栈上：\"><a href=\"#限制对象只能建立在栈上：\" class=\"headerlink\" title=\"限制对象只能建立在栈上：\"></a>限制对象只能建立在栈上：</h3><p>解决方法：将 <code>operator new()</code> 设置为私有。</p>\n<p>原因：当对象建立在堆上时，是采用 <code>new</code> 的方式进行建立，其底层会调用<code> operator new()</code> 函数，<br>因此只要对该函数加以限制，就能够防止对象建立在堆上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"keyword\">operator</span> <span class=\"title\">new</span><span class=\"params\">(<span class=\"keyword\">size_t</span> t)</span> </span>&#123;&#125;    <span class=\"comment\">// 注意函数的第一个参数和返回值都是固定的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">void</span> *ptr)</span> </span>&#123;&#125; <span class=\"comment\">// 重载了 new 就需要重载 delete</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"常用位运算","date":"2021-12-05T05:57:32.000Z","_content":"\n\n## 位运算符\n\n* `&` : 对应位都为1时，结果为1\n\n* `|` : 对应位存在一个1时，结果为1\n\n* `^` : 对应位不同时，结果为1\n\n> 异或运算的逆元素是本身, 即两次异或同一个数，结果不变： `a ^ b ^ b = a`\n\n\n* `~` : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，\n有符号整数的符号位在这 `~` 运算中同样会取反。\n\n> 补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n$$\n5 =(00000101)_2 \\\\\n-5 =(11111010)_2 \\\\\n-5_补 =(11111011)_2 \\\\\n-(-5) =(00000100)_2 = 4\n$$\n\n\n* `<<` 和 `>>` : 将二进制向左（右）移动对应的位数的值，\n\n$$\n11 =(00001011)_2 \\\\\n11 << 3 =(01011000)_2 = 88 \\\\\n11 >> 2 =(00000010)_2 = 2\n$$\n\n> 在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：\n> * 对于无符号数，会在左侧补 0；\n> * 对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。\n\n\n## 复合赋值位运算符\n\n和 `+=` , `-=` 等运算符类似，位运算也有复合赋值运算符： \n`&=` , `|=` , `^=` , `<<=` , `>>=` 。（取反是单目运算，所以没有。）\n\n> 位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。\n\n## 应用\n\n* 嵌入式中对寄存器进行按位计算，取值，置位\n\n* 高效地进行某些运算，代替其它低效的方式。\n\n* 表示集合。（常用于 状压 DP 。）\n\n* 要求进行位运算。\n\n### 常用运算\n\n|  操作\t | 运算 |\n|  --   |  -- |\n| 取出整数 n 在二进制表示下的第 k 位\t                |(n >> k) & 1        |   \n| 取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)\t | n & ((1 << k) - 1) |   \n| 对整数 n 在二进制表示下的第 k 位取反\t                | n xor (1 << k)      |\n| 对整数 n 在二进制表示下的第 k 位赋值 1\t            | n | (1 << k)        |\n| 对整数 n 在二进制表示下的第 k 位赋值 0\t            | n & (~(1 << k))     |\n\n### 表示集合\n\n| 操作\t | 集合表示  | \t位运算语句 \n| --    |    --   | --   |\n| 交集\t | a∩b\t  | a & b |\n| 并集\t | a∪b\t  | `a    |\n| 补集\t | \\overline{a}\t  | ~a （全集为二进制都是 1） |\n| 差集\t | a∖b\t  | a & (~b) |\n| 对称差 | \ta△b    |   a ^ b |\n\n\n### 实际代码\n\n* 幂运算\n\n```c\n// 乘 2 的非负整数次幂\nint mulPowerOfTwo(int n, int m) {  // 计算 n*(2^m)\n  return n << m;\n}\n\n// 除以 2 的非负整数次幂\nint divPowerOfTwo(int n, int m) {  // 计算 n/(2^m)\n  return n >> m;\n}\n\n// 对 2 的非负整数次幂取模\nint modPowerOfTwo(int x, int mod) { return x & (mod - 1); }\n\n\n// 判断一个数是不是 2 的正整数次幂\nbool isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; }\n\n// 取绝对值,在某些机器上，效率比 n > 0 ? n : -n 高。\nint Abs(int n) {\n  return (n ^ (n >> 31)) - (n >> 31);\n  /* n>>31 取得 n 的符号，若 n 为正数，n>>31 等于 0，若 n 为负数，n>>31 等于 -1\n     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)\n     需要计算 n 和 -1 的补码，然后进行异或运算，\n     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */\n}\n\n// 取两个数的最大/最小值\n// 在某些机器上，效率比 a > b ? a : b 高。\n// 如果 a>=b,(a-b)>>31 为 0，否则为 -1\nint max(int a, int b) { return b & ((a - b) >> 31) | a & (~(a - b) >> 31); }\nint min(int a, int b) { return a & ((a - b) >> 31) | b & (~(a - b) >> 31); }\n\n//判断符号是否相同\nbool isSameSign(int x, int y) {  // 有 0 的情况例外\n  return (x ^ y) >= 0;\n}\n\n// 交换两个数\nvoid swap(int &a, int &b) { a ^= b ^= a ^= b; }\n\n// 获取一个数二进制的某一位\n// 获取 a 的第 b 位，最低位编号为 0\nint getBit(int a, int b) { return (a >> b) & 1; }\n\n```\n\n> 平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:\n即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 >> 1 的值为 −1 。\n\n\n## C++ STL bitset 容器\n\nbitset 容器其实就是个01串。\n可以被看作是一个bool数组。它比bool数组更优秀的优点是：\n* 节约空间\n* 节约时间 \n* 支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。\n\n包含在自带的，`bitset` 头文件中：\n\n### bitset 容器的声明\n因为bitset容器就是装01串的，所以不用在`< >`中装数据类型，这和一般的STL容器不太一样。`< >`中装01串的位数。\n\n如：（声明一个105位的bitset）\n\n```cpp\nbitset<100000> s;\n```\n\n### 对bitset容器的一些操作\n\n#### 1、常用的操作函数\n\n和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的\n\n##### count(), any(), none() \ncount，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.\n```cpp\ns.count(); // s中有多少个1.\ns.any();   // s中存在0, true, 反之则为false\ns.none();  // s中不存在0， true\n```\n\n##### set(), reset(), flip() \nset()函数的作用是把bitset全部置为1.\n\n特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。\n```cpp\ns.set(); // 全部置为1\ns.set(u,v); // 第u位变成v,v∈0/1\n\ns.reset(); // 所有位置为0\ns.reset(k); // 第k位变成0\n\ns.flip(); //全部按位取反\ns.flip(k);// 第k位取反\n```\n\n#### 2、位运算操作在bitset中的实现\nbitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。\n\n\n另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：\n```cpp\ns[3]=1;\ns[5]=0;\n```\n> 这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。\n\n```cpp\nbitset的运算就像一个普通的整数一样，可以进行与(&)、或(|)、异或(^)、左移(<<)、右移(>>)等操作。\n\n// bitset operators\n#include <iostream>       // std::cout\n#include <string>         // std::string\n#include <bitset>         // std::bitset\n\nint main ()\n{\n  std::bitset<4> foo (std::string(\"1001\"));\n  std::bitset<4> bar (std::string(\"0011\"));\n\n  std::cout << (foo^=bar) << '\\n';       // 1010 (XOR,assign)\n  std::cout << (foo&=bar) << '\\n';       // 0010 (AND,assign)\n  std::cout << (foo|=bar) << '\\n';       // 0011 (OR,assign)\n\n  std::cout << (foo<<=2) << '\\n';        // 1100 (SHL,assign)\n  std::cout << (foo>>=1) << '\\n';        // 0110 (SHR,assign)\n\n  std::cout << (~bar) << '\\n';           // 1100 (NOT)\n  std::cout << (bar<<1) << '\\n';         // 0110 (SHL)\n  std::cout << (bar>>1) << '\\n';         // 0001 (SHR)\n\n  std::cout << (foo==bar) << '\\n';       // false (0110==0011)\n  std::cout << (foo!=bar) << '\\n';       // true  (0110!=0011)\n\n  std::cout << (foo&bar) << '\\n';        // 0010\n  std::cout << (foo|bar) << '\\n';        // 0111\n  std::cout << (foo^bar) << '\\n';        // 0101\n\n  return 0;\n}\n```\n\n\n","source":"_posts/常用位运算.md","raw":"---\ntitle: 常用位运算\ndate: 2021-12-05 13:57:32\ntags:\n    - bit op\n    - c/cpp\n---\n\n\n## 位运算符\n\n* `&` : 对应位都为1时，结果为1\n\n* `|` : 对应位存在一个1时，结果为1\n\n* `^` : 对应位不同时，结果为1\n\n> 异或运算的逆元素是本身, 即两次异或同一个数，结果不变： `a ^ b ^ b = a`\n\n\n* `~` : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，\n有符号整数的符号位在这 `~` 运算中同样会取反。\n\n> 补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。\n\n$$\n5 =(00000101)_2 \\\\\n-5 =(11111010)_2 \\\\\n-5_补 =(11111011)_2 \\\\\n-(-5) =(00000100)_2 = 4\n$$\n\n\n* `<<` 和 `>>` : 将二进制向左（右）移动对应的位数的值，\n\n$$\n11 =(00001011)_2 \\\\\n11 << 3 =(01011000)_2 = 88 \\\\\n11 >> 2 =(00000010)_2 = 2\n$$\n\n> 在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：\n> * 对于无符号数，会在左侧补 0；\n> * 对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。\n\n\n## 复合赋值位运算符\n\n和 `+=` , `-=` 等运算符类似，位运算也有复合赋值运算符： \n`&=` , `|=` , `^=` , `<<=` , `>>=` 。（取反是单目运算，所以没有。）\n\n> 位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。\n\n## 应用\n\n* 嵌入式中对寄存器进行按位计算，取值，置位\n\n* 高效地进行某些运算，代替其它低效的方式。\n\n* 表示集合。（常用于 状压 DP 。）\n\n* 要求进行位运算。\n\n### 常用运算\n\n|  操作\t | 运算 |\n|  --   |  -- |\n| 取出整数 n 在二进制表示下的第 k 位\t                |(n >> k) & 1        |   \n| 取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)\t | n & ((1 << k) - 1) |   \n| 对整数 n 在二进制表示下的第 k 位取反\t                | n xor (1 << k)      |\n| 对整数 n 在二进制表示下的第 k 位赋值 1\t            | n | (1 << k)        |\n| 对整数 n 在二进制表示下的第 k 位赋值 0\t            | n & (~(1 << k))     |\n\n### 表示集合\n\n| 操作\t | 集合表示  | \t位运算语句 \n| --    |    --   | --   |\n| 交集\t | a∩b\t  | a & b |\n| 并集\t | a∪b\t  | `a    |\n| 补集\t | \\overline{a}\t  | ~a （全集为二进制都是 1） |\n| 差集\t | a∖b\t  | a & (~b) |\n| 对称差 | \ta△b    |   a ^ b |\n\n\n### 实际代码\n\n* 幂运算\n\n```c\n// 乘 2 的非负整数次幂\nint mulPowerOfTwo(int n, int m) {  // 计算 n*(2^m)\n  return n << m;\n}\n\n// 除以 2 的非负整数次幂\nint divPowerOfTwo(int n, int m) {  // 计算 n/(2^m)\n  return n >> m;\n}\n\n// 对 2 的非负整数次幂取模\nint modPowerOfTwo(int x, int mod) { return x & (mod - 1); }\n\n\n// 判断一个数是不是 2 的正整数次幂\nbool isPowerOfTwo(int n) { return n > 0 && (n & (n - 1)) == 0; }\n\n// 取绝对值,在某些机器上，效率比 n > 0 ? n : -n 高。\nint Abs(int n) {\n  return (n ^ (n >> 31)) - (n >> 31);\n  /* n>>31 取得 n 的符号，若 n 为正数，n>>31 等于 0，若 n 为负数，n>>31 等于 -1\n     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)\n     需要计算 n 和 -1 的补码，然后进行异或运算，\n     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */\n}\n\n// 取两个数的最大/最小值\n// 在某些机器上，效率比 a > b ? a : b 高。\n// 如果 a>=b,(a-b)>>31 为 0，否则为 -1\nint max(int a, int b) { return b & ((a - b) >> 31) | a & (~(a - b) >> 31); }\nint min(int a, int b) { return a & ((a - b) >> 31) | b & (~(a - b) >> 31); }\n\n//判断符号是否相同\nbool isSameSign(int x, int y) {  // 有 0 的情况例外\n  return (x ^ y) >= 0;\n}\n\n// 交换两个数\nvoid swap(int &a, int &b) { a ^= b ^= a ^= b; }\n\n// 获取一个数二进制的某一位\n// 获取 a 的第 b 位，最低位编号为 0\nint getBit(int a, int b) { return (a >> b) & 1; }\n\n```\n\n> 平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:\n即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 >> 1 的值为 −1 。\n\n\n## C++ STL bitset 容器\n\nbitset 容器其实就是个01串。\n可以被看作是一个bool数组。它比bool数组更优秀的优点是：\n* 节约空间\n* 节约时间 \n* 支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。\n\n包含在自带的，`bitset` 头文件中：\n\n### bitset 容器的声明\n因为bitset容器就是装01串的，所以不用在`< >`中装数据类型，这和一般的STL容器不太一样。`< >`中装01串的位数。\n\n如：（声明一个105位的bitset）\n\n```cpp\nbitset<100000> s;\n```\n\n### 对bitset容器的一些操作\n\n#### 1、常用的操作函数\n\n和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的\n\n##### count(), any(), none() \ncount，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.\n```cpp\ns.count(); // s中有多少个1.\ns.any();   // s中存在0, true, 反之则为false\ns.none();  // s中不存在0， true\n```\n\n##### set(), reset(), flip() \nset()函数的作用是把bitset全部置为1.\n\n特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。\n```cpp\ns.set(); // 全部置为1\ns.set(u,v); // 第u位变成v,v∈0/1\n\ns.reset(); // 所有位置为0\ns.reset(k); // 第k位变成0\n\ns.flip(); //全部按位取反\ns.flip(k);// 第k位取反\n```\n\n#### 2、位运算操作在bitset中的实现\nbitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。\n\n\n另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：\n```cpp\ns[3]=1;\ns[5]=0;\n```\n> 这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。\n\n```cpp\nbitset的运算就像一个普通的整数一样，可以进行与(&)、或(|)、异或(^)、左移(<<)、右移(>>)等操作。\n\n// bitset operators\n#include <iostream>       // std::cout\n#include <string>         // std::string\n#include <bitset>         // std::bitset\n\nint main ()\n{\n  std::bitset<4> foo (std::string(\"1001\"));\n  std::bitset<4> bar (std::string(\"0011\"));\n\n  std::cout << (foo^=bar) << '\\n';       // 1010 (XOR,assign)\n  std::cout << (foo&=bar) << '\\n';       // 0010 (AND,assign)\n  std::cout << (foo|=bar) << '\\n';       // 0011 (OR,assign)\n\n  std::cout << (foo<<=2) << '\\n';        // 1100 (SHL,assign)\n  std::cout << (foo>>=1) << '\\n';        // 0110 (SHR,assign)\n\n  std::cout << (~bar) << '\\n';           // 1100 (NOT)\n  std::cout << (bar<<1) << '\\n';         // 0110 (SHL)\n  std::cout << (bar>>1) << '\\n';         // 0001 (SHR)\n\n  std::cout << (foo==bar) << '\\n';       // false (0110==0011)\n  std::cout << (foo!=bar) << '\\n';       // true  (0110!=0011)\n\n  std::cout << (foo&bar) << '\\n';        // 0010\n  std::cout << (foo|bar) << '\\n';        // 0111\n  std::cout << (foo^bar) << '\\n';        // 0101\n\n  return 0;\n}\n```\n\n\n","slug":"常用位运算","published":1,"updated":"2021-12-05T07:29:59.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1as2wg6000y079yg79x3sr5","content":"<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><ul>\n<li><p><code>&amp;</code> : 对应位都为1时，结果为1</p>\n</li>\n<li><p><code>|</code> : 对应位存在一个1时，结果为1</p>\n</li>\n<li><p><code>^</code> : 对应位不同时，结果为1</p>\n</li>\n</ul>\n<blockquote>\n<p>异或运算的逆元素是本身, 即两次异或同一个数，结果不变： <code>a ^ b ^ b = a</code></p>\n</blockquote>\n<ul>\n<li><code>~</code> : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，<br>有符号整数的符号位在这 <code>~</code> 运算中同样会取反。</li>\n</ul>\n<blockquote>\n<p>补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n</blockquote>\n<p>在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n<p>$$<br>5 =(00000101)_2 \\<br>-5 =(11111010)_2 \\<br>-5_补 =(11111011)_2 \\<br>-(-5) =(00000100)_2 = 4<br>$$</p>\n<ul>\n<li><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> : 将二进制向左（右）移动对应的位数的值，</li>\n</ul>\n<p>$$<br>11 =(00001011)_2 \\<br>11 &lt;&lt; 3 =(01011000)_2 = 88 \\<br>11 &gt;&gt; 2 =(00000010)_2 = 2<br>$$</p>\n<blockquote>\n<p>在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：</p>\n<ul>\n<li>对于无符号数，会在左侧补 0；</li>\n<li>对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。</li>\n</ul>\n</blockquote>\n<h2 id=\"复合赋值位运算符\"><a href=\"#复合赋值位运算符\" class=\"headerlink\" title=\"复合赋值位运算符\"></a>复合赋值位运算符</h2><p>和 <code>+=</code> , <code>-=</code> 等运算符类似，位运算也有复合赋值运算符：<br><code>&amp;=</code> , <code>|=</code> , <code>^=</code> , <code>&lt;&lt;=</code> , <code>&gt;&gt;=</code> 。（取反是单目运算，所以没有。）</p>\n<blockquote>\n<p>位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li><p>嵌入式中对寄存器进行按位计算，取值，置位</p>\n</li>\n<li><p>高效地进行某些运算，代替其它低效的方式。</p>\n</li>\n<li><p>表示集合。（常用于 状压 DP 。）</p>\n</li>\n<li><p>要求进行位运算。</p>\n</li>\n</ul>\n<h3 id=\"常用运算\"><a href=\"#常用运算\" class=\"headerlink\" title=\"常用运算\"></a>常用运算</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>取出整数 n 在二进制表示下的第 k 位</td>\n<td>(n &gt;&gt; k) &amp; 1</td>\n</tr>\n<tr>\n<td>取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)</td>\n<td>n &amp; ((1 &lt;&lt; k) - 1)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位取反</td>\n<td>n xor (1 &lt;&lt; k)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 1</td>\n<td>n</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 0</td>\n<td>n &amp; (~(1 &lt;&lt; k))</td>\n</tr>\n</tbody></table>\n<h3 id=\"表示集合\"><a href=\"#表示集合\" class=\"headerlink\" title=\"表示集合\"></a>表示集合</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>集合表示</th>\n<th>位运算语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>交集</td>\n<td>a∩b</td>\n<td>a &amp; b</td>\n</tr>\n<tr>\n<td>并集</td>\n<td>a∪b</td>\n<td>`a</td>\n</tr>\n<tr>\n<td>补集</td>\n<td>\\overline{a}</td>\n<td>~a （全集为二进制都是 1）</td>\n</tr>\n<tr>\n<td>差集</td>\n<td>a∖b</td>\n<td>a &amp; (~b)</td>\n</tr>\n<tr>\n<td>对称差</td>\n<td>a△b</td>\n<td>a ^ b</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><ul>\n<li>幂运算</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 乘 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mulPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n*(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 除以 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">divPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n/(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 2 的非负整数次幂取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> mod)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; (mod - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是不是 2 的正整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取绝对值,在某些机器上，效率比 n &gt; 0 ? n : -n 高。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n ^ (n &gt;&gt; <span class=\"number\">31</span>)) - (n &gt;&gt; <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"comment\">/* n&gt;&gt;31 取得 n 的符号，若 n 为正数，n&gt;&gt;31 等于 0，若 n 为负数，n&gt;&gt;31 等于 -1</span></span><br><span class=\"line\"><span class=\"comment\">     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)</span></span><br><span class=\"line\"><span class=\"comment\">     需要计算 n 和 -1 的补码，然后进行异或运算，</span></span><br><span class=\"line\"><span class=\"comment\">     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取两个数的最大/最小值</span></span><br><span class=\"line\"><span class=\"comment\">// 在某些机器上，效率比 a &gt; b ? a : b 高。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 a&gt;=b,(a-b)&gt;&gt;31 为 0，否则为 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> b &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | a &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> a &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | b &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断符号是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameSign</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;  <span class=\"comment\">// 有 0 的情况例外</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x ^ y) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换两个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; a ^= b ^= a ^= b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个数二进制的某一位</span></span><br><span class=\"line\"><span class=\"comment\">// 获取 a 的第 b 位，最低位编号为 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBit</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> (a &gt;&gt; b) &amp; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:<br>即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 &gt;&gt; 1 的值为 −1 。</p>\n</blockquote>\n<h2 id=\"C-STL-bitset-容器\"><a href=\"#C-STL-bitset-容器\" class=\"headerlink\" title=\"C++ STL bitset 容器\"></a>C++ STL bitset 容器</h2><p>bitset 容器其实就是个01串。<br>可以被看作是一个bool数组。它比bool数组更优秀的优点是：</p>\n<ul>\n<li>节约空间</li>\n<li>节约时间 </li>\n<li>支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。</li>\n</ul>\n<p>包含在自带的，<code>bitset</code> 头文件中：</p>\n<h3 id=\"bitset-容器的声明\"><a href=\"#bitset-容器的声明\" class=\"headerlink\" title=\"bitset 容器的声明\"></a>bitset 容器的声明</h3><p>因为bitset容器就是装01串的，所以不用在<code>&lt; &gt;</code>中装数据类型，这和一般的STL容器不太一样。<code>&lt; &gt;</code>中装01串的位数。</p>\n<p>如：（声明一个105位的bitset）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset&lt;100000&gt; s;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对bitset容器的一些操作\"><a href=\"#对bitset容器的一些操作\" class=\"headerlink\" title=\"对bitset容器的一些操作\"></a>对bitset容器的一些操作</h3><h4 id=\"1、常用的操作函数\"><a href=\"#1、常用的操作函数\" class=\"headerlink\" title=\"1、常用的操作函数\"></a>1、常用的操作函数</h4><p>和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的</p>\n<h5 id=\"count-any-none\"><a href=\"#count-any-none\" class=\"headerlink\" title=\"count(), any(), none()\"></a>count(), any(), none()</h5><p>count，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">count</span>(); <span class=\"comment\">// s中有多少个1.</span></span><br><span class=\"line\">s.<span class=\"built_in\">any</span>();   <span class=\"comment\">// s中存在0, true, 反之则为false</span></span><br><span class=\"line\">s.<span class=\"built_in\">none</span>();  <span class=\"comment\">// s中不存在0， true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"set-reset-flip\"><a href=\"#set-reset-flip\" class=\"headerlink\" title=\"set(), reset(), flip()\"></a>set(), reset(), flip()</h5><p>set()函数的作用是把bitset全部置为1.</p>\n<p>特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">set</span>(); <span class=\"comment\">// 全部置为1</span></span><br><span class=\"line\">s.<span class=\"built_in\">set</span>(u,v); <span class=\"comment\">// 第u位变成v,v∈0/1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(); <span class=\"comment\">// 所有位置为0</span></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(k); <span class=\"comment\">// 第k位变成0</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(); <span class=\"comment\">//全部按位取反</span></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(k);<span class=\"comment\">// 第k位取反</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、位运算操作在bitset中的实现\"><a href=\"#2、位运算操作在bitset中的实现\" class=\"headerlink\" title=\"2、位运算操作在bitset中的实现\"></a>2、位运算操作在bitset中的实现</h4><p>bitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。</p>\n<p>另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">s[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset的运算就像一个普通的整数一样，可以进行与(&amp;)、或(|)、异或(^)、左移(&lt;&lt;)、右移(&gt;&gt;)等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset operators</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span>       <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span>         <span class=\"comment\">// std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span>         <span class=\"comment\">// std::bitset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">foo</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;1001&quot;</span>))</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">bar</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;0011&quot;</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 1010 (XOR,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0010 (AND,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0011 (OR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&lt;&lt;=<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 1100 (SHL,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&gt;&gt;=<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0110 (SHR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (~bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;           <span class=\"comment\">// 1100 (NOT)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&lt;&lt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0110 (SHL)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&gt;&gt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0001 (SHR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo==bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// false (0110==0011)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo!=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// true  (0110!=0011)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0010</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0111</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><ul>\n<li><p><code>&amp;</code> : 对应位都为1时，结果为1</p>\n</li>\n<li><p><code>|</code> : 对应位存在一个1时，结果为1</p>\n</li>\n<li><p><code>^</code> : 对应位不同时，结果为1</p>\n</li>\n</ul>\n<blockquote>\n<p>异或运算的逆元素是本身, 即两次异或同一个数，结果不变： <code>a ^ b ^ b = a</code></p>\n</blockquote>\n<ul>\n<li><code>~</code> : 对一个数进行单目运算，把这个数的补码中的 0 和 1 全部取反，<br>有符号整数的符号位在这 <code>~</code> 运算中同样会取反。</li>\n</ul>\n<blockquote>\n<p>补码： 在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n</blockquote>\n<p>在二进制表示下，正数和 0 的补码为其本身，负数的补码是将其对应正数按位取反后加一。</p>\n<p>$$<br>5 =(00000101)_2 \\<br>-5 =(11111010)_2 \\<br>-5_补 =(11111011)_2 \\<br>-(-5) =(00000100)_2 = 4<br>$$</p>\n<ul>\n<li><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> : 将二进制向左（右）移动对应的位数的值，</li>\n</ul>\n<p>$$<br>11 =(00001011)_2 \\<br>11 &lt;&lt; 3 =(01011000)_2 = 88 \\<br>11 &gt;&gt; 2 =(00000010)_2 = 2<br>$$</p>\n<blockquote>\n<p>在 C++ 中，右移操作中右侧多余的位将会被舍弃，而左侧较为复杂：</p>\n<ul>\n<li>对于无符号数，会在左侧补 0；</li>\n<li>对于有符号数，则会用最高位的数（其实就是符号位，非负数为 0，负数为 1）补齐。左移操作总是在右侧补 0。</li>\n</ul>\n</blockquote>\n<h2 id=\"复合赋值位运算符\"><a href=\"#复合赋值位运算符\" class=\"headerlink\" title=\"复合赋值位运算符\"></a>复合赋值位运算符</h2><p>和 <code>+=</code> , <code>-=</code> 等运算符类似，位运算也有复合赋值运算符：<br><code>&amp;=</code> , <code>|=</code> , <code>^=</code> , <code>&lt;&lt;=</code> , <code>&gt;&gt;=</code> 。（取反是单目运算，所以没有。）</p>\n<blockquote>\n<p>位运算的优先级低于算术运算符（除了取反），而按位与、按位或及异或低于比较运算符，所以使用时需多加注意，在必要时添加括号。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ul>\n<li><p>嵌入式中对寄存器进行按位计算，取值，置位</p>\n</li>\n<li><p>高效地进行某些运算，代替其它低效的方式。</p>\n</li>\n<li><p>表示集合。（常用于 状压 DP 。）</p>\n</li>\n<li><p>要求进行位运算。</p>\n</li>\n</ul>\n<h3 id=\"常用运算\"><a href=\"#常用运算\" class=\"headerlink\" title=\"常用运算\"></a>常用运算</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>取出整数 n 在二进制表示下的第 k 位</td>\n<td>(n &gt;&gt; k) &amp; 1</td>\n</tr>\n<tr>\n<td>取出整数n 在二进制表示下的第 0 ~ k - 1 位 (后 k 位)</td>\n<td>n &amp; ((1 &lt;&lt; k) - 1)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位取反</td>\n<td>n xor (1 &lt;&lt; k)</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 1</td>\n<td>n</td>\n</tr>\n<tr>\n<td>对整数 n 在二进制表示下的第 k 位赋值 0</td>\n<td>n &amp; (~(1 &lt;&lt; k))</td>\n</tr>\n</tbody></table>\n<h3 id=\"表示集合\"><a href=\"#表示集合\" class=\"headerlink\" title=\"表示集合\"></a>表示集合</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>集合表示</th>\n<th>位运算语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>交集</td>\n<td>a∩b</td>\n<td>a &amp; b</td>\n</tr>\n<tr>\n<td>并集</td>\n<td>a∪b</td>\n<td>`a</td>\n</tr>\n<tr>\n<td>补集</td>\n<td>\\overline{a}</td>\n<td>~a （全集为二进制都是 1）</td>\n</tr>\n<tr>\n<td>差集</td>\n<td>a∖b</td>\n<td>a &amp; (~b)</td>\n</tr>\n<tr>\n<td>对称差</td>\n<td>a△b</td>\n<td>a ^ b</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际代码\"><a href=\"#实际代码\" class=\"headerlink\" title=\"实际代码\"></a>实际代码</h3><ul>\n<li>幂运算</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 乘 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mulPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n*(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 除以 2 的非负整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">divPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;  <span class=\"comment\">// 计算 n/(2^m)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n &gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 2 的非负整数次幂取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> mod)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; (mod - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是不是 2 的正整数次幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取绝对值,在某些机器上，效率比 n &gt; 0 ? n : -n 高。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Abs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n ^ (n &gt;&gt; <span class=\"number\">31</span>)) - (n &gt;&gt; <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"comment\">/* n&gt;&gt;31 取得 n 的符号，若 n 为正数，n&gt;&gt;31 等于 0，若 n 为负数，n&gt;&gt;31 等于 -1</span></span><br><span class=\"line\"><span class=\"comment\">     若 n 为正数 n^0=n, 数不变，若 n 为负数有 n^(-1)</span></span><br><span class=\"line\"><span class=\"comment\">     需要计算 n 和 -1 的补码，然后进行异或运算，</span></span><br><span class=\"line\"><span class=\"comment\">     结果 n 变号并且为 n 的绝对值减 1，再减去 -1 就是绝对值 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取两个数的最大/最小值</span></span><br><span class=\"line\"><span class=\"comment\">// 在某些机器上，效率比 a &gt; b ? a : b 高。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 a&gt;=b,(a-b)&gt;&gt;31 为 0，否则为 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> b &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | a &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> a &amp; ((a - b) &gt;&gt; <span class=\"number\">31</span>) | b &amp; (~(a - b) &gt;&gt; <span class=\"number\">31</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断符号是否相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSameSign</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;  <span class=\"comment\">// 有 0 的情况例外</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x ^ y) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换两个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; a ^= b ^= a ^= b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个数二进制的某一位</span></span><br><span class=\"line\"><span class=\"comment\">// 获取 a 的第 b 位，最低位编号为 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBit</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123; <span class=\"keyword\">return</span> (a &gt;&gt; b) &amp; <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>平常写除法是向 0 取整，而这里的右移是向下取整（注意这里的区别）:<br>即当数大于等于 0 时两种方法等价，当数小于 0 时会有区别，如： -1 / 2 的值为 0 ，而 -1 &gt;&gt; 1 的值为 −1 。</p>\n</blockquote>\n<h2 id=\"C-STL-bitset-容器\"><a href=\"#C-STL-bitset-容器\" class=\"headerlink\" title=\"C++ STL bitset 容器\"></a>C++ STL bitset 容器</h2><p>bitset 容器其实就是个01串。<br>可以被看作是一个bool数组。它比bool数组更优秀的优点是：</p>\n<ul>\n<li>节约空间</li>\n<li>节约时间 </li>\n<li>支持基本的位运算。在bitset容器中，8位占一个字节，相比于bool数组4位一个字节的空间利用率要高很多。同时，n位的bitset在执行一次位运算的复杂度可以被看作是n/32，这都是bool数组所没有的优秀性质。</li>\n</ul>\n<p>包含在自带的，<code>bitset</code> 头文件中：</p>\n<h3 id=\"bitset-容器的声明\"><a href=\"#bitset-容器的声明\" class=\"headerlink\" title=\"bitset 容器的声明\"></a>bitset 容器的声明</h3><p>因为bitset容器就是装01串的，所以不用在<code>&lt; &gt;</code>中装数据类型，这和一般的STL容器不太一样。<code>&lt; &gt;</code>中装01串的位数。</p>\n<p>如：（声明一个105位的bitset）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset&lt;100000&gt; s;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对bitset容器的一些操作\"><a href=\"#对bitset容器的一些操作\" class=\"headerlink\" title=\"对bitset容器的一些操作\"></a>对bitset容器的一些操作</h3><h4 id=\"1、常用的操作函数\"><a href=\"#1、常用的操作函数\" class=\"headerlink\" title=\"1、常用的操作函数\"></a>1、常用的操作函数</h4><p>和其他的STL容器一样，对bitset的很多操作也是由自带函数来实现的</p>\n<h5 id=\"count-any-none\"><a href=\"#count-any-none\" class=\"headerlink\" title=\"count(), any(), none()\"></a>count(), any(), none()</h5><p>count，数数的意思。它的作用是数出1的个数。即s.count()返回s中有多少个1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">count</span>(); <span class=\"comment\">// s中有多少个1.</span></span><br><span class=\"line\">s.<span class=\"built_in\">any</span>();   <span class=\"comment\">// s中存在0, true, 反之则为false</span></span><br><span class=\"line\">s.<span class=\"built_in\">none</span>();  <span class=\"comment\">// s中不存在0， true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"set-reset-flip\"><a href=\"#set-reset-flip\" class=\"headerlink\" title=\"set(), reset(), flip()\"></a>set(), reset(), flip()</h5><p>set()函数的作用是把bitset全部置为1.</p>\n<p>特别地，set()函数里面可以传参数。set(u,v)的意思是把bitset中的第u位变成v,v∈0/1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">set</span>(); <span class=\"comment\">// 全部置为1</span></span><br><span class=\"line\">s.<span class=\"built_in\">set</span>(u,v); <span class=\"comment\">// 第u位变成v,v∈0/1</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(); <span class=\"comment\">// 所有位置为0</span></span><br><span class=\"line\">s.<span class=\"built_in\">reset</span>(k); <span class=\"comment\">// 第k位变成0</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(); <span class=\"comment\">//全部按位取反</span></span><br><span class=\"line\">s.<span class=\"built_in\">flip</span>(k);<span class=\"comment\">// 第k位取反</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、位运算操作在bitset中的实现\"><a href=\"#2、位运算操作在bitset中的实现\" class=\"headerlink\" title=\"2、位运算操作在bitset中的实现\"></a>2、位运算操作在bitset中的实现</h4><p>bitset的作用就是帮助我们方便地实现位运算的相关操作。它当然支持位运算的一些操作内容。编写程序的时候对数进行的二进制运算均可以用在bitset函数上。</p>\n<p>另外，bitset容器还支持直接取值和直接赋值的操作：具体操作方式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">s[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里要注意：在bitset容器中，最低位为0。这与数组实现仍然有区别。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitset的运算就像一个普通的整数一样，可以进行与(&amp;)、或(|)、异或(^)、左移(&lt;&lt;)、右移(&gt;&gt;)等操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset operators</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span>       <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span>         <span class=\"comment\">// std::string</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span>         <span class=\"comment\">// std::bitset</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">foo</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;1001&quot;</span>))</span></span>;</span><br><span class=\"line\">  <span class=\"function\">std::bitset&lt;4&gt; <span class=\"title\">bar</span> <span class=\"params\">(std::string(<span class=\"string\">&quot;0011&quot;</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 1010 (XOR,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0010 (AND,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// 0011 (OR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&lt;&lt;=<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 1100 (SHL,assign)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&gt;&gt;=<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0110 (SHR,assign)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (~bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;           <span class=\"comment\">// 1100 (NOT)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&lt;&lt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0110 (SHL)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (bar&gt;&gt;<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;         <span class=\"comment\">// 0001 (SHR)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo==bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// false (0110==0011)</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo!=bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;       <span class=\"comment\">// true  (0110!=0011)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; (foo&amp;bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0010</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo|bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0111</span></span><br><span class=\"line\">  std::cout &lt;&lt; (foo^bar) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;        <span class=\"comment\">// 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl1as2wfq000a079ygnqt4kll","category_id":"cl1as2wft000e079y8fvhfpiq","_id":"cl1as2wg2000q079y366ffgby"},{"post_id":"cl1as2wfs000c079y81imf34f","category_id":"cl1as2wft000e079y8fvhfpiq","_id":"cl1as2wg4000u079y45w4gyvn"},{"post_id":"cl1as2wfx000i079yhnzyek0j","category_id":"cl1as2wg1000p079y1yo3c11i","_id":"cl1as2wg6000z079ybmf12or7"}],"PostTag":[{"post_id":"cl1as2wfg0001079y9tjq5uba","tag_id":"cl1as2wfk0004079y0pochmjy","_id":"cl1as2wft000d079y43usbar3"},{"post_id":"cl1as2wfg0001079y9tjq5uba","tag_id":"cl1as2wfp0008079ybsnwc1g9","_id":"cl1as2wfw000g079y3bqq3puz"},{"post_id":"cl1as2wfs000c079y81imf34f","tag_id":"cl1as2wfk0004079y0pochmjy","_id":"cl1as2wfy000j079ybjl60ks9"},{"post_id":"cl1as2wfm0005079y88jj6m7r","tag_id":"cl1as2wfk0004079y0pochmjy","_id":"cl1as2wg5000x079y46ok081q"},{"post_id":"cl1as2wfm0005079y88jj6m7r","tag_id":"cl1as2wfw000h079y8ejh33j9","_id":"cl1as2wg60010079y3vffc7q6"},{"post_id":"cl1as2wfm0005079y88jj6m7r","tag_id":"cl1as2wfz000m079yho15g0hc","_id":"cl1as2wg70012079y00cfd0fe"},{"post_id":"cl1as2wfm0005079y88jj6m7r","tag_id":"cl1as2wg2000r079yamnu1qzj","_id":"cl1as2wg70013079yfxb0eg3l"},{"post_id":"cl1as2wfn0006079yavje26t0","tag_id":"cl1as2wg5000w079yg4cz3rxy","_id":"cl1as2wg70015079yefn3g63m"},{"post_id":"cl1as2wfo0007079yast7hr36","tag_id":"cl1as2wg60011079yahfmht3n","_id":"cl1as2wg80018079y6m0geg10"},{"post_id":"cl1as2wfo0007079yast7hr36","tag_id":"cl1as2wg70014079ydua16asz","_id":"cl1as2wg80019079yhipk8xo8"},{"post_id":"cl1as2wfo0007079yast7hr36","tag_id":"cl1as2wg70016079y1bp863cb","_id":"cl1as2wg8001b079ydqig716h"},{"post_id":"cl1as2wfp0009079y58ru8v3y","tag_id":"cl1as2wg80017079yaukx7zbk","_id":"cl1as2wg8001c079y0i6mevhg"},{"post_id":"cl1as2wfq000a079ygnqt4kll","tag_id":"cl1as2wfk0004079y0pochmjy","_id":"cl1as2wg9001e079yagcg3tr3"},{"post_id":"cl1as2wfq000a079ygnqt4kll","tag_id":"cl1as2wfw000h079y8ejh33j9","_id":"cl1as2wg9001f079ydwnqbkhl"},{"post_id":"cl1as2wfu000f079y8fl60fei","tag_id":"cl1as2wg8001d079y6l1beh09","_id":"cl1as2wg9001j079yaiiee80x"},{"post_id":"cl1as2wfu000f079y8fl60fei","tag_id":"cl1as2wg9001g079y0vew9wnp","_id":"cl1as2wg9001k079y9ruddf36"},{"post_id":"cl1as2wfu000f079y8fl60fei","tag_id":"cl1as2wg9001h079y3ar47xeu","_id":"cl1as2wga001m079y96y44t3k"},{"post_id":"cl1as2wfx000i079yhnzyek0j","tag_id":"cl1as2wg9001i079y24rc36cd","_id":"cl1as2wga001o079y7n41hyrv"},{"post_id":"cl1as2wfx000i079yhnzyek0j","tag_id":"cl1as2wg9001l079yegjm4bne","_id":"cl1as2wga001p079y9v7b8k47"},{"post_id":"cl1as2wfy000k079yexkd63py","tag_id":"cl1as2wga001n079yd7m38oaf","_id":"cl1as2wgb001s079y4otq1nqj"},{"post_id":"cl1as2wfy000k079yexkd63py","tag_id":"cl1as2wga001q079y71zs7kyj","_id":"cl1as2wgb001t079y1t3751dh"},{"post_id":"cl1as2wg0000n079y48uvgwd9","tag_id":"cl1as2wga001n079yd7m38oaf","_id":"cl1as2wgb001w079y8kml1zbf"},{"post_id":"cl1as2wg0000n079y48uvgwd9","tag_id":"cl1as2wga001q079y71zs7kyj","_id":"cl1as2wgb001x079ybxa69i1u"},{"post_id":"cl1as2wg1000o079y25aigh29","tag_id":"cl1as2wga001n079yd7m38oaf","_id":"cl1as2wgc0020079ycfprh0t9"},{"post_id":"cl1as2wg1000o079y25aigh29","tag_id":"cl1as2wga001q079y71zs7kyj","_id":"cl1as2wgc0021079y4rjv9os8"},{"post_id":"cl1as2wg2000s079ye7anbr92","tag_id":"cl1as2wg80017079yaukx7zbk","_id":"cl1as2wgc0023079ybqli86mk"},{"post_id":"cl1as2wg4000t079ydjz1983u","tag_id":"cl1as2wgc0022079yfihah7d0","_id":"cl1as2wgd0028079y916q6wcc"},{"post_id":"cl1as2wg4000t079ydjz1983u","tag_id":"cl1as2wgc0024079y38k0665u","_id":"cl1as2wgd0029079y94os7q3d"},{"post_id":"cl1as2wg4000t079ydjz1983u","tag_id":"cl1as2wgc0025079y6n505r3e","_id":"cl1as2wgd002b079y482wdz9v"},{"post_id":"cl1as2wg4000t079ydjz1983u","tag_id":"cl1as2wgd0026079y6coid965","_id":"cl1as2wgd002c079y63hff8l8"},{"post_id":"cl1as2wg4000v079y6co261sx","tag_id":"cl1as2wgd0027079y0hnq3vhz","_id":"cl1as2wgd002e079ye4vf52hg"},{"post_id":"cl1as2wg6000y079yg79x3sr5","tag_id":"cl1as2wgd002a079y2lb17klx","_id":"cl1as2wge002f079yh8kw4w6y"},{"post_id":"cl1as2wg6000y079yg79x3sr5","tag_id":"cl1as2wgd002d079y3oqh3pnb","_id":"cl1as2wge002g079ybmlg5hnd"}],"Tag":[{"name":"Linux","_id":"cl1as2wfk0004079y0pochmjy"},{"name":"gdb","_id":"cl1as2wfp0008079ybsnwc1g9"},{"name":"C","_id":"cl1as2wfw000h079y8ejh33j9"},{"name":"Memory","_id":"cl1as2wfz000m079yho15g0hc"},{"name":"Notes","_id":"cl1as2wg2000r079yamnu1qzj"},{"name":"adb","_id":"cl1as2wg5000w079yg4cz3rxy"},{"name":"linux","_id":"cl1as2wg60011079yahfmht3n"},{"name":"c","_id":"cl1as2wg70014079ydua16asz"},{"name":"elf","_id":"cl1as2wg70016079y1bp863cb"},{"name":"Linux, C","_id":"cl1as2wg80017079yaukx7zbk"},{"name":"osi","_id":"cl1as2wg8001d079y6l1beh09"},{"name":"phy","_id":"cl1as2wg9001g079y0vew9wnp"},{"name":"mac","_id":"cl1as2wg9001h079y3ar47xeu"},{"name":"someip-sd","_id":"cl1as2wg9001i079y24rc36cd"},{"name":"service discovery","_id":"cl1as2wg9001l079yegjm4bne"},{"name":"someip","_id":"cl1as2wga001n079yd7m38oaf"},{"name":"vSOMEIP","_id":"cl1as2wga001q079y71zs7kyj"},{"name":"CPP","_id":"cl1as2wgc0022079yfihah7d0"},{"name":"SOMEIP","_id":"cl1as2wgc0024079y38k0665u"},{"name":"sources","_id":"cl1as2wgc0025079y6n505r3e"},{"name":"notes","_id":"cl1as2wgd0026079y6coid965"},{"name":"cpp","_id":"cl1as2wgd0027079y0hnq3vhz"},{"name":"bit op","_id":"cl1as2wgd002a079y2lb17klx"},{"name":"c/cpp","_id":"cl1as2wgd002d079y3oqh3pnb"}]}}